/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef dbproxy_server_TYPES_H
#define dbproxy_server_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace community { namespace dbproxy_server {

struct MessageType {
  enum type {
    MT_LOGIN_CHECK_REQ = 5000,
    MT_LOGIN_CHECK_RES = 5001,
    MT_USER_LOGIN_REQ = 5002,
    MT_USER_LOGIN_RES = 5003,
    MT_LOGIN_GET_USERINFO_REQ = 5004,
    MT_LOGIN_GET_USERINFO_RES = 5005,
    MT_GET_USER_IDENTITY_REQ = 5006,
    MT_GET_USER_IDENTITY_RES = 5007,
    MT_ROOM_ENTER_ROOM_REQ = 5008,
    MT_ROOM_ENTER_ROOM_RES = 5009,
    MT_LEAVE_ROOM_PENDING_REQ = 5010,
    MT_LEAVE_ROOM_PENDING_RES = 5011,
    MT_LEAVE_ROOM_COMPLETE_REQ = 5012,
    MT_LEAVE_ROOM_COMPLETE_RES = 5013,
    MT_ROOM_UPDATE_ROOMINFO_REQ = 5014,
    MT_ROOM_UPDATE_ROOMINFO_RES = 5015,
    MT_ROOMGATE_UPDATE_USERINFO_REQ = 5016,
    MT_ROOMGATE_UPDATE_USERINFO_RES = 5017,
    MT_ROOM_UPDATE_ROOM_ONLINE_COUNT_REQ = 5018,
    MT_ROOM_UPDATE_ROOM_ONLINE_COUNT_RES = 5019
  };
};

extern const std::map<int, const char*> _MessageType_VALUES_TO_NAMES;

typedef struct _UserLoginReq__isset {
  _UserLoginReq__isset() : user_id(false), user_name(false), session_id(false) {}
  bool user_id;
  bool user_name;
  bool session_id;
} _UserLoginReq__isset;

class UserLoginReq {
 public:

  static const char* ascii_fingerprint; // = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};

  UserLoginReq() : user_id(0), user_name(), session_id() {
  }

  virtual ~UserLoginReq() throw() {}

  int32_t user_id;
  std::string user_name;
  std::string session_id;

  _UserLoginReq__isset __isset;

  void __set_user_id(const int32_t val) {
    user_id = val;
  }

  void __set_user_name(const std::string& val) {
    user_name = val;
  }

  void __set_session_id(const std::string& val) {
    session_id = val;
  }

  bool operator == (const UserLoginReq & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(user_name == rhs.user_name))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const UserLoginReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserLoginReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UserLoginReq &a, UserLoginReq &b);

typedef struct _LoginCheckReq__isset {
  _LoginCheckReq__isset() : user_name(false), check_sum(false), client_mac(false), client_ip(false) {}
  bool user_name;
  bool check_sum;
  bool client_mac;
  bool client_ip;
} _LoginCheckReq__isset;

class LoginCheckReq {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

  LoginCheckReq() : user_name(), check_sum(), client_mac(), client_ip() {
  }

  virtual ~LoginCheckReq() throw() {}

  std::string user_name;
  std::string check_sum;
  std::string client_mac;
  std::string client_ip;

  _LoginCheckReq__isset __isset;

  void __set_user_name(const std::string& val) {
    user_name = val;
  }

  void __set_check_sum(const std::string& val) {
    check_sum = val;
  }

  void __set_client_mac(const std::string& val) {
    client_mac = val;
  }

  void __set_client_ip(const std::string& val) {
    client_ip = val;
  }

  bool operator == (const LoginCheckReq & rhs) const
  {
    if (!(user_name == rhs.user_name))
      return false;
    if (!(check_sum == rhs.check_sum))
      return false;
    if (!(client_mac == rhs.client_mac))
      return false;
    if (!(client_ip == rhs.client_ip))
      return false;
    return true;
  }
  bool operator != (const LoginCheckReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoginCheckReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LoginCheckReq &a, LoginCheckReq &b);

typedef struct _LoginCheckRes__isset {
  _LoginCheckRes__isset() : error_code(false), error_text(false) {}
  bool error_code;
  bool error_text;
} _LoginCheckRes__isset;

class LoginCheckRes {
 public:

  static const char* ascii_fingerprint; // = "15896F1A4438B1ECBB80CEA66AD0C4C5";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x89,0x6F,0x1A,0x44,0x38,0xB1,0xEC,0xBB,0x80,0xCE,0xA6,0x6A,0xD0,0xC4,0xC5};

  LoginCheckRes() : error_code(0), error_text() {
  }

  virtual ~LoginCheckRes() throw() {}

  int16_t error_code;
  std::string error_text;

  _LoginCheckRes__isset __isset;

  void __set_error_code(const int16_t val) {
    error_code = val;
  }

  void __set_error_text(const std::string& val) {
    error_text = val;
  }

  bool operator == (const LoginCheckRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    return true;
  }
  bool operator != (const LoginCheckRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoginCheckRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LoginCheckRes &a, LoginCheckRes &b);

typedef struct _LoginGetUserInfoReq__isset {
  _LoginGetUserInfoReq__isset() : user_name(false) {}
  bool user_name;
} _LoginGetUserInfoReq__isset;

class LoginGetUserInfoReq {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  LoginGetUserInfoReq() : user_name() {
  }

  virtual ~LoginGetUserInfoReq() throw() {}

  std::string user_name;

  _LoginGetUserInfoReq__isset __isset;

  void __set_user_name(const std::string& val) {
    user_name = val;
  }

  bool operator == (const LoginGetUserInfoReq & rhs) const
  {
    if (!(user_name == rhs.user_name))
      return false;
    return true;
  }
  bool operator != (const LoginGetUserInfoReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoginGetUserInfoReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LoginGetUserInfoReq &a, LoginGetUserInfoReq &b);

typedef struct _UserInfo__isset {
  _UserInfo__isset() : user_id(false), user_name(false), password(false), email(false), nick_name(false), avatar_url(false), birthdate(false), base_role_id(false), gender(false), chinese_zodiac(false), zodiac(false), blood_type(false), interest(false), character(false), sign_name(false), chest(false), waist(false), hip(false), address(false) {}
  bool user_id;
  bool user_name;
  bool password;
  bool email;
  bool nick_name;
  bool avatar_url;
  bool birthdate;
  bool base_role_id;
  bool gender;
  bool chinese_zodiac;
  bool zodiac;
  bool blood_type;
  bool interest;
  bool character;
  bool sign_name;
  bool chest;
  bool waist;
  bool hip;
  bool address;
} _UserInfo__isset;

class UserInfo {
 public:

  static const char* ascii_fingerprint; // = "BCCB316343B620361CE3EA74C448F376";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0xCB,0x31,0x63,0x43,0xB6,0x20,0x36,0x1C,0xE3,0xEA,0x74,0xC4,0x48,0xF3,0x76};

  UserInfo() : user_id(0), user_name(), password(), email(), nick_name(), avatar_url(), birthdate(), base_role_id(0), gender(0), chinese_zodiac(), zodiac(), blood_type(), interest(), character(), sign_name(), chest(0), waist(0), hip(0), address() {
  }

  virtual ~UserInfo() throw() {}

  int32_t user_id;
  std::string user_name;
  std::string password;
  std::string email;
  std::string nick_name;
  std::string avatar_url;
  std::string birthdate;
  int16_t base_role_id;
  int8_t gender;
  std::string chinese_zodiac;
  std::string zodiac;
  std::string blood_type;
  std::string interest;
  std::string character;
  std::string sign_name;
  int16_t chest;
  int16_t waist;
  int16_t hip;
  std::string address;

  _UserInfo__isset __isset;

  void __set_user_id(const int32_t val) {
    user_id = val;
  }

  void __set_user_name(const std::string& val) {
    user_name = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  void __set_email(const std::string& val) {
    email = val;
  }

  void __set_nick_name(const std::string& val) {
    nick_name = val;
  }

  void __set_avatar_url(const std::string& val) {
    avatar_url = val;
  }

  void __set_birthdate(const std::string& val) {
    birthdate = val;
  }

  void __set_base_role_id(const int16_t val) {
    base_role_id = val;
  }

  void __set_gender(const int8_t val) {
    gender = val;
  }

  void __set_chinese_zodiac(const std::string& val) {
    chinese_zodiac = val;
  }

  void __set_zodiac(const std::string& val) {
    zodiac = val;
  }

  void __set_blood_type(const std::string& val) {
    blood_type = val;
  }

  void __set_interest(const std::string& val) {
    interest = val;
  }

  void __set_character(const std::string& val) {
    character = val;
  }

  void __set_sign_name(const std::string& val) {
    sign_name = val;
  }

  void __set_chest(const int16_t val) {
    chest = val;
  }

  void __set_waist(const int16_t val) {
    waist = val;
  }

  void __set_hip(const int16_t val) {
    hip = val;
  }

  void __set_address(const std::string& val) {
    address = val;
  }

  bool operator == (const UserInfo & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(user_name == rhs.user_name))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(nick_name == rhs.nick_name))
      return false;
    if (!(avatar_url == rhs.avatar_url))
      return false;
    if (!(birthdate == rhs.birthdate))
      return false;
    if (!(base_role_id == rhs.base_role_id))
      return false;
    if (!(gender == rhs.gender))
      return false;
    if (!(chinese_zodiac == rhs.chinese_zodiac))
      return false;
    if (!(zodiac == rhs.zodiac))
      return false;
    if (!(blood_type == rhs.blood_type))
      return false;
    if (!(interest == rhs.interest))
      return false;
    if (!(character == rhs.character))
      return false;
    if (!(sign_name == rhs.sign_name))
      return false;
    if (!(chest == rhs.chest))
      return false;
    if (!(waist == rhs.waist))
      return false;
    if (!(hip == rhs.hip))
      return false;
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const UserInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UserInfo &a, UserInfo &b);

typedef struct _LoginGetUserInfoRes__isset {
  _LoginGetUserInfoRes__isset() : error_code(false), error_text(false), user_info(false) {}
  bool error_code;
  bool error_text;
  bool user_info;
} _LoginGetUserInfoRes__isset;

class LoginGetUserInfoRes {
 public:

  static const char* ascii_fingerprint; // = "CA77BE65610F23584A459C2BEDD28A32";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0x77,0xBE,0x65,0x61,0x0F,0x23,0x58,0x4A,0x45,0x9C,0x2B,0xED,0xD2,0x8A,0x32};

  LoginGetUserInfoRes() : error_code(0), error_text() {
  }

  virtual ~LoginGetUserInfoRes() throw() {}

  int16_t error_code;
  std::string error_text;
  UserInfo user_info;

  _LoginGetUserInfoRes__isset __isset;

  void __set_error_code(const int16_t val) {
    error_code = val;
  }

  void __set_error_text(const std::string& val) {
    error_text = val;
  }

  void __set_user_info(const UserInfo& val) {
    user_info = val;
  }

  bool operator == (const LoginGetUserInfoRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    if (!(user_info == rhs.user_info))
      return false;
    return true;
  }
  bool operator != (const LoginGetUserInfoRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoginGetUserInfoRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LoginGetUserInfoRes &a, LoginGetUserInfoRes &b);

typedef struct _RoomAddMemberReq__isset {
  _RoomAddMemberReq__isset() : user_id(false) {}
  bool user_id;
} _RoomAddMemberReq__isset;

class RoomAddMemberReq {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  RoomAddMemberReq() : user_id(0) {
  }

  virtual ~RoomAddMemberReq() throw() {}

  int32_t user_id;

  _RoomAddMemberReq__isset __isset;

  void __set_user_id(const int32_t val) {
    user_id = val;
  }

  bool operator == (const RoomAddMemberReq & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    return true;
  }
  bool operator != (const RoomAddMemberReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RoomAddMemberReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RoomAddMemberReq &a, RoomAddMemberReq &b);

typedef struct _RoomRemoveMemberReq__isset {
  _RoomRemoveMemberReq__isset() : user_id(false) {}
  bool user_id;
} _RoomRemoveMemberReq__isset;

class RoomRemoveMemberReq {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  RoomRemoveMemberReq() : user_id(0) {
  }

  virtual ~RoomRemoveMemberReq() throw() {}

  int32_t user_id;

  _RoomRemoveMemberReq__isset __isset;

  void __set_user_id(const int32_t val) {
    user_id = val;
  }

  bool operator == (const RoomRemoveMemberReq & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    return true;
  }
  bool operator != (const RoomRemoveMemberReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RoomRemoveMemberReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RoomRemoveMemberReq &a, RoomRemoveMemberReq &b);

typedef struct _RoomGateUpdateUserinfoReq__isset {
  _RoomGateUpdateUserinfoReq__isset() : nick_name(false), avatar_url(false), decolor(false), sign_name(false), gender(false), birthdate(false), chinese_zodiac(false), zodiac(false), blood_type(false), interest(false), character(false), chest(false), waist(false), hip(false), address(false) {}
  bool nick_name;
  bool avatar_url;
  bool decolor;
  bool sign_name;
  bool gender;
  bool birthdate;
  bool chinese_zodiac;
  bool zodiac;
  bool blood_type;
  bool interest;
  bool character;
  bool chest;
  bool waist;
  bool hip;
  bool address;
} _RoomGateUpdateUserinfoReq__isset;

class RoomGateUpdateUserinfoReq {
 public:

  static const char* ascii_fingerprint; // = "1168920D1FF018131AEE724B7A3AAE84";
  static const uint8_t binary_fingerprint[16]; // = {0x11,0x68,0x92,0x0D,0x1F,0xF0,0x18,0x13,0x1A,0xEE,0x72,0x4B,0x7A,0x3A,0xAE,0x84};

  RoomGateUpdateUserinfoReq() : nick_name(), avatar_url(), decolor(0), sign_name(), gender(0), birthdate(), chinese_zodiac(), zodiac(), blood_type(), interest(), character(), chest(0), waist(0), hip(0), address() {
  }

  virtual ~RoomGateUpdateUserinfoReq() throw() {}

  std::string nick_name;
  std::string avatar_url;
  int32_t decolor;
  std::string sign_name;
  int8_t gender;
  std::string birthdate;
  std::string chinese_zodiac;
  std::string zodiac;
  std::string blood_type;
  std::string interest;
  std::string character;
  int16_t chest;
  int16_t waist;
  int16_t hip;
  std::string address;

  _RoomGateUpdateUserinfoReq__isset __isset;

  void __set_nick_name(const std::string& val) {
    nick_name = val;
  }

  void __set_avatar_url(const std::string& val) {
    avatar_url = val;
  }

  void __set_decolor(const int32_t val) {
    decolor = val;
  }

  void __set_sign_name(const std::string& val) {
    sign_name = val;
  }

  void __set_gender(const int8_t val) {
    gender = val;
  }

  void __set_birthdate(const std::string& val) {
    birthdate = val;
  }

  void __set_chinese_zodiac(const std::string& val) {
    chinese_zodiac = val;
  }

  void __set_zodiac(const std::string& val) {
    zodiac = val;
  }

  void __set_blood_type(const std::string& val) {
    blood_type = val;
  }

  void __set_interest(const std::string& val) {
    interest = val;
  }

  void __set_character(const std::string& val) {
    character = val;
  }

  void __set_chest(const int16_t val) {
    chest = val;
  }

  void __set_waist(const int16_t val) {
    waist = val;
  }

  void __set_hip(const int16_t val) {
    hip = val;
  }

  void __set_address(const std::string& val) {
    address = val;
  }

  bool operator == (const RoomGateUpdateUserinfoReq & rhs) const
  {
    if (!(nick_name == rhs.nick_name))
      return false;
    if (!(avatar_url == rhs.avatar_url))
      return false;
    if (!(decolor == rhs.decolor))
      return false;
    if (!(sign_name == rhs.sign_name))
      return false;
    if (!(gender == rhs.gender))
      return false;
    if (!(birthdate == rhs.birthdate))
      return false;
    if (!(chinese_zodiac == rhs.chinese_zodiac))
      return false;
    if (!(zodiac == rhs.zodiac))
      return false;
    if (!(blood_type == rhs.blood_type))
      return false;
    if (!(interest == rhs.interest))
      return false;
    if (!(character == rhs.character))
      return false;
    if (!(chest == rhs.chest))
      return false;
    if (!(waist == rhs.waist))
      return false;
    if (!(hip == rhs.hip))
      return false;
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const RoomGateUpdateUserinfoReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RoomGateUpdateUserinfoReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RoomGateUpdateUserinfoReq &a, RoomGateUpdateUserinfoReq &b);

typedef struct _GetUserIdentityReq__isset {
  _GetUserIdentityReq__isset() : user_id(false) {}
  bool user_id;
} _GetUserIdentityReq__isset;

class GetUserIdentityReq {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  GetUserIdentityReq() : user_id(0) {
  }

  virtual ~GetUserIdentityReq() throw() {}

  int32_t user_id;

  _GetUserIdentityReq__isset __isset;

  void __set_user_id(const int32_t val) {
    user_id = val;
  }

  bool operator == (const GetUserIdentityReq & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    return true;
  }
  bool operator != (const GetUserIdentityReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetUserIdentityReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetUserIdentityReq &a, GetUserIdentityReq &b);

typedef struct _GetUserIdentityRes__isset {
  _GetUserIdentityRes__isset() : error_code(false), error_text(false), user_key(false), session_id(false) {}
  bool error_code;
  bool error_text;
  bool user_key;
  bool session_id;
} _GetUserIdentityRes__isset;

class GetUserIdentityRes {
 public:

  static const char* ascii_fingerprint; // = "9633349FCC7151C040D61CE4A7C5FCCA";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x33,0x34,0x9F,0xCC,0x71,0x51,0xC0,0x40,0xD6,0x1C,0xE4,0xA7,0xC5,0xFC,0xCA};

  GetUserIdentityRes() : error_code(0), error_text(), user_key(), session_id() {
  }

  virtual ~GetUserIdentityRes() throw() {}

  int16_t error_code;
  std::string error_text;
  std::string user_key;
  std::string session_id;

  _GetUserIdentityRes__isset __isset;

  void __set_error_code(const int16_t val) {
    error_code = val;
  }

  void __set_error_text(const std::string& val) {
    error_text = val;
  }

  void __set_user_key(const std::string& val) {
    user_key = val;
  }

  void __set_session_id(const std::string& val) {
    session_id = val;
  }

  bool operator == (const GetUserIdentityRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    if (!(user_key == rhs.user_key))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const GetUserIdentityRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetUserIdentityRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetUserIdentityRes &a, GetUserIdentityRes &b);

}} // namespace

#endif
