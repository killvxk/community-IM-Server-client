/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "common_types.h"

#include <algorithm>

namespace community { namespace common {

int _kMessageTypeValues[] = {
  MessageType::MT_HELLO_REQ,
  MessageType::MT_HELLO_RES,
  MessageType::MT_HELLO_NOTIFY,
  MessageType::MT_KEEPALIVE_REQ,
  MessageType::MT_KEEPALIVE_RES
};
const char* _kMessageTypeNames[] = {
  "MT_HELLO_REQ",
  "MT_HELLO_RES",
  "MT_HELLO_NOTIFY",
  "MT_KEEPALIVE_REQ",
  "MT_KEEPALIVE_RES"
};
const std::map<int, const char*> _MessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kMessageTypeValues, _kMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kErrorCodeValues[] = {
  ErrorCode::OK,
  ErrorCode::TICKET_INVALID,
  ErrorCode::LOGNAME_EXIST,
  ErrorCode::LOGNAME_NOT_EXIST,
  ErrorCode::PASSWORD_ERROR,
  ErrorCode::USERID_INVALID,
  ErrorCode::PASS_EXPIRYDATE,
  ErrorCode::ACCOUNT_LOCKED,
  ErrorCode::INVALID_ACCOUNT,
  ErrorCode::CLIENT_VERSION_INVALID,
  ErrorCode::ACCOUNT_ACCTIVED,
  ErrorCode::VERIFYCODE_VERIFIED,
  ErrorCode::USER_IN_BLACKLIST,
  ErrorCode::LOGIN_CONNECT_ERROR,
  ErrorCode::ROOMGATE_CONNECT_ERROR,
  ErrorCode::NICKNAME_DUPLICATE,
  ErrorCode::ROOM_UNKNOWN,
  ErrorCode::ROOM_STATUS_NO_STARTUP,
  ErrorCode::ROOM_STATUS_CLOSE,
  ErrorCode::ROOM_STATUS_LOCKED,
  ErrorCode::ROOM_USER_TICKET_INVALID,
  ErrorCode::ROOM_USER_ID_INVALID,
  ErrorCode::ROOM_USER_NO_AUTHORITY,
  ErrorCode::ROOM_USER_MONEY_LESS,
  ErrorCode::ROOM_USER_KICK_OUT,
  ErrorCode::ROOM_USER_OTHER_LOCAL_LOGIN,
  ErrorCode::ROOM_USER_COUNT_MAX,
  ErrorCode::ROOM_NEED_PASSWORD,
  ErrorCode::ROOM_PASSORD_ERROR,
  ErrorCode::ROOM_TO_USERID_INVALID,
  ErrorCode::REQUEST_ERROR,
  ErrorCode::REQUEST_TIMEOUT,
  ErrorCode::DB_CONNECT_ERROR,
  ErrorCode::DB_OPERATION_EXCEPTION,
  ErrorCode::SYSTEM_BUSY,
  ErrorCode::UNKOWN_ERROR
};
const char* _kErrorCodeNames[] = {
  "OK",
  "TICKET_INVALID",
  "LOGNAME_EXIST",
  "LOGNAME_NOT_EXIST",
  "PASSWORD_ERROR",
  "USERID_INVALID",
  "PASS_EXPIRYDATE",
  "ACCOUNT_LOCKED",
  "INVALID_ACCOUNT",
  "CLIENT_VERSION_INVALID",
  "ACCOUNT_ACCTIVED",
  "VERIFYCODE_VERIFIED",
  "USER_IN_BLACKLIST",
  "LOGIN_CONNECT_ERROR",
  "ROOMGATE_CONNECT_ERROR",
  "NICKNAME_DUPLICATE",
  "ROOM_UNKNOWN",
  "ROOM_STATUS_NO_STARTUP",
  "ROOM_STATUS_CLOSE",
  "ROOM_STATUS_LOCKED",
  "ROOM_USER_TICKET_INVALID",
  "ROOM_USER_ID_INVALID",
  "ROOM_USER_NO_AUTHORITY",
  "ROOM_USER_MONEY_LESS",
  "ROOM_USER_KICK_OUT",
  "ROOM_USER_OTHER_LOCAL_LOGIN",
  "ROOM_USER_COUNT_MAX",
  "ROOM_NEED_PASSWORD",
  "ROOM_PASSORD_ERROR",
  "ROOM_TO_USERID_INVALID",
  "REQUEST_ERROR",
  "REQUEST_TIMEOUT",
  "DB_CONNECT_ERROR",
  "DB_OPERATION_EXCEPTION",
  "SYSTEM_BUSY",
  "UNKOWN_ERROR"
};
const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(36, _kErrorCodeValues, _kErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* ServiceAddr::ascii_fingerprint = "3628A1EB414F66736E1B2A082E79475F";
const uint8_t ServiceAddr::binary_fingerprint[16] = {0x36,0x28,0xA1,0xEB,0x41,0x4F,0x66,0x73,0x6E,0x1B,0x2A,0x08,0x2E,0x79,0x47,0x5F};

uint32_t ServiceAddr::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceAddr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceAddr");

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceAddr &a, ServiceAddr &b) {
  using ::std::swap;
  swap(a.ip, b.ip);
  swap(a.port, b.port);
  swap(a.__isset, b.__isset);
}

const char* ServiceInfo::ascii_fingerprint = "94174AFF3CED2B50B7EBD6E1A547A9B4";
const uint8_t ServiceInfo::binary_fingerprint[16] = {0x94,0x17,0x4A,0xFF,0x3C,0xED,0x2B,0x50,0xB7,0xEB,0xD6,0xE1,0xA5,0x47,0xA9,0xB4};

uint32_t ServiceInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->service_id);
          this->__isset.service_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->service_name);
          this->__isset.service_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->service_weight);
          this->__isset.service_weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->service_addr.read(iprot);
          this->__isset.service_addr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceInfo");

  xfer += oprot->writeFieldBegin("service_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->service_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("service_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->service_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("service_weight", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->service_weight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("service_addr", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->service_addr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceInfo &a, ServiceInfo &b) {
  using ::std::swap;
  swap(a.service_id, b.service_id);
  swap(a.service_name, b.service_name);
  swap(a.service_weight, b.service_weight);
  swap(a.service_addr, b.service_addr);
  swap(a.__isset, b.__isset);
}

const char* HelloReq::ascii_fingerprint = "1F8AC3592E0D846CE58BAC5A6B688042";
const uint8_t HelloReq::binary_fingerprint[16] = {0x1F,0x8A,0xC3,0x59,0x2E,0x0D,0x84,0x6C,0xE5,0x8B,0xAC,0x5A,0x6B,0x68,0x80,0x42};

uint32_t HelloReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->service_info.read(iprot);
          this->__isset.service_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HelloReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HelloReq");

  xfer += oprot->writeFieldBegin("service_info", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->service_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HelloReq &a, HelloReq &b) {
  using ::std::swap;
  swap(a.service_info, b.service_info);
  swap(a.__isset, b.__isset);
}

const char* HelloNotify::ascii_fingerprint = "2876446EDD1CDFE933A3B52568B4C577";
const uint8_t HelloNotify::binary_fingerprint[16] = {0x28,0x76,0x44,0x6E,0xDD,0x1C,0xDF,0xE9,0x33,0xA3,0xB5,0x25,0x68,0xB4,0xC5,0x77};

uint32_t HelloNotify::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_text);
          this->__isset.error_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->service_name);
          this->__isset.service_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->service_id);
          this->__isset.service_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->server_random);
          this->__isset.server_random = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->server_time);
          this->__isset.server_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HelloNotify::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HelloNotify");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("service_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->service_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("service_id", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->service_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("server_random", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->server_random);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("server_time", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->server_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HelloNotify &a, HelloNotify &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_text, b.error_text);
  swap(a.service_name, b.service_name);
  swap(a.service_id, b.service_id);
  swap(a.server_random, b.server_random);
  swap(a.server_time, b.server_time);
  swap(a.__isset, b.__isset);
}

const char* SessionTicket::ascii_fingerprint = "4C747215BAE6A75D83DE6591082EBCCA";
const uint8_t SessionTicket::binary_fingerprint[16] = {0x4C,0x74,0x72,0x15,0xBA,0xE6,0xA7,0x5D,0x83,0xDE,0x65,0x91,0x08,0x2E,0xBC,0xCA};

uint32_t SessionTicket::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_name);
          this->__isset.user_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nick_name);
          this->__isset.nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->client_ip);
          this->__isset.client_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->client_mac);
          this->__isset.client_mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->client_version);
          this->__isset.client_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->app_id);
          this->__isset.app_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->session_key);
          this->__isset.session_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->create_time);
          this->__isset.create_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->end_time);
          this->__isset.end_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SessionTicket::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SessionTicket");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->user_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nick_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_ip", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->client_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_mac", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->client_mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_version", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->client_version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("app_id", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->app_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_key", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->session_key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_time", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->create_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("end_time", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->end_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SessionTicket &a, SessionTicket &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.user_name, b.user_name);
  swap(a.email, b.email);
  swap(a.nick_name, b.nick_name);
  swap(a.client_ip, b.client_ip);
  swap(a.client_mac, b.client_mac);
  swap(a.client_version, b.client_version);
  swap(a.app_id, b.app_id);
  swap(a.session_id, b.session_id);
  swap(a.session_key, b.session_key);
  swap(a.create_time, b.create_time);
  swap(a.end_time, b.end_time);
  swap(a.__isset, b.__isset);
}

const char* CommonNull::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t CommonNull::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t CommonNull::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CommonNull::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CommonNull");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommonNull &a, CommonNull &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* CommonRes::ascii_fingerprint = "15896F1A4438B1ECBB80CEA66AD0C4C5";
const uint8_t CommonRes::binary_fingerprint[16] = {0x15,0x89,0x6F,0x1A,0x44,0x38,0xB1,0xEC,0xBB,0x80,0xCE,0xA6,0x6A,0xD0,0xC4,0xC5};

uint32_t CommonRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_text);
          this->__isset.error_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CommonRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CommonRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommonRes &a, CommonRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_text, b.error_text);
  swap(a.__isset, b.__isset);
}

const char* KeepAliveReq::ascii_fingerprint = "E5DA6AD560D49372EB1054016CE7C84D";
const uint8_t KeepAliveReq::binary_fingerprint[16] = {0xE5,0xDA,0x6A,0xD5,0x60,0xD4,0x93,0x72,0xEB,0x10,0x54,0x01,0x6C,0xE7,0xC8,0x4D};

uint32_t KeepAliveReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->req_id);
          this->__isset.req_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->current_time_req);
          this->__isset.current_time_req = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->network_status_level);
          this->__isset.network_status_level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t KeepAliveReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("KeepAliveReq");

  xfer += oprot->writeFieldBegin("req_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->req_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("current_time_req", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->current_time_req);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("network_status_level", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->network_status_level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(KeepAliveReq &a, KeepAliveReq &b) {
  using ::std::swap;
  swap(a.req_id, b.req_id);
  swap(a.current_time_req, b.current_time_req);
  swap(a.network_status_level, b.network_status_level);
  swap(a.__isset, b.__isset);
}

const char* KeepAliveRes::ascii_fingerprint = "EA8B51362DF46E243B1C2354930D6C5C";
const uint8_t KeepAliveRes::binary_fingerprint[16] = {0xEA,0x8B,0x51,0x36,0x2D,0xF4,0x6E,0x24,0x3B,0x1C,0x23,0x54,0x93,0x0D,0x6C,0x5C};

uint32_t KeepAliveRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_text);
          this->__isset.error_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->req_id);
          this->__isset.req_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->current_time_req);
          this->__isset.current_time_req = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->current_time_res);
          this->__isset.current_time_res = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t KeepAliveRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("KeepAliveRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("req_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->req_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("current_time_req", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->current_time_req);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("current_time_res", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->current_time_res);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(KeepAliveRes &a, KeepAliveRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_text, b.error_text);
  swap(a.req_id, b.req_id);
  swap(a.current_time_req, b.current_time_req);
  swap(a.current_time_res, b.current_time_res);
  swap(a.__isset, b.__isset);
}

const char* UserInfo::ascii_fingerprint = "BCCB316343B620361CE3EA74C448F376";
const uint8_t UserInfo::binary_fingerprint[16] = {0xBC,0xCB,0x31,0x63,0x43,0xB6,0x20,0x36,0x1C,0xE3,0xEA,0x74,0xC4,0x48,0xF3,0x76};

uint32_t UserInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_name);
          this->__isset.user_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nick_name);
          this->__isset.nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->avatar_url);
          this->__isset.avatar_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->birthdate);
          this->__isset.birthdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->base_role_id);
          this->__isset.base_role_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->gender);
          this->__isset.gender = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chinese_zodiac);
          this->__isset.chinese_zodiac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->zodiac);
          this->__isset.zodiac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->blood_type);
          this->__isset.blood_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->interest);
          this->__isset.interest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->character);
          this->__isset.character = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sign_name);
          this->__isset.sign_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chest);
          this->__isset.chest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->waist);
          this->__isset.waist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->hip);
          this->__isset.hip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->address);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UserInfo");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->user_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nick_name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avatar_url", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->avatar_url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("birthdate", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->birthdate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("base_role_id", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->base_role_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gender", ::apache::thrift::protocol::T_BYTE, 9);
  xfer += oprot->writeByte(this->gender);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chinese_zodiac", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->chinese_zodiac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zodiac", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->zodiac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("blood_type", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->blood_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("interest", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->interest);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("character", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->character);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sign_name", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->sign_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chest", ::apache::thrift::protocol::T_I16, 16);
  xfer += oprot->writeI16(this->chest);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("waist", ::apache::thrift::protocol::T_I16, 17);
  xfer += oprot->writeI16(this->waist);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hip", ::apache::thrift::protocol::T_I16, 18);
  xfer += oprot->writeI16(this->hip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRING, 19);
  xfer += oprot->writeString(this->address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserInfo &a, UserInfo &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.user_name, b.user_name);
  swap(a.password, b.password);
  swap(a.email, b.email);
  swap(a.nick_name, b.nick_name);
  swap(a.avatar_url, b.avatar_url);
  swap(a.birthdate, b.birthdate);
  swap(a.base_role_id, b.base_role_id);
  swap(a.gender, b.gender);
  swap(a.chinese_zodiac, b.chinese_zodiac);
  swap(a.zodiac, b.zodiac);
  swap(a.blood_type, b.blood_type);
  swap(a.interest, b.interest);
  swap(a.character, b.character);
  swap(a.sign_name, b.sign_name);
  swap(a.chest, b.chest);
  swap(a.waist, b.waist);
  swap(a.hip, b.hip);
  swap(a.address, b.address);
  swap(a.__isset, b.__isset);
}

}} // namespace
