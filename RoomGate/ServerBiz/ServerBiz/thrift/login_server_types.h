/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef login_server_TYPES_H
#define login_server_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "common_types.h"


namespace community { namespace login_server {

struct MessageType {
  enum type {
    MT_CLIENT_PASSWORD_LOGIN_REQ = 500,
    MT_CLIENT_LOGIN_RES = 501,
    MT_CLIENT_LOGOUT_REQ = 502,
    MT_CLIENT_LOGOUT_RES = 503,
    MT_UPDATE_RESOURCE_RES = 504
  };
};

extern const std::map<int, const char*> _MessageType_VALUES_TO_NAMES;

typedef struct _ClientPasswordLoginReq__isset {
  _ClientPasswordLoginReq__isset() : user_id(false), client_random(false), client_mac(false), client_version(false), check_sum(false) {}
  bool user_id;
  bool client_random;
  bool client_mac;
  bool client_version;
  bool check_sum;
} _ClientPasswordLoginReq__isset;

class ClientPasswordLoginReq {
 public:

  static const char* ascii_fingerprint; // = "16A94A80CDF00C1AAB16732DEBC5130D";
  static const uint8_t binary_fingerprint[16]; // = {0x16,0xA9,0x4A,0x80,0xCD,0xF0,0x0C,0x1A,0xAB,0x16,0x73,0x2D,0xEB,0xC5,0x13,0x0D};

  ClientPasswordLoginReq() : user_id(0), client_random(0), client_mac(), client_version(), check_sum() {
  }

  virtual ~ClientPasswordLoginReq() throw() {}

  int32_t user_id;
  int64_t client_random;
  std::string client_mac;
  std::string client_version;
  std::string check_sum;

  _ClientPasswordLoginReq__isset __isset;

  void __set_user_id(const int32_t val) {
    user_id = val;
  }

  void __set_client_random(const int64_t val) {
    client_random = val;
  }

  void __set_client_mac(const std::string& val) {
    client_mac = val;
  }

  void __set_client_version(const std::string& val) {
    client_version = val;
  }

  void __set_check_sum(const std::string& val) {
    check_sum = val;
  }

  bool operator == (const ClientPasswordLoginReq & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(client_random == rhs.client_random))
      return false;
    if (!(client_mac == rhs.client_mac))
      return false;
    if (!(client_version == rhs.client_version))
      return false;
    if (!(check_sum == rhs.check_sum))
      return false;
    return true;
  }
  bool operator != (const ClientPasswordLoginReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientPasswordLoginReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ClientPasswordLoginReq &a, ClientPasswordLoginReq &b);

typedef struct _ClientPasswordLoginReqChecksum__isset {
  _ClientPasswordLoginReqChecksum__isset() : user_id(false), password(false), client_random(false), server_random(false) {}
  bool user_id;
  bool password;
  bool client_random;
  bool server_random;
} _ClientPasswordLoginReqChecksum__isset;

class ClientPasswordLoginReqChecksum {
 public:

  static const char* ascii_fingerprint; // = "402AD47659A8C66675C5D0A8EF2484F9";
  static const uint8_t binary_fingerprint[16]; // = {0x40,0x2A,0xD4,0x76,0x59,0xA8,0xC6,0x66,0x75,0xC5,0xD0,0xA8,0xEF,0x24,0x84,0xF9};

  ClientPasswordLoginReqChecksum() : user_id(0), password(), client_random(0), server_random(0) {
  }

  virtual ~ClientPasswordLoginReqChecksum() throw() {}

  int32_t user_id;
  std::string password;
  int64_t client_random;
  int64_t server_random;

  _ClientPasswordLoginReqChecksum__isset __isset;

  void __set_user_id(const int32_t val) {
    user_id = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  void __set_client_random(const int64_t val) {
    client_random = val;
  }

  void __set_server_random(const int64_t val) {
    server_random = val;
  }

  bool operator == (const ClientPasswordLoginReqChecksum & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(client_random == rhs.client_random))
      return false;
    if (!(server_random == rhs.server_random))
      return false;
    return true;
  }
  bool operator != (const ClientPasswordLoginReqChecksum &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientPasswordLoginReqChecksum & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ClientPasswordLoginReqChecksum &a, ClientPasswordLoginReqChecksum &b);

typedef struct _ClientTicketLoginReqChecksum__isset {
  _ClientTicketLoginReqChecksum__isset() : user_id(false), session_ticket(false), client_random(false), server_random(false) {}
  bool user_id;
  bool session_ticket;
  bool client_random;
  bool server_random;
} _ClientTicketLoginReqChecksum__isset;

class ClientTicketLoginReqChecksum {
 public:

  static const char* ascii_fingerprint; // = "402AD47659A8C66675C5D0A8EF2484F9";
  static const uint8_t binary_fingerprint[16]; // = {0x40,0x2A,0xD4,0x76,0x59,0xA8,0xC6,0x66,0x75,0xC5,0xD0,0xA8,0xEF,0x24,0x84,0xF9};

  ClientTicketLoginReqChecksum() : user_id(0), session_ticket(), client_random(0), server_random(0) {
  }

  virtual ~ClientTicketLoginReqChecksum() throw() {}

  int32_t user_id;
  std::string session_ticket;
  int64_t client_random;
  int64_t server_random;

  _ClientTicketLoginReqChecksum__isset __isset;

  void __set_user_id(const int32_t val) {
    user_id = val;
  }

  void __set_session_ticket(const std::string& val) {
    session_ticket = val;
  }

  void __set_client_random(const int64_t val) {
    client_random = val;
  }

  void __set_server_random(const int64_t val) {
    server_random = val;
  }

  bool operator == (const ClientTicketLoginReqChecksum & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(session_ticket == rhs.session_ticket))
      return false;
    if (!(client_random == rhs.client_random))
      return false;
    if (!(server_random == rhs.server_random))
      return false;
    return true;
  }
  bool operator != (const ClientTicketLoginReqChecksum &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientTicketLoginReqChecksum & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ClientTicketLoginReqChecksum &a, ClientTicketLoginReqChecksum &b);

typedef struct _ClientLoginRes__isset {
  _ClientLoginRes__isset() : error_code(false), error_text(false), user_info(false), session_ticket(false), room_gate_info(false) {}
  bool error_code;
  bool error_text;
  bool user_info;
  bool session_ticket;
  bool room_gate_info;
} _ClientLoginRes__isset;

class ClientLoginRes {
 public:

  static const char* ascii_fingerprint; // = "B7D287EB4F91A178784A73918FA36C1A";
  static const uint8_t binary_fingerprint[16]; // = {0xB7,0xD2,0x87,0xEB,0x4F,0x91,0xA1,0x78,0x78,0x4A,0x73,0x91,0x8F,0xA3,0x6C,0x1A};

  ClientLoginRes() : error_code(0), error_text(), user_info(), session_ticket() {
  }

  virtual ~ClientLoginRes() throw() {}

  int16_t error_code;
  std::string error_text;
  std::string user_info;
  std::string session_ticket;
  std::vector< ::community::common::ServiceInfo>  room_gate_info;

  _ClientLoginRes__isset __isset;

  void __set_error_code(const int16_t val) {
    error_code = val;
  }

  void __set_error_text(const std::string& val) {
    error_text = val;
  }

  void __set_user_info(const std::string& val) {
    user_info = val;
  }

  void __set_session_ticket(const std::string& val) {
    session_ticket = val;
  }

  void __set_room_gate_info(const std::vector< ::community::common::ServiceInfo> & val) {
    room_gate_info = val;
  }

  bool operator == (const ClientLoginRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    if (!(user_info == rhs.user_info))
      return false;
    if (!(session_ticket == rhs.session_ticket))
      return false;
    if (!(room_gate_info == rhs.room_gate_info))
      return false;
    return true;
  }
  bool operator != (const ClientLoginRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientLoginRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ClientLoginRes &a, ClientLoginRes &b);

typedef struct _ClientLoginResUserInfo__isset {
  _ClientLoginResUserInfo__isset() : user_id(false), user_name(false), email(false), nick_name(false), avatar_url(false), client_ip(false) {}
  bool user_id;
  bool user_name;
  bool email;
  bool nick_name;
  bool avatar_url;
  bool client_ip;
} _ClientLoginResUserInfo__isset;

class ClientLoginResUserInfo {
 public:

  static const char* ascii_fingerprint; // = "59BAC27122966B3FA058EFE417BDA97C";
  static const uint8_t binary_fingerprint[16]; // = {0x59,0xBA,0xC2,0x71,0x22,0x96,0x6B,0x3F,0xA0,0x58,0xEF,0xE4,0x17,0xBD,0xA9,0x7C};

  ClientLoginResUserInfo() : user_id(0), user_name(), email(), nick_name(), avatar_url(), client_ip() {
  }

  virtual ~ClientLoginResUserInfo() throw() {}

  int32_t user_id;
  std::string user_name;
  std::string email;
  std::string nick_name;
  std::string avatar_url;
  std::string client_ip;

  _ClientLoginResUserInfo__isset __isset;

  void __set_user_id(const int32_t val) {
    user_id = val;
  }

  void __set_user_name(const std::string& val) {
    user_name = val;
  }

  void __set_email(const std::string& val) {
    email = val;
  }

  void __set_nick_name(const std::string& val) {
    nick_name = val;
  }

  void __set_avatar_url(const std::string& val) {
    avatar_url = val;
  }

  void __set_client_ip(const std::string& val) {
    client_ip = val;
  }

  bool operator == (const ClientLoginResUserInfo & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(user_name == rhs.user_name))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(nick_name == rhs.nick_name))
      return false;
    if (!(avatar_url == rhs.avatar_url))
      return false;
    if (!(client_ip == rhs.client_ip))
      return false;
    return true;
  }
  bool operator != (const ClientLoginResUserInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientLoginResUserInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ClientLoginResUserInfo &a, ClientLoginResUserInfo &b);

typedef struct _LogoutReq__isset {
  _LogoutReq__isset() : user_id(false), session_ticket(false) {}
  bool user_id;
  bool session_ticket;
} _LogoutReq__isset;

class LogoutReq {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  LogoutReq() : user_id(0), session_ticket() {
  }

  virtual ~LogoutReq() throw() {}

  int32_t user_id;
  std::string session_ticket;

  _LogoutReq__isset __isset;

  void __set_user_id(const int32_t val) {
    user_id = val;
  }

  void __set_session_ticket(const std::string& val) {
    session_ticket = val;
  }

  bool operator == (const LogoutReq & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(session_ticket == rhs.session_ticket))
      return false;
    return true;
  }
  bool operator != (const LogoutReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogoutReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LogoutReq &a, LogoutReq &b);

typedef struct _LogoutRes__isset {
  _LogoutRes__isset() : error_code(false), user_id(false) {}
  bool error_code;
  bool user_id;
} _LogoutRes__isset;

class LogoutRes {
 public:

  static const char* ascii_fingerprint; // = "0D0E376BC3AE6606497788AA82F73617";
  static const uint8_t binary_fingerprint[16]; // = {0x0D,0x0E,0x37,0x6B,0xC3,0xAE,0x66,0x06,0x49,0x77,0x88,0xAA,0x82,0xF7,0x36,0x17};

  LogoutRes() : error_code(0), user_id(0) {
  }

  virtual ~LogoutRes() throw() {}

  int16_t error_code;
  int32_t user_id;

  _LogoutRes__isset __isset;

  void __set_error_code(const int16_t val) {
    error_code = val;
  }

  void __set_user_id(const int32_t val) {
    user_id = val;
  }

  bool operator == (const LogoutRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    return true;
  }
  bool operator != (const LogoutRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogoutRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LogoutRes &a, LogoutRes &b);

typedef struct _SessionTicket__isset {
  _SessionTicket__isset() : user_id(false), user_name(false), email(false), nick_name(false), base_role_id(false), client_ip(false), client_mac(false), client_version(false), app_id(false), session_id(false), session_key(false), create_time(false), end_time(false) {}
  bool user_id;
  bool user_name;
  bool email;
  bool nick_name;
  bool base_role_id;
  bool client_ip;
  bool client_mac;
  bool client_version;
  bool app_id;
  bool session_id;
  bool session_key;
  bool create_time;
  bool end_time;
} _SessionTicket__isset;

class SessionTicket {
 public:

  static const char* ascii_fingerprint; // = "AD96F0D9C0BA17FACE6DCDF7A77C552C";
  static const uint8_t binary_fingerprint[16]; // = {0xAD,0x96,0xF0,0xD9,0xC0,0xBA,0x17,0xFA,0xCE,0x6D,0xCD,0xF7,0xA7,0x7C,0x55,0x2C};

  SessionTicket() : user_id(0), user_name(), email(), nick_name(), base_role_id(0), client_ip(), client_mac(), client_version(), app_id(0), session_id(), session_key(), create_time(0), end_time(0) {
  }

  virtual ~SessionTicket() throw() {}

  int32_t user_id;
  std::string user_name;
  std::string email;
  std::string nick_name;
  int16_t base_role_id;
  std::string client_ip;
  std::string client_mac;
  std::string client_version;
  int32_t app_id;
  std::string session_id;
  std::string session_key;
  int64_t create_time;
  int64_t end_time;

  _SessionTicket__isset __isset;

  void __set_user_id(const int32_t val) {
    user_id = val;
  }

  void __set_user_name(const std::string& val) {
    user_name = val;
  }

  void __set_email(const std::string& val) {
    email = val;
  }

  void __set_nick_name(const std::string& val) {
    nick_name = val;
  }

  void __set_base_role_id(const int16_t val) {
    base_role_id = val;
  }

  void __set_client_ip(const std::string& val) {
    client_ip = val;
  }

  void __set_client_mac(const std::string& val) {
    client_mac = val;
  }

  void __set_client_version(const std::string& val) {
    client_version = val;
  }

  void __set_app_id(const int32_t val) {
    app_id = val;
  }

  void __set_session_id(const std::string& val) {
    session_id = val;
  }

  void __set_session_key(const std::string& val) {
    session_key = val;
  }

  void __set_create_time(const int64_t val) {
    create_time = val;
  }

  void __set_end_time(const int64_t val) {
    end_time = val;
  }

  bool operator == (const SessionTicket & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(user_name == rhs.user_name))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(nick_name == rhs.nick_name))
      return false;
    if (!(base_role_id == rhs.base_role_id))
      return false;
    if (!(client_ip == rhs.client_ip))
      return false;
    if (!(client_mac == rhs.client_mac))
      return false;
    if (!(client_version == rhs.client_version))
      return false;
    if (!(app_id == rhs.app_id))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    if (!(session_key == rhs.session_key))
      return false;
    if (!(create_time == rhs.create_time))
      return false;
    if (!(end_time == rhs.end_time))
      return false;
    return true;
  }
  bool operator != (const SessionTicket &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SessionTicket & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SessionTicket &a, SessionTicket &b);

typedef struct _UpdateResourceReq__isset {
  _UpdateResourceReq__isset() : client_version(false), resource_version(false) {}
  bool client_version;
  bool resource_version;
} _UpdateResourceReq__isset;

class UpdateResourceReq {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  UpdateResourceReq() : client_version(), resource_version() {
  }

  virtual ~UpdateResourceReq() throw() {}

  std::string client_version;
  std::string resource_version;

  _UpdateResourceReq__isset __isset;

  void __set_client_version(const std::string& val) {
    client_version = val;
  }

  void __set_resource_version(const std::string& val) {
    resource_version = val;
  }

  bool operator == (const UpdateResourceReq & rhs) const
  {
    if (!(client_version == rhs.client_version))
      return false;
    if (!(resource_version == rhs.resource_version))
      return false;
    return true;
  }
  bool operator != (const UpdateResourceReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateResourceReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UpdateResourceReq &a, UpdateResourceReq &b);

typedef struct _UpdateResourceRes__isset {
  _UpdateResourceRes__isset() : result(false), update_type(false), new_source_version(false), download_url(false), md5_value(false), feature_url(false), file_size(false) {}
  bool result;
  bool update_type;
  bool new_source_version;
  bool download_url;
  bool md5_value;
  bool feature_url;
  bool file_size;
} _UpdateResourceRes__isset;

class UpdateResourceRes {
 public:

  static const char* ascii_fingerprint; // = "F1DAF49F30E6FEDF1015861FA80FE4E6";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0xDA,0xF4,0x9F,0x30,0xE6,0xFE,0xDF,0x10,0x15,0x86,0x1F,0xA8,0x0F,0xE4,0xE6};

  UpdateResourceRes() : result(0), update_type(0), new_source_version(), download_url(), md5_value(), feature_url(), file_size(0) {
  }

  virtual ~UpdateResourceRes() throw() {}

  int16_t result;
  int16_t update_type;
  std::string new_source_version;
  std::string download_url;
  std::string md5_value;
  std::string feature_url;
  int32_t file_size;

  _UpdateResourceRes__isset __isset;

  void __set_result(const int16_t val) {
    result = val;
  }

  void __set_update_type(const int16_t val) {
    update_type = val;
  }

  void __set_new_source_version(const std::string& val) {
    new_source_version = val;
  }

  void __set_download_url(const std::string& val) {
    download_url = val;
  }

  void __set_md5_value(const std::string& val) {
    md5_value = val;
  }

  void __set_feature_url(const std::string& val) {
    feature_url = val;
  }

  void __set_file_size(const int32_t val) {
    file_size = val;
  }

  bool operator == (const UpdateResourceRes & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(update_type == rhs.update_type))
      return false;
    if (!(new_source_version == rhs.new_source_version))
      return false;
    if (!(download_url == rhs.download_url))
      return false;
    if (!(md5_value == rhs.md5_value))
      return false;
    if (!(feature_url == rhs.feature_url))
      return false;
    if (!(file_size == rhs.file_size))
      return false;
    return true;
  }
  bool operator != (const UpdateResourceRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateResourceRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UpdateResourceRes &a, UpdateResourceRes &b);

}} // namespace

#endif
