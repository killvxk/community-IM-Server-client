/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef room_gate_TYPES_H
#define room_gate_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "common_types.h"


namespace community { namespace room_gate {

struct MessageType {
  enum type {
    CONNECT_REQ = 600,
    CONNECT_RES = 601,
    GET_ROOMLIST_REQ = 602,
    GET_ROOMLIST_RES = 603,
    UPDATE_ROOMLIST_NOTIFY = 604
  };
};

extern const std::map<int, const char*> _MessageType_VALUES_TO_NAMES;

struct RoomCategory {
  enum type {
    ROOM_CATEGORY_ENTERTAINMENT = 0,
    ROOM_CATEGORY_FASHION = 1,
    ROOM_CATEGORY_CULTURE = 2
  };
};

extern const std::map<int, const char*> _RoomCategory_VALUES_TO_NAMES;

typedef struct _ConnectReq__isset {
  _ConnectReq__isset() : sessoin_ticket(false), client_random(false), server_random(false), checksum(false) {}
  bool sessoin_ticket;
  bool client_random;
  bool server_random;
  bool checksum;
} _ConnectReq__isset;

class ConnectReq {
 public:

  static const char* ascii_fingerprint; // = "BBC7293064E33026818BA3BBF9CEDECD";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0xC7,0x29,0x30,0x64,0xE3,0x30,0x26,0x81,0x8B,0xA3,0xBB,0xF9,0xCE,0xDE,0xCD};

  ConnectReq() : sessoin_ticket(), client_random(0), server_random(0), checksum() {
  }

  virtual ~ConnectReq() throw() {}

  std::string sessoin_ticket;
  int64_t client_random;
  int64_t server_random;
  std::string checksum;

  _ConnectReq__isset __isset;

  void __set_sessoin_ticket(const std::string& val) {
    sessoin_ticket = val;
  }

  void __set_client_random(const int64_t val) {
    client_random = val;
  }

  void __set_server_random(const int64_t val) {
    server_random = val;
  }

  void __set_checksum(const std::string& val) {
    checksum = val;
  }

  bool operator == (const ConnectReq & rhs) const
  {
    if (!(sessoin_ticket == rhs.sessoin_ticket))
      return false;
    if (!(client_random == rhs.client_random))
      return false;
    if (!(server_random == rhs.server_random))
      return false;
    if (!(checksum == rhs.checksum))
      return false;
    return true;
  }
  bool operator != (const ConnectReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConnectReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ConnectReq &a, ConnectReq &b);

typedef struct _ConnectChecksum__isset {
  _ConnectChecksum__isset() : user_id(false), session_key(false), client_random(false), server_random(false) {}
  bool user_id;
  bool session_key;
  bool client_random;
  bool server_random;
} _ConnectChecksum__isset;

class ConnectChecksum {
 public:

  static const char* ascii_fingerprint; // = "402AD47659A8C66675C5D0A8EF2484F9";
  static const uint8_t binary_fingerprint[16]; // = {0x40,0x2A,0xD4,0x76,0x59,0xA8,0xC6,0x66,0x75,0xC5,0xD0,0xA8,0xEF,0x24,0x84,0xF9};

  ConnectChecksum() : user_id(0), session_key(), client_random(0), server_random(0) {
  }

  virtual ~ConnectChecksum() throw() {}

  int32_t user_id;
  std::string session_key;
  int64_t client_random;
  int64_t server_random;

  _ConnectChecksum__isset __isset;

  void __set_user_id(const int32_t val) {
    user_id = val;
  }

  void __set_session_key(const std::string& val) {
    session_key = val;
  }

  void __set_client_random(const int64_t val) {
    client_random = val;
  }

  void __set_server_random(const int64_t val) {
    server_random = val;
  }

  bool operator == (const ConnectChecksum & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(session_key == rhs.session_key))
      return false;
    if (!(client_random == rhs.client_random))
      return false;
    if (!(server_random == rhs.server_random))
      return false;
    return true;
  }
  bool operator != (const ConnectChecksum &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConnectChecksum & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ConnectChecksum &a, ConnectChecksum &b);

typedef struct _RoomServerInfo__isset {
  _RoomServerInfo__isset() : room_name(false), room_id(false), signature(false), category(false) {}
  bool room_name;
  bool room_id;
  bool signature;
  bool category;
} _RoomServerInfo__isset;

class RoomServerInfo {
 public:

  static const char* ascii_fingerprint; // = "BC1BA9A65A3FC8186E13B7B0817F6C66";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0x1B,0xA9,0xA6,0x5A,0x3F,0xC8,0x18,0x6E,0x13,0xB7,0xB0,0x81,0x7F,0x6C,0x66};

  RoomServerInfo() : room_name(), room_id(0), signature(), category((RoomCategory::type)0) {
  }

  virtual ~RoomServerInfo() throw() {}

  std::string room_name;
  int32_t room_id;
  std::string signature;
  RoomCategory::type category;

  _RoomServerInfo__isset __isset;

  void __set_room_name(const std::string& val) {
    room_name = val;
  }

  void __set_room_id(const int32_t val) {
    room_id = val;
  }

  void __set_signature(const std::string& val) {
    signature = val;
  }

  void __set_category(const RoomCategory::type val) {
    category = val;
  }

  bool operator == (const RoomServerInfo & rhs) const
  {
    if (!(room_name == rhs.room_name))
      return false;
    if (!(room_id == rhs.room_id))
      return false;
    if (!(signature == rhs.signature))
      return false;
    if (!(category == rhs.category))
      return false;
    return true;
  }
  bool operator != (const RoomServerInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RoomServerInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RoomServerInfo &a, RoomServerInfo &b);

typedef struct _GetRoomlistRes__isset {
  _GetRoomlistRes__isset() : room_list(false) {}
  bool room_list;
} _GetRoomlistRes__isset;

class GetRoomlistRes {
 public:

  static const char* ascii_fingerprint; // = "A803C54EAD95E24D90C5E66FB98EA72B";
  static const uint8_t binary_fingerprint[16]; // = {0xA8,0x03,0xC5,0x4E,0xAD,0x95,0xE2,0x4D,0x90,0xC5,0xE6,0x6F,0xB9,0x8E,0xA7,0x2B};

  GetRoomlistRes() {
  }

  virtual ~GetRoomlistRes() throw() {}

  std::vector<int32_t>  room_list;

  _GetRoomlistRes__isset __isset;

  void __set_room_list(const std::vector<int32_t> & val) {
    room_list = val;
  }

  bool operator == (const GetRoomlistRes & rhs) const
  {
    if (!(room_list == rhs.room_list))
      return false;
    return true;
  }
  bool operator != (const GetRoomlistRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetRoomlistRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetRoomlistRes &a, GetRoomlistRes &b);

}} // namespace

#endif
