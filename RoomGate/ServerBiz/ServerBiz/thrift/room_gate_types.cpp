/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "room_gate_types.h"

#include <algorithm>

namespace community { namespace room_gate {

int _kMessageTypeValues[] = {
  MessageType::CONNECT_REQ,
  MessageType::CONNECT_RES,
  MessageType::GET_ROOMLIST_REQ,
  MessageType::GET_ROOMLIST_RES,
  MessageType::UPDATE_ROOMLIST_NOTIFY
};
const char* _kMessageTypeNames[] = {
  "CONNECT_REQ",
  "CONNECT_RES",
  "GET_ROOMLIST_REQ",
  "GET_ROOMLIST_RES",
  "UPDATE_ROOMLIST_NOTIFY"
};
const std::map<int, const char*> _MessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kMessageTypeValues, _kMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRoomCategoryValues[] = {
  RoomCategory::ROOM_CATEGORY_ENTERTAINMENT,
  RoomCategory::ROOM_CATEGORY_FASHION,
  RoomCategory::ROOM_CATEGORY_CULTURE
};
const char* _kRoomCategoryNames[] = {
  "ROOM_CATEGORY_ENTERTAINMENT",
  "ROOM_CATEGORY_FASHION",
  "ROOM_CATEGORY_CULTURE"
};
const std::map<int, const char*> _RoomCategory_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kRoomCategoryValues, _kRoomCategoryNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* ConnectReq::ascii_fingerprint = "BBC7293064E33026818BA3BBF9CEDECD";
const uint8_t ConnectReq::binary_fingerprint[16] = {0xBB,0xC7,0x29,0x30,0x64,0xE3,0x30,0x26,0x81,0x8B,0xA3,0xBB,0xF9,0xCE,0xDE,0xCD};

uint32_t ConnectReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sessoin_ticket);
          this->__isset.sessoin_ticket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->client_random);
          this->__isset.client_random = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->server_random);
          this->__isset.server_random = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->checksum);
          this->__isset.checksum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ConnectReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ConnectReq");

  xfer += oprot->writeFieldBegin("sessoin_ticket", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->sessoin_ticket);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_random", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->client_random);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("server_random", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->server_random);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("checksum", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->checksum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ConnectReq &a, ConnectReq &b) {
  using ::std::swap;
  swap(a.sessoin_ticket, b.sessoin_ticket);
  swap(a.client_random, b.client_random);
  swap(a.server_random, b.server_random);
  swap(a.checksum, b.checksum);
  swap(a.__isset, b.__isset);
}

const char* ConnectChecksum::ascii_fingerprint = "402AD47659A8C66675C5D0A8EF2484F9";
const uint8_t ConnectChecksum::binary_fingerprint[16] = {0x40,0x2A,0xD4,0x76,0x59,0xA8,0xC6,0x66,0x75,0xC5,0xD0,0xA8,0xEF,0x24,0x84,0xF9};

uint32_t ConnectChecksum::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->session_key);
          this->__isset.session_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->client_random);
          this->__isset.client_random = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->server_random);
          this->__isset.server_random = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ConnectChecksum::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ConnectChecksum");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_key", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->session_key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_random", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->client_random);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("server_random", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->server_random);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ConnectChecksum &a, ConnectChecksum &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.session_key, b.session_key);
  swap(a.client_random, b.client_random);
  swap(a.server_random, b.server_random);
  swap(a.__isset, b.__isset);
}

const char* RoomServerInfo::ascii_fingerprint = "BC1BA9A65A3FC8186E13B7B0817F6C66";
const uint8_t RoomServerInfo::binary_fingerprint[16] = {0xBC,0x1B,0xA9,0xA6,0x5A,0x3F,0xC8,0x18,0x6E,0x13,0xB7,0xB0,0x81,0x7F,0x6C,0x66};

uint32_t RoomServerInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->room_name);
          this->__isset.room_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->room_id);
          this->__isset.room_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->signature);
          this->__isset.signature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->category = (RoomCategory::type)ecast0;
          this->__isset.category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RoomServerInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RoomServerInfo");

  xfer += oprot->writeFieldBegin("room_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->room_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->room_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("signature", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->signature);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("category", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->category);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RoomServerInfo &a, RoomServerInfo &b) {
  using ::std::swap;
  swap(a.room_name, b.room_name);
  swap(a.room_id, b.room_id);
  swap(a.signature, b.signature);
  swap(a.category, b.category);
  swap(a.__isset, b.__isset);
}

const char* GetRoomlistRes::ascii_fingerprint = "A803C54EAD95E24D90C5E66FB98EA72B";
const uint8_t GetRoomlistRes::binary_fingerprint[16] = {0xA8,0x03,0xC5,0x4E,0xAD,0x95,0xE2,0x4D,0x90,0xC5,0xE6,0x6F,0xB9,0x8E,0xA7,0x2B};

uint32_t GetRoomlistRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->room_list.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->room_list.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += iprot->readI32(this->room_list[_i5]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.room_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetRoomlistRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GetRoomlistRes");

  xfer += oprot->writeFieldBegin("room_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->room_list.size()));
    std::vector<int32_t> ::const_iterator _iter6;
    for (_iter6 = this->room_list.begin(); _iter6 != this->room_list.end(); ++_iter6)
    {
      xfer += oprot->writeI32((*_iter6));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetRoomlistRes &a, GetRoomlistRes &b) {
  using ::std::swap;
  swap(a.room_list, b.room_list);
  swap(a.__isset, b.__isset);
}

}} // namespace
