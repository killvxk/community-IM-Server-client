/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "room_server_types.h"

#include <algorithm>

namespace community { namespace room_server {

int _kMessageTypeValues[] = {
  MessageType::MT_CONNECT_REQ,
  MessageType::MT_CONNECT_RES,
  MessageType::MT_ENTER_ROOM_REQ,
  MessageType::MT_ENTER_ROOM_RES,
  MessageType::MT_ENTER_ROOM_NOTIFY,
  MessageType::MT_LEAVE_ROOM_REQ,
  MessageType::MT_LEAVE_ROOM_RES,
  MessageType::MT_LEAVE_ROOM_NOTIFY,
  MessageType::MT_GET_ROOMINFO_REQ,
  MessageType::MT_GET_ROOMINFO_RES,
  MessageType::MT_GET_SERVICE_IP_REQ,
  MessageType::MT_GET_SERVICE_IP_RES,
  MessageType::MT_UPDATE_SERVICE_IP_NOTIFY,
  MessageType::MT_GET_USER_LIST_REQ,
  MessageType::MT_GET_USER_LIST_RES,
  MessageType::MT_GET_MIC_LIST_REQ,
  MessageType::MT_GET_MIC_LIST_RES,
  MessageType::MT_UPDATE_NETWORK_STATUS_REQ,
  MessageType::MT_UPDATE_NETWORK_STATUS_RES,
  MessageType::MT_UPDATE_NETWORK_STATUS_NOTIFY,
  MessageType::MT_GET_SPECIAL_LIST_REQ,
  MessageType::MT_GET_SPECIAL_LIST_RES,
  MessageType::MT_ROOMBOARD_REQ,
  MessageType::MT_ROOMBOARD_RES,
  MessageType::MT_UPDATE_ROOMINFO_REQ,
  MessageType::MT_UPDATE_ROOMINFO_RES,
  MessageType::MT_UPDATE_ROOMINFO_NOTIFY,
  MessageType::MT_MEDIA_DEVICE_SETTING_REQ,
  MessageType::MT_MEDIA_DEVICE_SETTING_RES,
  MessageType::MT_MEDIA_DEVICE_SETTING_NOTIFY,
  MessageType::MT_MEDIA_UP_REQ,
  MessageType::MT_MEDIA_UP_RES,
  MessageType::MT_MEDIA_UP_NOTIFY,
  MessageType::MT_MEDIA_DOWN_REQ,
  MessageType::MT_MEDIA_DOWN_RES,
  MessageType::MT_MEDIA_DOWN_NOTIFY,
  MessageType::MT_CHAT_REQ,
  MessageType::MT_CHAT_RES,
  MessageType::MT_CHAT_NOTIFY,
  MessageType::MT_BROADCAST_REQ,
  MessageType::MT_BROADCAST_RES,
  MessageType::MT_BROADCAST_NOTIFY,
  MessageType::MT_GIFT_REQ,
  MessageType::MT_GIFT_RES,
  MessageType::MT_GIFT_NOTIFY,
  MessageType::MT_MULTITOUSER_GIFT_REQ,
  MessageType::MT_MULTITOUSER_GIFT_RES,
  MessageType::MT_MULTITOUSER_GIFT_NOTIFY,
  MessageType::MT_KICKUSER_REQ,
  MessageType::MT_KICKUSER_RES,
  MessageType::MT_NOKICK_REQ,
  MessageType::MT_NOKICK_RES,
  MessageType::MT_NOKICK_NOTIFY,
  MessageType::MT_ADD_BLACK_LIST_REQ,
  MessageType::MT_ADD_BLACK_LIST_RES,
  MessageType::MT_ADD_BLACK_LIST_NOTIFY,
  MessageType::MT_REMOVE_BLACK_LIST_REQ,
  MessageType::MT_REMOVE_BLACK_LIST_RES,
  MessageType::MT_REMOVE_BLACK_LIST_NOTIFY,
  MessageType::MT_ADD_FORBID_CHAT_LIST_REQ,
  MessageType::MT_ADD_FORBID_CHAT_LIST_RES,
  MessageType::MT_ADD_FORBID_CHAT_LIST_NOTIFY,
  MessageType::MT_REMOVE_FORBID_CHAT_LIST_REQ,
  MessageType::MT_REMOVE_FORBID_CHAT_LIST_RES,
  MessageType::MT_REMVOE_FORBID_CHAT_LIST_NOTIFY,
  MessageType::MT_ADD_ROOM_MANAGER_LIST_REQ,
  MessageType::MT_ADD_ROOM_MANAGER_LIST_RES,
  MessageType::MT_ADD_ROOM_MANAGER_LIST_NOTIFY,
  MessageType::MT_REMOVE_ROOM_MANAGER_LIST_REQ,
  MessageType::MT_REMOVE_ROOM_MANAGER_LIST_RES,
  MessageType::MT_REMOVE_ROOM_MANAGER_LIST_NOTIFY,
  MessageType::MT_VOTE_REQ,
  MessageType::MT_VOTE_RES,
  MessageType::MT_VOTE_NOTIFY,
  MessageType::MT_ADD_FAVORITE_REQ,
  MessageType::MT_ADD_FAVORITE_RES,
  MessageType::MT_REMOVE_FAVORITE_REQ,
  MessageType::MT_REMOVE_FAVORITE_RES,
  MessageType::MT_QUERY_FAVORITE_REQ,
  MessageType::MT_QUERY_FAVORITE_RES,
  MessageType::MT_SWITCH_USERROLE_REQ,
  MessageType::MT_SWITCH_USERROLE_RES,
  MessageType::MT_SWITCH_USERROLE_NOTIFY,
  MessageType::MT_SCREENSHOT_LOG_REQ,
  MessageType::MT_SCREENSHOT_LOG_RES,
  MessageType::MT_RESOURCE_CHANGE_NOTIFY,
  MessageType::MT_BOX_REQ,
  MessageType::MT_BOX_RES,
  MessageType::MT_BOX_NOTIFY,
  MessageType::MT_PRIZE_NOTIFY,
  MessageType::MT_SYSMSG_NOTIFY,
  MessageType::MT_WORLD_BROADCAST_REQ,
  MessageType::MT_WORLD_BROADCAST_RES,
  MessageType::MT_WORLD_BROADCAST_NOTIFY,
  MessageType::MT_WORLD_GIFT_REQ,
  MessageType::MT_WORLD_GIFT_RES,
  MessageType::MT_WORLD_GIFT_NOTIFY,
  MessageType::MT_TIMEOUT_VIDEOGIFT_NOTIFY,
  MessageType::MT_SET_STAMPGIFT_NOTIFTY,
  MessageType::MT_TIMEOUT_STAMPGIFT_NOTIFY,
  MessageType::MT_SET_BIRTHDAY_NOTIFY,
  MessageType::MT_TIMEOUT_BIRTHDAY_NOTIFY,
  MessageType::MT_TIMEOUT_ROLE_NOTIFY,
  MessageType::MT_USERINFO_CHANGE_NOTIFY,
  MessageType::MT_SITE_PRIVATE_MESSAGE_REQ,
  MessageType::MT_SITE_PRIVATE_MESSAGE_RES,
  MessageType::MT_SITE_PRIVATE_MESSAGE_NOTIFY,
  MessageType::MT_UPDATE_USER_STATUS_REQ,
  MessageType::MT_UPDATE_USER_STATUS_RES,
  MessageType::MT_UPDATE_USER_STATUS_NOTIFY
};
const char* _kMessageTypeNames[] = {
  "MT_CONNECT_REQ",
  "MT_CONNECT_RES",
  "MT_ENTER_ROOM_REQ",
  "MT_ENTER_ROOM_RES",
  "MT_ENTER_ROOM_NOTIFY",
  "MT_LEAVE_ROOM_REQ",
  "MT_LEAVE_ROOM_RES",
  "MT_LEAVE_ROOM_NOTIFY",
  "MT_GET_ROOMINFO_REQ",
  "MT_GET_ROOMINFO_RES",
  "MT_GET_SERVICE_IP_REQ",
  "MT_GET_SERVICE_IP_RES",
  "MT_UPDATE_SERVICE_IP_NOTIFY",
  "MT_GET_USER_LIST_REQ",
  "MT_GET_USER_LIST_RES",
  "MT_GET_MIC_LIST_REQ",
  "MT_GET_MIC_LIST_RES",
  "MT_UPDATE_NETWORK_STATUS_REQ",
  "MT_UPDATE_NETWORK_STATUS_RES",
  "MT_UPDATE_NETWORK_STATUS_NOTIFY",
  "MT_GET_SPECIAL_LIST_REQ",
  "MT_GET_SPECIAL_LIST_RES",
  "MT_ROOMBOARD_REQ",
  "MT_ROOMBOARD_RES",
  "MT_UPDATE_ROOMINFO_REQ",
  "MT_UPDATE_ROOMINFO_RES",
  "MT_UPDATE_ROOMINFO_NOTIFY",
  "MT_MEDIA_DEVICE_SETTING_REQ",
  "MT_MEDIA_DEVICE_SETTING_RES",
  "MT_MEDIA_DEVICE_SETTING_NOTIFY",
  "MT_MEDIA_UP_REQ",
  "MT_MEDIA_UP_RES",
  "MT_MEDIA_UP_NOTIFY",
  "MT_MEDIA_DOWN_REQ",
  "MT_MEDIA_DOWN_RES",
  "MT_MEDIA_DOWN_NOTIFY",
  "MT_CHAT_REQ",
  "MT_CHAT_RES",
  "MT_CHAT_NOTIFY",
  "MT_BROADCAST_REQ",
  "MT_BROADCAST_RES",
  "MT_BROADCAST_NOTIFY",
  "MT_GIFT_REQ",
  "MT_GIFT_RES",
  "MT_GIFT_NOTIFY",
  "MT_MULTITOUSER_GIFT_REQ",
  "MT_MULTITOUSER_GIFT_RES",
  "MT_MULTITOUSER_GIFT_NOTIFY",
  "MT_KICKUSER_REQ",
  "MT_KICKUSER_RES",
  "MT_NOKICK_REQ",
  "MT_NOKICK_RES",
  "MT_NOKICK_NOTIFY",
  "MT_ADD_BLACK_LIST_REQ",
  "MT_ADD_BLACK_LIST_RES",
  "MT_ADD_BLACK_LIST_NOTIFY",
  "MT_REMOVE_BLACK_LIST_REQ",
  "MT_REMOVE_BLACK_LIST_RES",
  "MT_REMOVE_BLACK_LIST_NOTIFY",
  "MT_ADD_FORBID_CHAT_LIST_REQ",
  "MT_ADD_FORBID_CHAT_LIST_RES",
  "MT_ADD_FORBID_CHAT_LIST_NOTIFY",
  "MT_REMOVE_FORBID_CHAT_LIST_REQ",
  "MT_REMOVE_FORBID_CHAT_LIST_RES",
  "MT_REMVOE_FORBID_CHAT_LIST_NOTIFY",
  "MT_ADD_ROOM_MANAGER_LIST_REQ",
  "MT_ADD_ROOM_MANAGER_LIST_RES",
  "MT_ADD_ROOM_MANAGER_LIST_NOTIFY",
  "MT_REMOVE_ROOM_MANAGER_LIST_REQ",
  "MT_REMOVE_ROOM_MANAGER_LIST_RES",
  "MT_REMOVE_ROOM_MANAGER_LIST_NOTIFY",
  "MT_VOTE_REQ",
  "MT_VOTE_RES",
  "MT_VOTE_NOTIFY",
  "MT_ADD_FAVORITE_REQ",
  "MT_ADD_FAVORITE_RES",
  "MT_REMOVE_FAVORITE_REQ",
  "MT_REMOVE_FAVORITE_RES",
  "MT_QUERY_FAVORITE_REQ",
  "MT_QUERY_FAVORITE_RES",
  "MT_SWITCH_USERROLE_REQ",
  "MT_SWITCH_USERROLE_RES",
  "MT_SWITCH_USERROLE_NOTIFY",
  "MT_SCREENSHOT_LOG_REQ",
  "MT_SCREENSHOT_LOG_RES",
  "MT_RESOURCE_CHANGE_NOTIFY",
  "MT_BOX_REQ",
  "MT_BOX_RES",
  "MT_BOX_NOTIFY",
  "MT_PRIZE_NOTIFY",
  "MT_SYSMSG_NOTIFY",
  "MT_WORLD_BROADCAST_REQ",
  "MT_WORLD_BROADCAST_RES",
  "MT_WORLD_BROADCAST_NOTIFY",
  "MT_WORLD_GIFT_REQ",
  "MT_WORLD_GIFT_RES",
  "MT_WORLD_GIFT_NOTIFY",
  "MT_TIMEOUT_VIDEOGIFT_NOTIFY",
  "MT_SET_STAMPGIFT_NOTIFTY",
  "MT_TIMEOUT_STAMPGIFT_NOTIFY",
  "MT_SET_BIRTHDAY_NOTIFY",
  "MT_TIMEOUT_BIRTHDAY_NOTIFY",
  "MT_TIMEOUT_ROLE_NOTIFY",
  "MT_USERINFO_CHANGE_NOTIFY",
  "MT_SITE_PRIVATE_MESSAGE_REQ",
  "MT_SITE_PRIVATE_MESSAGE_RES",
  "MT_SITE_PRIVATE_MESSAGE_NOTIFY",
  "MT_UPDATE_USER_STATUS_REQ",
  "MT_UPDATE_USER_STATUS_RES",
  "MT_UPDATE_USER_STATUS_NOTIFY"
};
const std::map<int, const char*> _MessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(110, _kMessageTypeValues, _kMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRoomInfoStatusValues[] = {
  RoomInfoStatus::PENDING,
  RoomInfoStatus::PASS
};
const char* _kRoomInfoStatusNames[] = {
  "PENDING",
  "PASS"
};
const std::map<int, const char*> _RoomInfoStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRoomInfoStatusValues, _kRoomInfoStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kGiftShowTypeValues[] = {
  GiftShowType::SINGLE,
  GiftShowType::ROOM,
  GiftShowType::SITE
};
const char* _kGiftShowTypeNames[] = {
  "SINGLE",
  "ROOM",
  "SITE"
};
const std::map<int, const char*> _GiftShowType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kGiftShowTypeValues, _kGiftShowTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kNetworkLineValues[] = {
  NetworkLine::CHINA_TELECOM,
  NetworkLine::CHINA_UNICOM,
  NetworkLine::CHINA_MODILE,
  NetworkLine::EDUCATION_NETWORK,
  NetworkLine::MULTI_NETWORK
};
const char* _kNetworkLineNames[] = {
  "CHINA_TELECOM",
  "CHINA_UNICOM",
  "CHINA_MODILE",
  "EDUCATION_NETWORK",
  "MULTI_NETWORK"
};
const std::map<int, const char*> _NetworkLine_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kNetworkLineValues, _kNetworkLineNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRoomStatusValues[] = {
  RoomStatus::INITIAL,
  RoomStatus::NORMAL,
  RoomStatus::LOCK,
  RoomStatus::CLOSE
};
const char* _kRoomStatusNames[] = {
  "INITIAL",
  "NORMAL",
  "LOCK",
  "CLOSE"
};
const std::map<int, const char*> _RoomStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kRoomStatusValues, _kRoomStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRoomFlagValues[] = {
  RoomFlag::PROHIBIT_PRIVATE_CHAT,
  RoomFlag::PROHIBIT_PUBLIC_CHAT,
  RoomFlag::PROHIBIT_TEMPUSER_PUBLIC_CHAT,
  RoomFlag::PROHIBIT_DJ_MEDIA_UP,
  RoomFlag::PROHIBIT_ROOM_BROADCAST
};
const char* _kRoomFlagNames[] = {
  "PROHIBIT_PRIVATE_CHAT",
  "PROHIBIT_PUBLIC_CHAT",
  "PROHIBIT_TEMPUSER_PUBLIC_CHAT",
  "PROHIBIT_DJ_MEDIA_UP",
  "PROHIBIT_ROOM_BROADCAST"
};
const std::map<int, const char*> _RoomFlag_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kRoomFlagValues, _kRoomFlagNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kBroadcastTypeValues[] = {
  BroadcastType::NO_BROADCAST,
  BroadcastType::ONLY_SELF,
  BroadcastType::PRIVATE_MESSAGE,
  BroadcastType::ROOM_BROADCAST,
  BroadcastType::SITE_BROADCAST,
  BroadcastType::WORLD_BROADCAST
};
const char* _kBroadcastTypeNames[] = {
  "NO_BROADCAST",
  "ONLY_SELF",
  "PRIVATE_MESSAGE",
  "ROOM_BROADCAST",
  "SITE_BROADCAST",
  "WORLD_BROADCAST"
};
const std::map<int, const char*> _BroadcastType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kBroadcastTypeValues, _kBroadcastTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMediaStatusValues[] = {
  MediaStatus::NONE,
  MediaStatus::READY,
  MediaStatus::PUBLIC_MIC,
  MediaStatus::PRIVATE_MIC,
  MediaStatus::FRIEND_MIC
};
const char* _kMediaStatusNames[] = {
  "NONE",
  "READY",
  "PUBLIC_MIC",
  "PRIVATE_MIC",
  "FRIEND_MIC"
};
const std::map<int, const char*> _MediaStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kMediaStatusValues, _kMediaStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMediaActionValues[] = {
  MediaAction::MEDIA_ACTION_UP,
  MediaAction::MEDIA_ACTION_DOWN
};
const char* _kMediaActionNames[] = {
  "MEDIA_ACTION_UP",
  "MEDIA_ACTION_DOWN"
};
const std::map<int, const char*> _MediaAction_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kMediaActionValues, _kMediaActionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kUserStatusValues[] = {
  UserStatus::OFFLINE,
  UserStatus::ONLINE,
  UserStatus::AWAY,
  UserStatus::HIDE
};
const char* _kUserStatusNames[] = {
  "OFFLINE",
  "ONLINE",
  "AWAY",
  "HIDE"
};
const std::map<int, const char*> _UserStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kUserStatusValues, _kUserStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPermissionItemTypeValues[] = {
  PermissionItemType::ID0,
  PermissionItemType::ID1,
  PermissionItemType::ID2,
  PermissionItemType::ID3
};
const char* _kPermissionItemTypeNames[] = {
  "ID0",
  "ID1",
  "ID2",
  "ID3"
};
const std::map<int, const char*> _PermissionItemType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kPermissionItemTypeValues, _kPermissionItemTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPermissionItemValueValues[] = {
  PermissionItemValue::NOALLOW,
  PermissionItemValue::ALLOW,
  PermissionItemValue::NEEDREPLY
};
const char* _kPermissionItemValueNames[] = {
  "NOALLOW",
  "ALLOW",
  "NEEDREPLY"
};
const std::map<int, const char*> _PermissionItemValue_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kPermissionItemValueValues, _kPermissionItemValueNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPermissionItemValues[] = {
  PermissionItem::SinglePublicChat,
  PermissionItem::PublicChat,
  PermissionItem::PrivateChat,
  PermissionItem::Dice,
  PermissionItem::SetFont,
  PermissionItem::AutoResponder,
  PermissionItem::SendEmotion,
  PermissionItem::SendMood,
  PermissionItem::SendPokeUser,
  PermissionItem::ShakeWindowTimes_Day,
  PermissionItem::PublicMIC,
  PermissionItem::PrivateMIC,
  PermissionItem::EnterFullRoom,
  PermissionItem::HideEnterRoom,
  PermissionItem::SeeHide,
  PermissionItem::WaitTimeKMoney,
  PermissionItem::SeeUserIP,
  PermissionItem::ShowIdiograph,
  PermissionItem::ShowUserIcon,
  PermissionItem::FreeDecoColor,
  PermissionItem::TipOfEnterRoom,
  PermissionItem::SendSystemBroadcast,
  PermissionItem::SendFreeSystemBroadcast,
  PermissionItem::SendRoomBroadcast,
  PermissionItem::SendFreeRoomBroadcast,
  PermissionItem::ToBeSiege,
  PermissionItem::EnterLockedRoom,
  PermissionItem::ShowBirthday,
  PermissionItem::RoomManage,
  PermissionItem::RoomManage_PublicNotice,
  PermissionItem::RoomManage_Setting,
  PermissionItem::RoomManage_QuickReply,
  PermissionItem::KickUser,
  PermissionItem::NoKickUser,
  PermissionItem::ForbidChat,
  PermissionItem::NoForbidChat,
  PermissionItem::AddRoomOwner,
  PermissionItem::DelRoomOwner,
  PermissionItem::AddViceRoomOwner,
  PermissionItem::DelViceRoomOwner,
  PermissionItem::AddRoomManager,
  PermissionItem::DelRoomManager,
  PermissionItem::AddBlacklist,
  PermissionItem::DelBlacklist,
  PermissionItem::Vote,
  PermissionItem::ForcePublicMic,
  PermissionItem::KickPublicMic,
  PermissionItem::KickPrivateMic,
  PermissionItem::KickFriendMic,
  PermissionItem::SeePublicMic,
  PermissionItem::SeePrivateMic,
  PermissionItem::SeeFriendMic,
  PermissionItem::ShieldUser,
  PermissionItem::ShieldTempUserChat,
  PermissionItem::Room_NoForbid_PrivateChat,
  PermissionItem::Room_NoForbid_PublicChat,
  PermissionItem::Room_NoForbid_MIC,
  PermissionItem::NoForbid_SendRoomBroadcast,
  PermissionItem::HideExitRoom,
  PermissionItem::RecordVideo,
  PermissionItem::ExchangeCash,
  PermissionItem::ExchangeInfraredCamera,
  PermissionItem::ShowEnterRoomTip,
  PermissionItem::ShowLevelSmallIcon_Chat,
  PermissionItem::InRoomManageList,
  PermissionItem::Room_NoForbid_TempUser_PublicChat,
  PermissionItem::VideoStreamNumber,
  PermissionItem::SeeFriendMic_Check,
  PermissionItem::FriendMIC,
  PermissionItem::SendChatInterval,
  PermissionItem::SendPokeInterval,
  PermissionItem::UserinfoSetting,
  PermissionItem::RecvGift,
  PermissionItem::SendProp,
  PermissionItem::ShowChatTime,
  PermissionItem::KickUserSoftware,
  PermissionItem::Auto_ProhibitUserIN,
  PermissionItem::Auto_OpenPriceMic
};
const char* _kPermissionItemNames[] = {
  "SinglePublicChat",
  "PublicChat",
  "PrivateChat",
  "Dice",
  "SetFont",
  "AutoResponder",
  "SendEmotion",
  "SendMood",
  "SendPokeUser",
  "ShakeWindowTimes_Day",
  "PublicMIC",
  "PrivateMIC",
  "EnterFullRoom",
  "HideEnterRoom",
  "SeeHide",
  "WaitTimeKMoney",
  "SeeUserIP",
  "ShowIdiograph",
  "ShowUserIcon",
  "FreeDecoColor",
  "TipOfEnterRoom",
  "SendSystemBroadcast",
  "SendFreeSystemBroadcast",
  "SendRoomBroadcast",
  "SendFreeRoomBroadcast",
  "ToBeSiege",
  "EnterLockedRoom",
  "ShowBirthday",
  "RoomManage",
  "RoomManage_PublicNotice",
  "RoomManage_Setting",
  "RoomManage_QuickReply",
  "KickUser",
  "NoKickUser",
  "ForbidChat",
  "NoForbidChat",
  "AddRoomOwner",
  "DelRoomOwner",
  "AddViceRoomOwner",
  "DelViceRoomOwner",
  "AddRoomManager",
  "DelRoomManager",
  "AddBlacklist",
  "DelBlacklist",
  "Vote",
  "ForcePublicMic",
  "KickPublicMic",
  "KickPrivateMic",
  "KickFriendMic",
  "SeePublicMic",
  "SeePrivateMic",
  "SeeFriendMic",
  "ShieldUser",
  "ShieldTempUserChat",
  "Room_NoForbid_PrivateChat",
  "Room_NoForbid_PublicChat",
  "Room_NoForbid_MIC",
  "NoForbid_SendRoomBroadcast",
  "HideExitRoom",
  "RecordVideo",
  "ExchangeCash",
  "ExchangeInfraredCamera",
  "ShowEnterRoomTip",
  "ShowLevelSmallIcon_Chat",
  "InRoomManageList",
  "Room_NoForbid_TempUser_PublicChat",
  "VideoStreamNumber",
  "SeeFriendMic_Check",
  "FriendMIC",
  "SendChatInterval",
  "SendPokeInterval",
  "UserinfoSetting",
  "RecvGift",
  "SendProp",
  "ShowChatTime",
  "KickUserSoftware",
  "Auto_ProhibitUserIN",
  "Auto_OpenPriceMic"
};
const std::map<int, const char*> _PermissionItem_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(78, _kPermissionItemValues, _kPermissionItemNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kConsumerChannelValues[] = {
  ConsumerChannel::NORMAL_CONSUMER,
  ConsumerChannel::GIFTCAR,
  ConsumerChannel::FLIGHT_GIFT,
  ConsumerChannel::MULTI_TOUSER_GIFT,
  ConsumerChannel::WORLD_GIFT,
  ConsumerChannel::SLOT_MACHINE,
  ConsumerChannel::SEND_BOARDCAST
};
const char* _kConsumerChannelNames[] = {
  "NORMAL_CONSUMER",
  "GIFTCAR",
  "FLIGHT_GIFT",
  "MULTI_TOUSER_GIFT",
  "WORLD_GIFT",
  "SLOT_MACHINE",
  "SEND_BOARDCAST"
};
const std::map<int, const char*> _ConsumerChannel_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kConsumerChannelValues, _kConsumerChannelNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kBoxSourceTypeValues[] = {
  BoxSourceType::DAY_CONSUME_PRIZE,
  BoxSourceType::ACHIEVEMENT_PRIZE,
  BoxSourceType::OTHER
};
const char* _kBoxSourceTypeNames[] = {
  "DAY_CONSUME_PRIZE",
  "ACHIEVEMENT_PRIZE",
  "OTHER"
};
const std::map<int, const char*> _BoxSourceType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kBoxSourceTypeValues, _kBoxSourceTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPrizeTypeValues[] = {
  PrizeType::EXP_VALUE,
  PrizeType::KMONEY,
  PrizeType::USER_ROLE,
  PrizeType::DECOLOR,
  PrizeType::BOX
};
const char* _kPrizeTypeNames[] = {
  "EXP_VALUE",
  "KMONEY",
  "USER_ROLE",
  "DECOLOR",
  "BOX"
};
const std::map<int, const char*> _PrizeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kPrizeTypeValues, _kPrizeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kBlacklistTypeValues[] = {
  BlacklistType::UNKNOW,
  BlacklistType::BREAK_LAW
};
const char* _kBlacklistTypeNames[] = {
  "UNKNOW",
  "BREAK_LAW"
};
const std::map<int, const char*> _BlacklistType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kBlacklistTypeValues, _kBlacklistTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kBlacklistDisposeTypeValues[] = {
  BlacklistDisposeType::KICKOUT_SITE
};
const char* _kBlacklistDisposeTypeNames[] = {
  "KICKOUT_SITE"
};
const std::map<int, const char*> _BlacklistDisposeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kBlacklistDisposeTypeValues, _kBlacklistDisposeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRoleTypeValues[] = {
  RoleType::REGISTER_USER,
  RoleType::RECHARGE_USER,
  RoleType::NORMAL_MEMBER,
  RoleType::SENIOR_MEMBER,
  RoleType::DISC_JOCKEY,
  RoleType::NORMAL_AGENT,
  RoleType::GENERAL_AGENT,
  RoleType::SITE_MANAGER,
  RoleType::ROOM_ROLE,
  RoleType::PRIZE_ROLE
};
const char* _kRoleTypeNames[] = {
  "REGISTER_USER",
  "RECHARGE_USER",
  "NORMAL_MEMBER",
  "SENIOR_MEMBER",
  "DISC_JOCKEY",
  "NORMAL_AGENT",
  "GENERAL_AGENT",
  "SITE_MANAGER",
  "ROOM_ROLE",
  "PRIZE_ROLE"
};
const std::map<int, const char*> _RoleType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kRoleTypeValues, _kRoleTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kGiftTypeValues[] = {
  GiftType::TYPE_100,
  GiftType::TYPE_200,
  GiftType::TYPE_210,
  GiftType::TYPE_300,
  GiftType::TYPE_400,
  GiftType::TYPE_1100,
  GiftType::TYPE_1101,
  GiftType::TYPE_1200,
  GiftType::TYPE_1201,
  GiftType::TYPE_1300,
  GiftType::TYPE_1400,
  GiftType::TYPE_1401,
  GiftType::TYPE_1500,
  GiftType::TYPE_1510
};
const char* _kGiftTypeNames[] = {
  "TYPE_100",
  "TYPE_200",
  "TYPE_210",
  "TYPE_300",
  "TYPE_400",
  "TYPE_1100",
  "TYPE_1101",
  "TYPE_1200",
  "TYPE_1201",
  "TYPE_1300",
  "TYPE_1400",
  "TYPE_1401",
  "TYPE_1500",
  "TYPE_1510"
};
const std::map<int, const char*> _GiftType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(14, _kGiftTypeValues, _kGiftTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kChatTypeValues[] = {
  ChatType::PRIVATE_CHAT,
  ChatType::PUBLIC_CHAT,
  ChatType::AUTO_REPLY,
  ChatType::USER_MOOD,
  ChatType::POKE,
  ChatType::SHAKE_WINDOW
};
const char* _kChatTypeNames[] = {
  "PRIVATE_CHAT",
  "PUBLIC_CHAT",
  "AUTO_REPLY",
  "USER_MOOD",
  "POKE",
  "SHAKE_WINDOW"
};
const std::map<int, const char*> _ChatType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kChatTypeValues, _kChatTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSpecialListTypeValues[] = {
  SpecialListType::BLACK_LIST,
  SpecialListType::FORBID_CHAT_LIST,
  SpecialListType::KICK_LIST,
  SpecialListType::ROOM_OWNER_LIST,
  SpecialListType::VICE_ROOM_OWNER_LIST,
  SpecialListType::ROOM_MANAGER_LIST
};
const char* _kSpecialListTypeNames[] = {
  "BLACK_LIST",
  "FORBID_CHAT_LIST",
  "KICK_LIST",
  "ROOM_OWNER_LIST",
  "VICE_ROOM_OWNER_LIST",
  "ROOM_MANAGER_LIST"
};
const std::map<int, const char*> _SpecialListType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kSpecialListTypeValues, _kSpecialListTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kVideoSizeTypeValues[] = {
  VideoSizeType::SIZE_160_120,
  VideoSizeType::SIZE_176_144,
  VideoSizeType::SIZE_320_240,
  VideoSizeType::SIZE_240_176,
  VideoSizeType::SIZE_352_288,
  VideoSizeType::SIZE_640_480,
  VideoSizeType::SIZE_704_576,
  VideoSizeType::SIZE_800_600,
  VideoSizeType::SIZE_1024_768,
  VideoSizeType::SIZE_1280_720,
  VideoSizeType::SIZE_1920_1080
};
const char* _kVideoSizeTypeNames[] = {
  "SIZE_160_120",
  "SIZE_176_144",
  "SIZE_320_240",
  "SIZE_240_176",
  "SIZE_352_288",
  "SIZE_640_480",
  "SIZE_704_576",
  "SIZE_800_600",
  "SIZE_1024_768",
  "SIZE_1280_720",
  "SIZE_1920_1080"
};
const std::map<int, const char*> _VideoSizeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(11, _kVideoSizeTypeValues, _kVideoSizeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kBoxTypeValues[] = {
  BoxType::GOLD_BOX,
  BoxType::SILVER_BOX
};
const char* _kBoxTypeNames[] = {
  "GOLD_BOX",
  "SILVER_BOX"
};
const std::map<int, const char*> _BoxType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kBoxTypeValues, _kBoxTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSubscribeMediaResultValues[] = {
  SubscribeMediaResult::NOMEDIA,
  SubscribeMediaResult::REFUSE,
  SubscribeMediaResult::ACCEPT
};
const char* _kSubscribeMediaResultNames[] = {
  "NOMEDIA",
  "REFUSE",
  "ACCEPT"
};
const std::map<int, const char*> _SubscribeMediaResult_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSubscribeMediaResultValues, _kSubscribeMediaResultNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* RoomConnectReq::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t RoomConnectReq::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t RoomConnectReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->room_gate_id);
          this->__isset.room_gate_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->room_gate_name);
          this->__isset.room_gate_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RoomConnectReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RoomConnectReq");

  xfer += oprot->writeFieldBegin("room_gate_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->room_gate_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_gate_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->room_gate_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RoomConnectReq &a, RoomConnectReq &b) {
  using ::std::swap;
  swap(a.room_gate_id, b.room_gate_id);
  swap(a.room_gate_name, b.room_gate_name);
  swap(a.__isset, b.__isset);
}

const char* MediaDeviceInfo::ascii_fingerprint = "B9231DEF5E3DE68E553573D4630F2F5B";
const uint8_t MediaDeviceInfo::binary_fingerprint[16] = {0xB9,0x23,0x1D,0xEF,0x5E,0x3D,0xE6,0x8E,0x55,0x35,0x73,0xD4,0x63,0x0F,0x2F,0x5B};

uint32_t MediaDeviceInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->video_size_type);
          this->__isset.video_size_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->video_height);
          this->__isset.video_height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->video_width);
          this->__isset.video_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->video_frame_rate);
          this->__isset.video_frame_rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->audio_sample_rate);
          this->__isset.audio_sample_rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MediaDeviceInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MediaDeviceInfo");

  xfer += oprot->writeFieldBegin("video_size_type", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->video_size_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("video_height", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->video_height);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("video_width", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->video_width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("video_frame_rate", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->video_frame_rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("audio_sample_rate", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->audio_sample_rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MediaDeviceInfo &a, MediaDeviceInfo &b) {
  using ::std::swap;
  swap(a.video_size_type, b.video_size_type);
  swap(a.video_height, b.video_height);
  swap(a.video_width, b.video_width);
  swap(a.video_frame_rate, b.video_frame_rate);
  swap(a.audio_sample_rate, b.audio_sample_rate);
  swap(a.__isset, b.__isset);
}

const char* UserRole::ascii_fingerprint = "C25B226C0437EA93A910AE3DEFEFCBF8";
const uint8_t UserRole::binary_fingerprint[16] = {0xC2,0x5B,0x22,0x6C,0x04,0x37,0xEA,0x93,0xA9,0x10,0xAE,0x3D,0xEF,0xEF,0xCB,0xF8};

uint32_t UserRole::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->role_id);
          this->__isset.role_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->role_id_endtime);
          this->__isset.role_id_endtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserRole::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UserRole");

  xfer += oprot->writeFieldBegin("role_id", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->role_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("role_id_endtime", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->role_id_endtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserRole &a, UserRole &b) {
  using ::std::swap;
  swap(a.role_id, b.role_id);
  swap(a.role_id_endtime, b.role_id_endtime);
  swap(a.__isset, b.__isset);
}

const char* MicInfo::ascii_fingerprint = "73A3DB25660BF8948BDA13F27E2CC9B4";
const uint8_t MicInfo::binary_fingerprint[16] = {0x73,0xA3,0xDB,0x25,0x66,0x0B,0xF8,0x94,0x8B,0xDA,0x13,0xF2,0x7E,0x2C,0xC9,0xB4};

uint32_t MicInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->media_pos);
          this->__isset.media_pos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->media_time);
          this->__isset.media_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->media_device_info.read(iprot);
          this->__isset.media_device_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MicInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MicInfo");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("media_pos", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->media_pos);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("media_time", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->media_time);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.media_device_info) {
    xfer += oprot->writeFieldBegin("media_device_info", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->media_device_info.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MicInfo &a, MicInfo &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.media_pos, b.media_pos);
  swap(a.media_time, b.media_time);
  swap(a.media_device_info, b.media_device_info);
  swap(a.__isset, b.__isset);
}

const char* RoomInfo::ascii_fingerprint = "9C671EF6AC644763AE87969698683E14";
const uint8_t RoomInfo::binary_fingerprint[16] = {0x9C,0x67,0x1E,0xF6,0xAC,0x64,0x47,0x63,0xAE,0x87,0x96,0x96,0x98,0x68,0x3E,0x14};

uint32_t RoomInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->room_id);
          this->__isset.room_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->room_name);
          this->__isset.room_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->room_flags);
          this->__isset.room_flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->room_theme);
          this->__isset.room_theme = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->room_broadinfo);
          this->__isset.room_broadinfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->recharge_broadinfo);
          this->__isset.recharge_broadinfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->welcome_phrase);
          this->__isset.welcome_phrase = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_change_password);
          this->__isset.is_change_password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_change_image);
          this->__isset.is_change_image = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->room_image_url);
          this->__isset.room_image_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->room_status);
          this->__isset.room_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->room_desc);
          this->__isset.room_desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->owner_user_id);
          this->__isset.owner_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->owner_good_number);
          this->__isset.owner_good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_count);
          this->__isset.max_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->room_broadinfo_status);
          this->__isset.room_broadinfo_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->recharge_broadinfo_status);
          this->__isset.recharge_broadinfo_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->welcome_phrase_status);
          this->__isset.welcome_phrase_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->room_broadinfo_minutes);
          this->__isset.room_broadinfo_minutes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->recharge_broadinfo_minutes);
          this->__isset.recharge_broadinfo_minutes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->welcome_phrase_minutes);
          this->__isset.welcome_phrase_minutes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RoomInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RoomInfo");

  xfer += oprot->writeFieldBegin("room_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->room_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->room_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_flags", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->room_flags);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_theme", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->room_theme);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_broadinfo", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->room_broadinfo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recharge_broadinfo", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->recharge_broadinfo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("welcome_phrase", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->welcome_phrase);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_change_password", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->is_change_password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_change_image", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->is_change_image);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_image_url", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->room_image_url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_status", ::apache::thrift::protocol::T_I16, 12);
  xfer += oprot->writeI16(this->room_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_desc", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->room_desc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("owner_user_id", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->owner_user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("owner_good_number", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->owner_good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_count", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->max_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_broadinfo_status", ::apache::thrift::protocol::T_I16, 17);
  xfer += oprot->writeI16(this->room_broadinfo_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recharge_broadinfo_status", ::apache::thrift::protocol::T_I16, 18);
  xfer += oprot->writeI16(this->recharge_broadinfo_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("welcome_phrase_status", ::apache::thrift::protocol::T_I16, 19);
  xfer += oprot->writeI16(this->welcome_phrase_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_broadinfo_minutes", ::apache::thrift::protocol::T_I16, 20);
  xfer += oprot->writeI16(this->room_broadinfo_minutes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recharge_broadinfo_minutes", ::apache::thrift::protocol::T_I16, 21);
  xfer += oprot->writeI16(this->recharge_broadinfo_minutes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("welcome_phrase_minutes", ::apache::thrift::protocol::T_I16, 22);
  xfer += oprot->writeI16(this->welcome_phrase_minutes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RoomInfo &a, RoomInfo &b) {
  using ::std::swap;
  swap(a.room_id, b.room_id);
  swap(a.room_name, b.room_name);
  swap(a.room_flags, b.room_flags);
  swap(a.room_theme, b.room_theme);
  swap(a.room_broadinfo, b.room_broadinfo);
  swap(a.recharge_broadinfo, b.recharge_broadinfo);
  swap(a.welcome_phrase, b.welcome_phrase);
  swap(a.is_change_password, b.is_change_password);
  swap(a.password, b.password);
  swap(a.is_change_image, b.is_change_image);
  swap(a.room_image_url, b.room_image_url);
  swap(a.room_status, b.room_status);
  swap(a.room_desc, b.room_desc);
  swap(a.owner_user_id, b.owner_user_id);
  swap(a.owner_good_number, b.owner_good_number);
  swap(a.max_count, b.max_count);
  swap(a.room_broadinfo_status, b.room_broadinfo_status);
  swap(a.recharge_broadinfo_status, b.recharge_broadinfo_status);
  swap(a.welcome_phrase_status, b.welcome_phrase_status);
  swap(a.room_broadinfo_minutes, b.room_broadinfo_minutes);
  swap(a.recharge_broadinfo_minutes, b.recharge_broadinfo_minutes);
  swap(a.welcome_phrase_minutes, b.welcome_phrase_minutes);
  swap(a.__isset, b.__isset);
}

const char* ServiceIPInfo::ascii_fingerprint = "D65EA1FAB5289383C2B96CE867AB43C0";
const uint8_t ServiceIPInfo::binary_fingerprint[16] = {0xD6,0x5E,0xA1,0xFA,0xB5,0x28,0x93,0x83,0xC2,0xB9,0x6C,0xE8,0x67,0xAB,0x43,0xC0};

uint32_t ServiceIPInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->video_service_ip1);
          this->__isset.video_service_ip1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->video_service_port1);
          this->__isset.video_service_port1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->video_service_ip2);
          this->__isset.video_service_ip2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->video_service_port2);
          this->__isset.video_service_port2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->video_service_ip3);
          this->__isset.video_service_ip3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->video_service_port3);
          this->__isset.video_service_port3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->audio_service_ip);
          this->__isset.audio_service_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->audio_service_port);
          this->__isset.audio_service_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->audio_service_ip2);
          this->__isset.audio_service_ip2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->audio_service_port2);
          this->__isset.audio_service_port2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->audio_service_ip3);
          this->__isset.audio_service_ip3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->audio_service_port3);
          this->__isset.audio_service_port3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->image_service_ip);
          this->__isset.image_service_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->image_service_port);
          this->__isset.image_service_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->screenshot_service_ip);
          this->__isset.screenshot_service_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->screenshot_service_port);
          this->__isset.screenshot_service_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceIPInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceIPInfo");

  xfer += oprot->writeFieldBegin("video_service_ip1", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->video_service_ip1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("video_service_port1", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->video_service_port1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("video_service_ip2", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->video_service_ip2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("video_service_port2", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->video_service_port2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("video_service_ip3", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->video_service_ip3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("video_service_port3", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->video_service_port3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("audio_service_ip", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->audio_service_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("audio_service_port", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->audio_service_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("audio_service_ip2", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->audio_service_ip2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("audio_service_port2", ::apache::thrift::protocol::T_I16, 10);
  xfer += oprot->writeI16(this->audio_service_port2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("audio_service_ip3", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->audio_service_ip3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("audio_service_port3", ::apache::thrift::protocol::T_I16, 12);
  xfer += oprot->writeI16(this->audio_service_port3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("image_service_ip", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->image_service_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("image_service_port", ::apache::thrift::protocol::T_I16, 14);
  xfer += oprot->writeI16(this->image_service_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("screenshot_service_ip", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->screenshot_service_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("screenshot_service_port", ::apache::thrift::protocol::T_I16, 16);
  xfer += oprot->writeI16(this->screenshot_service_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceIPInfo &a, ServiceIPInfo &b) {
  using ::std::swap;
  swap(a.video_service_ip1, b.video_service_ip1);
  swap(a.video_service_port1, b.video_service_port1);
  swap(a.video_service_ip2, b.video_service_ip2);
  swap(a.video_service_port2, b.video_service_port2);
  swap(a.video_service_ip3, b.video_service_ip3);
  swap(a.video_service_port3, b.video_service_port3);
  swap(a.audio_service_ip, b.audio_service_ip);
  swap(a.audio_service_port, b.audio_service_port);
  swap(a.audio_service_ip2, b.audio_service_ip2);
  swap(a.audio_service_port2, b.audio_service_port2);
  swap(a.audio_service_ip3, b.audio_service_ip3);
  swap(a.audio_service_port3, b.audio_service_port3);
  swap(a.image_service_ip, b.image_service_ip);
  swap(a.image_service_port, b.image_service_port);
  swap(a.screenshot_service_ip, b.screenshot_service_ip);
  swap(a.screenshot_service_port, b.screenshot_service_port);
  swap(a.__isset, b.__isset);
}

const char* EnterRoomReq::ascii_fingerprint = "CA183997EDF29A0984A331F9BB24B5A9";
const uint8_t EnterRoomReq::binary_fingerprint[16] = {0xCA,0x18,0x39,0x97,0xED,0xF2,0x9A,0x09,0x84,0xA3,0x31,0xF9,0xBB,0x24,0xB5,0xA9};

uint32_t EnterRoomReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->room_password);
          this->__isset.room_password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_robot);
          this->__isset.is_robot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->user_status);
          this->__isset.user_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->media_status);
          this->__isset.media_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->network_line_id);
          this->__isset.network_line_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->session_ticket.read(iprot);
          this->__isset.session_ticket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EnterRoomReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EnterRoomReq");

  xfer += oprot->writeFieldBegin("room_password", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->room_password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_robot", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->is_robot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_status", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->user_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("media_status", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->media_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("network_line_id", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->network_line_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_ticket", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->session_ticket.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EnterRoomReq &a, EnterRoomReq &b) {
  using ::std::swap;
  swap(a.room_password, b.room_password);
  swap(a.is_robot, b.is_robot);
  swap(a.user_status, b.user_status);
  swap(a.media_status, b.media_status);
  swap(a.network_line_id, b.network_line_id);
  swap(a.session_ticket, b.session_ticket);
  swap(a.__isset, b.__isset);
}

const char* EnterRoomRes::ascii_fingerprint = "3768E6F870C347A1A6C9FA335601848E";
const uint8_t EnterRoomRes::binary_fingerprint[16] = {0x37,0x68,0xE6,0xF8,0x70,0xC3,0x47,0xA1,0xA6,0xC9,0xFA,0x33,0x56,0x01,0x84,0x8E};

uint32_t EnterRoomRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_text);
          this->__isset.error_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->room_info.read(iprot);
          this->__isset.room_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EnterRoomRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EnterRoomRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_info", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->room_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EnterRoomRes &a, EnterRoomRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_text, b.error_text);
  swap(a.room_info, b.room_info);
  swap(a.__isset, b.__isset);
}

const char* CheckPasswordReq::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t CheckPasswordReq::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t CheckPasswordReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CheckPasswordReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CheckPasswordReq");

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CheckPasswordReq &a, CheckPasswordReq &b) {
  using ::std::swap;
  swap(a.password, b.password);
  swap(a.__isset, b.__isset);
}

const char* GetRoomInfoRes::ascii_fingerprint = "3768E6F870C347A1A6C9FA335601848E";
const uint8_t GetRoomInfoRes::binary_fingerprint[16] = {0x37,0x68,0xE6,0xF8,0x70,0xC3,0x47,0xA1,0xA6,0xC9,0xFA,0x33,0x56,0x01,0x84,0x8E};

uint32_t GetRoomInfoRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_text);
          this->__isset.error_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->room_info.read(iprot);
          this->__isset.room_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetRoomInfoRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GetRoomInfoRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_info", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->room_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetRoomInfoRes &a, GetRoomInfoRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_text, b.error_text);
  swap(a.room_info, b.room_info);
  swap(a.__isset, b.__isset);
}

const char* GetServiceIPRes::ascii_fingerprint = "6FB7EA8EFD7E7604085BBAE9F5F598D8";
const uint8_t GetServiceIPRes::binary_fingerprint[16] = {0x6F,0xB7,0xEA,0x8E,0xFD,0x7E,0x76,0x04,0x08,0x5B,0xBA,0xE9,0xF5,0xF5,0x98,0xD8};

uint32_t GetServiceIPRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_text);
          this->__isset.error_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->service_ip_info.read(iprot);
          this->__isset.service_ip_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetServiceIPRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GetServiceIPRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("service_ip_info", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->service_ip_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetServiceIPRes &a, GetServiceIPRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_text, b.error_text);
  swap(a.service_ip_info, b.service_ip_info);
  swap(a.__isset, b.__isset);
}

const char* GetUserListRes::ascii_fingerprint = "FEF7A5F2FB96490153E9C068494411FD";
const uint8_t GetUserListRes::binary_fingerprint[16] = {0xFE,0xF7,0xA5,0xF2,0xFB,0x96,0x49,0x01,0x53,0xE9,0xC0,0x68,0x49,0x44,0x11,0xFD};

uint32_t GetUserListRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_text);
          this->__isset.error_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_count);
          this->__isset.user_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->user_list.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->user_list.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->user_list[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.user_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetUserListRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GetUserListRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_count", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->user_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_list", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->user_list.size()));
    std::vector< ::community::common::UserInfo> ::const_iterator _iter5;
    for (_iter5 = this->user_list.begin(); _iter5 != this->user_list.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetUserListRes &a, GetUserListRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_text, b.error_text);
  swap(a.user_count, b.user_count);
  swap(a.user_list, b.user_list);
  swap(a.__isset, b.__isset);
}

const char* GetMicUserListRes::ascii_fingerprint = "12A48BCCDC716CBBD1C50EDA6F5DF63B";
const uint8_t GetMicUserListRes::binary_fingerprint[16] = {0x12,0xA4,0x8B,0xCC,0xDC,0x71,0x6C,0xBB,0xD1,0xC5,0x0E,0xDA,0x6F,0x5D,0xF6,0x3B};

uint32_t GetMicUserListRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_text);
          this->__isset.error_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->mic_list.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->mic_list.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->mic_list[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.mic_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetMicUserListRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GetMicUserListRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mic_list", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->mic_list.size()));
    std::vector<MicInfo> ::const_iterator _iter11;
    for (_iter11 = this->mic_list.begin(); _iter11 != this->mic_list.end(); ++_iter11)
    {
      xfer += (*_iter11).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetMicUserListRes &a, GetMicUserListRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_text, b.error_text);
  swap(a.mic_list, b.mic_list);
  swap(a.__isset, b.__isset);
}

const char* UpdateNetworkStatusReq::ascii_fingerprint = "C25B226C0437EA93A910AE3DEFEFCBF8";
const uint8_t UpdateNetworkStatusReq::binary_fingerprint[16] = {0xC2,0x5B,0x22,0x6C,0x04,0x37,0xEA,0x93,0xA9,0x10,0xAE,0x3D,0xEF,0xEF,0xCB,0xF8};

uint32_t UpdateNetworkStatusReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->network_status_level);
          this->__isset.network_status_level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->update_time);
          this->__isset.update_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateNetworkStatusReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UpdateNetworkStatusReq");

  xfer += oprot->writeFieldBegin("network_status_level", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->network_status_level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("update_time", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->update_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateNetworkStatusReq &a, UpdateNetworkStatusReq &b) {
  using ::std::swap;
  swap(a.network_status_level, b.network_status_level);
  swap(a.update_time, b.update_time);
  swap(a.__isset, b.__isset);
}

const char* SpecialUserinfo::ascii_fingerprint = "DA87EE38A905F5EAF4EE544697108D5F";
const uint8_t SpecialUserinfo::binary_fingerprint[16] = {0xDA,0x87,0xEE,0x38,0xA9,0x05,0xF5,0xEA,0xF4,0xEE,0x54,0x46,0x97,0x10,0x8D,0x5F};

uint32_t SpecialUserinfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nick_name);
          this->__isset.nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->good_number);
          this->__isset.good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->special_list_type);
          this->__isset.special_list_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SpecialUserinfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SpecialUserinfo");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nick_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("good_number", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("special_list_type", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->special_list_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SpecialUserinfo &a, SpecialUserinfo &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.nick_name, b.nick_name);
  swap(a.good_number, b.good_number);
  swap(a.special_list_type, b.special_list_type);
  swap(a.__isset, b.__isset);
}

const char* GetSpecialListRes::ascii_fingerprint = "A5D6A3281440D079B9176E80CBF86CE2";
const uint8_t GetSpecialListRes::binary_fingerprint[16] = {0xA5,0xD6,0xA3,0x28,0x14,0x40,0xD0,0x79,0xB9,0x17,0x6E,0x80,0xCB,0xF8,0x6C,0xE2};

uint32_t GetSpecialListRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_text);
          this->__isset.error_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->special_user_count);
          this->__isset.special_user_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->special_user_list.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->special_user_list.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += this->special_user_list[_i16].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.special_user_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSpecialListRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GetSpecialListRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("special_user_count", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->special_user_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("special_user_list", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->special_user_list.size()));
    std::vector<SpecialUserinfo> ::const_iterator _iter17;
    for (_iter17 = this->special_user_list.begin(); _iter17 != this->special_user_list.end(); ++_iter17)
    {
      xfer += (*_iter17).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSpecialListRes &a, GetSpecialListRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_text, b.error_text);
  swap(a.special_user_count, b.special_user_count);
  swap(a.special_user_list, b.special_user_list);
  swap(a.__isset, b.__isset);
}

const char* Biggift::ascii_fingerprint = "8AA16F84632CF88CD428F1E0130F7738";
const uint8_t Biggift::binary_fingerprint[16] = {0x8A,0xA1,0x6F,0x84,0x63,0x2C,0xF8,0x8C,0xD4,0x28,0xF1,0xE0,0x13,0x0F,0x77,0x38};

uint32_t Biggift::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gift_id);
          this->__isset.gift_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->gift_type_id);
          this->__isset.gift_type_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gift_quantity);
          this->__isset.gift_quantity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->is_biggift);
          this->__isset.is_biggift = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->room_id);
          this->__isset.room_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->room_name);
          this->__isset.room_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_user_id);
          this->__isset.from_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_good_number);
          this->__isset.from_good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->from_username);
          this->__isset.from_username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_amount);
          this->__isset.from_amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->to_user_id);
          this->__isset.to_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->to_good_number);
          this->__isset.to_good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->to_username);
          this->__isset.to_username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->to_amount);
          this->__isset.to_amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->trade_id);
          this->__isset.trade_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->create_timestamp);
          this->__isset.create_timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Biggift::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Biggift");

  xfer += oprot->writeFieldBegin("gift_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->gift_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gift_type_id", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->gift_type_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gift_quantity", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->gift_quantity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_biggift", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->is_biggift);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_id", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->room_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_name", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->room_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_user_id", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->from_user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_good_number", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->from_good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_username", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->from_username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_amount", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->from_amount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_user_id", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->to_user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_good_number", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->to_good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_username", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->to_username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_amount", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->to_amount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("trade_id", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->trade_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_timestamp", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->create_timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Biggift &a, Biggift &b) {
  using ::std::swap;
  swap(a.gift_id, b.gift_id);
  swap(a.gift_type_id, b.gift_type_id);
  swap(a.gift_quantity, b.gift_quantity);
  swap(a.is_biggift, b.is_biggift);
  swap(a.room_id, b.room_id);
  swap(a.room_name, b.room_name);
  swap(a.from_user_id, b.from_user_id);
  swap(a.from_good_number, b.from_good_number);
  swap(a.from_username, b.from_username);
  swap(a.from_amount, b.from_amount);
  swap(a.to_user_id, b.to_user_id);
  swap(a.to_good_number, b.to_good_number);
  swap(a.to_username, b.to_username);
  swap(a.to_amount, b.to_amount);
  swap(a.trade_id, b.trade_id);
  swap(a.create_timestamp, b.create_timestamp);
  swap(a.__isset, b.__isset);
}

const char* GetBiggiftRes::ascii_fingerprint = "85AA2BAAF10746EC0D00A530827D4482";
const uint8_t GetBiggiftRes::binary_fingerprint[16] = {0x85,0xAA,0x2B,0xAA,0xF1,0x07,0x46,0xEC,0x0D,0x00,0xA5,0x30,0x82,0x7D,0x44,0x82};

uint32_t GetBiggiftRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_text);
          this->__isset.error_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->biggift_count);
          this->__isset.biggift_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->biggift_list.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->biggift_list.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += this->biggift_list[_i22].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.biggift_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetBiggiftRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GetBiggiftRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("biggift_count", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->biggift_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("biggift_list", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->biggift_list.size()));
    std::vector<Biggift> ::const_iterator _iter23;
    for (_iter23 = this->biggift_list.begin(); _iter23 != this->biggift_list.end(); ++_iter23)
    {
      xfer += (*_iter23).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetBiggiftRes &a, GetBiggiftRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_text, b.error_text);
  swap(a.biggift_count, b.biggift_count);
  swap(a.biggift_list, b.biggift_list);
  swap(a.__isset, b.__isset);
}

const char* GetSiegeRes::ascii_fingerprint = "A8E28A553FC18E1E17B97599066E99E2";
const uint8_t GetSiegeRes::binary_fingerprint[16] = {0xA8,0xE2,0x8A,0x55,0x3F,0xC1,0x8E,0x1E,0x17,0xB9,0x75,0x99,0x06,0x6E,0x99,0xE2};

uint32_t GetSiegeRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_text);
          this->__isset.error_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->trade_id);
          this->__isset.trade_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->room_id);
          this->__isset.room_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->room_name);
          this->__isset.room_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_user_id);
          this->__isset.from_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_good_number);
          this->__isset.from_good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->from_username);
          this->__isset.from_username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_amount);
          this->__isset.from_amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->to_user_id);
          this->__isset.to_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->to_good_number);
          this->__isset.to_good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->to_username);
          this->__isset.to_username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->to_amount);
          this->__isset.to_amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gift_id);
          this->__isset.gift_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->gift_type_id);
          this->__isset.gift_type_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gift_quantity);
          this->__isset.gift_quantity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->create_timestamp);
          this->__isset.create_timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetSiegeRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GetSiegeRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("trade_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->trade_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_id", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->room_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->room_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_user_id", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->from_user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_good_number", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->from_good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_username", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->from_username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_amount", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->from_amount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_user_id", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->to_user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_good_number", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->to_good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_username", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->to_username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_amount", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->to_amount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gift_id", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->gift_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gift_type_id", ::apache::thrift::protocol::T_I16, 15);
  xfer += oprot->writeI16(this->gift_type_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gift_quantity", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->gift_quantity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_timestamp", ::apache::thrift::protocol::T_I64, 17);
  xfer += oprot->writeI64(this->create_timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetSiegeRes &a, GetSiegeRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_text, b.error_text);
  swap(a.trade_id, b.trade_id);
  swap(a.room_id, b.room_id);
  swap(a.room_name, b.room_name);
  swap(a.from_user_id, b.from_user_id);
  swap(a.from_good_number, b.from_good_number);
  swap(a.from_username, b.from_username);
  swap(a.from_amount, b.from_amount);
  swap(a.to_user_id, b.to_user_id);
  swap(a.to_good_number, b.to_good_number);
  swap(a.to_username, b.to_username);
  swap(a.to_amount, b.to_amount);
  swap(a.gift_id, b.gift_id);
  swap(a.gift_type_id, b.gift_type_id);
  swap(a.gift_quantity, b.gift_quantity);
  swap(a.create_timestamp, b.create_timestamp);
  swap(a.__isset, b.__isset);
}

const char* FontInfo::ascii_fingerprint = "EC03ABF65CC475A366BEDD70D8B1D656";
const uint8_t FontInfo::binary_fingerprint[16] = {0xEC,0x03,0xAB,0xF6,0x5C,0xC4,0x75,0xA3,0x66,0xBE,0xDD,0x70,0xD8,0xB1,0xD6,0x56};

uint32_t FontInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->bold);
          this->__isset.bold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->italic);
          this->__isset.italic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->underline);
          this->__isset.underline = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->strikeout);
          this->__isset.strikeout = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->color);
          this->__isset.color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FontInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("FontInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bold", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->bold);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("italic", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->italic);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("underline", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->underline);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("strikeout", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->strikeout);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("color", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FontInfo &a, FontInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.size, b.size);
  swap(a.bold, b.bold);
  swap(a.italic, b.italic);
  swap(a.underline, b.underline);
  swap(a.strikeout, b.strikeout);
  swap(a.color, b.color);
  swap(a.__isset, b.__isset);
}

const char* ChatReq::ascii_fingerprint = "DA66CF2BF8B1CB3B9CD580B3789A6324";
const uint8_t ChatReq::binary_fingerprint[16] = {0xDA,0x66,0xCF,0x2B,0xF8,0xB1,0xCB,0x3B,0x9C,0xD5,0x80,0xB3,0x78,0x9A,0x63,0x24};

uint32_t ChatReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->from_nick_name);
          this->__isset.from_nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_good_number);
          this->__isset.from_good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->to_nick_name);
          this->__isset.to_nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->to_good_number);
          this->__isset.to_good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->chat_type);
          this->__isset.chat_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chat_text);
          this->__isset.chat_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->chat_time);
          this->__isset.chat_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->font_info.read(iprot);
          this->__isset.font_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->from_role_id);
          this->__isset.from_role_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_role_icon_id);
          this->__isset.from_role_icon_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->to_role_id);
          this->__isset.to_role_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->to_role_icon_id);
          this->__isset.to_role_icon_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChatReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ChatReq");

  xfer += oprot->writeFieldBegin("from_nick_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->from_nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_good_number", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->from_good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_nick_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->to_nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_good_number", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->to_good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chat_type", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->chat_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chat_text", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->chat_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chat_time", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->chat_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("font_info", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->font_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_role_id", ::apache::thrift::protocol::T_I16, 9);
  xfer += oprot->writeI16(this->from_role_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_role_icon_id", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->from_role_icon_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_role_id", ::apache::thrift::protocol::T_I16, 11);
  xfer += oprot->writeI16(this->to_role_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_role_icon_id", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->to_role_icon_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChatReq &a, ChatReq &b) {
  using ::std::swap;
  swap(a.from_nick_name, b.from_nick_name);
  swap(a.from_good_number, b.from_good_number);
  swap(a.to_nick_name, b.to_nick_name);
  swap(a.to_good_number, b.to_good_number);
  swap(a.chat_type, b.chat_type);
  swap(a.chat_text, b.chat_text);
  swap(a.chat_time, b.chat_time);
  swap(a.font_info, b.font_info);
  swap(a.from_role_id, b.from_role_id);
  swap(a.from_role_icon_id, b.from_role_icon_id);
  swap(a.to_role_id, b.to_role_id);
  swap(a.to_role_icon_id, b.to_role_icon_id);
  swap(a.__isset, b.__isset);
}

const char* BroadcastReq::ascii_fingerprint = "3BFF913456DA452BA45B01FADC1E81A7";
const uint8_t BroadcastReq::binary_fingerprint[16] = {0x3B,0xFF,0x91,0x34,0x56,0xDA,0x45,0x2B,0xA4,0x5B,0x01,0xFA,0xDC,0x1E,0x81,0xA7};

uint32_t BroadcastReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->from_room_name);
          this->__isset.from_room_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->from_nick_name);
          this->__isset.from_nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_good_number);
          this->__isset.from_good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->to_room_id);
          this->__isset.to_room_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->to_room_name);
          this->__isset.to_room_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->to_nick_name);
          this->__isset.to_nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->to_good_number);
          this->__isset.to_good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->broadcast_type);
          this->__isset.broadcast_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->broadcast_text);
          this->__isset.broadcast_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->send_time);
          this->__isset.send_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_color);
          this->__isset.is_color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->font_info.read(iprot);
          this->__isset.font_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->from_role_id);
          this->__isset.from_role_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_role_icon_id);
          this->__isset.from_role_icon_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->to_role_id);
          this->__isset.to_role_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->to_role_icon_id);
          this->__isset.to_role_icon_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gift_id);
          this->__isset.gift_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gift_count);
          this->__isset.gift_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BroadcastReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BroadcastReq");

  xfer += oprot->writeFieldBegin("from_room_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->from_room_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_nick_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->from_nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_good_number", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->from_good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_room_id", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->to_room_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_room_name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->to_room_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_nick_name", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->to_nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_good_number", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->to_good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("broadcast_type", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->broadcast_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("broadcast_text", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->broadcast_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("send_time", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->send_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_color", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->is_color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("font_info", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->font_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_role_id", ::apache::thrift::protocol::T_I16, 13);
  xfer += oprot->writeI16(this->from_role_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_role_icon_id", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->from_role_icon_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_role_id", ::apache::thrift::protocol::T_I16, 15);
  xfer += oprot->writeI16(this->to_role_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_role_icon_id", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->to_role_icon_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gift_id", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->gift_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gift_count", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->gift_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BroadcastReq &a, BroadcastReq &b) {
  using ::std::swap;
  swap(a.from_room_name, b.from_room_name);
  swap(a.from_nick_name, b.from_nick_name);
  swap(a.from_good_number, b.from_good_number);
  swap(a.to_room_id, b.to_room_id);
  swap(a.to_room_name, b.to_room_name);
  swap(a.to_nick_name, b.to_nick_name);
  swap(a.to_good_number, b.to_good_number);
  swap(a.broadcast_type, b.broadcast_type);
  swap(a.broadcast_text, b.broadcast_text);
  swap(a.send_time, b.send_time);
  swap(a.is_color, b.is_color);
  swap(a.font_info, b.font_info);
  swap(a.from_role_id, b.from_role_id);
  swap(a.from_role_icon_id, b.from_role_icon_id);
  swap(a.to_role_id, b.to_role_id);
  swap(a.to_role_icon_id, b.to_role_icon_id);
  swap(a.gift_id, b.gift_id);
  swap(a.gift_count, b.gift_count);
  swap(a.__isset, b.__isset);
}

const char* GiftReq::ascii_fingerprint = "7098BDA1326BFA8F2A6DC40E506DA779";
const uint8_t GiftReq::binary_fingerprint[16] = {0x70,0x98,0xBD,0xA1,0x32,0x6B,0xFA,0x8F,0x2A,0x6D,0xC4,0x0E,0x50,0x6D,0xA7,0x79};

uint32_t GiftReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->from_nick_name);
          this->__isset.from_nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_good_number);
          this->__isset.from_good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->to_nick_name);
          this->__isset.to_nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->to_good_number);
          this->__isset.to_good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gift_id);
          this->__isset.gift_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gift_quantity);
          this->__isset.gift_quantity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gift_sum_quantity);
          this->__isset.gift_sum_quantity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->send_time);
          this->__isset.send_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->is_gift_broadcast);
          this->__isset.is_gift_broadcast = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->from_room_name);
          this->__isset.from_room_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->from_role_id);
          this->__isset.from_role_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_role_icon_id);
          this->__isset.from_role_icon_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->to_role_id);
          this->__isset.to_role_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->to_role_icon_id);
          this->__isset.to_role_icon_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->congratulations_text);
          this->__isset.congratulations_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->show_type);
          this->__isset.show_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GiftReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GiftReq");

  xfer += oprot->writeFieldBegin("from_nick_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->from_nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_good_number", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->from_good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_nick_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->to_nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_good_number", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->to_good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gift_id", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->gift_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gift_quantity", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->gift_quantity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gift_sum_quantity", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->gift_sum_quantity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("send_time", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->send_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_gift_broadcast", ::apache::thrift::protocol::T_I16, 9);
  xfer += oprot->writeI16(this->is_gift_broadcast);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_room_name", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->from_room_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_role_id", ::apache::thrift::protocol::T_I16, 11);
  xfer += oprot->writeI16(this->from_role_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_role_icon_id", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->from_role_icon_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_role_id", ::apache::thrift::protocol::T_I16, 13);
  xfer += oprot->writeI16(this->to_role_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_role_icon_id", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->to_role_icon_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("congratulations_text", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->congratulations_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("show_type", ::apache::thrift::protocol::T_I16, 16);
  xfer += oprot->writeI16(this->show_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GiftReq &a, GiftReq &b) {
  using ::std::swap;
  swap(a.from_nick_name, b.from_nick_name);
  swap(a.from_good_number, b.from_good_number);
  swap(a.to_nick_name, b.to_nick_name);
  swap(a.to_good_number, b.to_good_number);
  swap(a.gift_id, b.gift_id);
  swap(a.gift_quantity, b.gift_quantity);
  swap(a.gift_sum_quantity, b.gift_sum_quantity);
  swap(a.send_time, b.send_time);
  swap(a.is_gift_broadcast, b.is_gift_broadcast);
  swap(a.from_room_name, b.from_room_name);
  swap(a.from_role_id, b.from_role_id);
  swap(a.from_role_icon_id, b.from_role_icon_id);
  swap(a.to_role_id, b.to_role_id);
  swap(a.to_role_icon_id, b.to_role_icon_id);
  swap(a.congratulations_text, b.congratulations_text);
  swap(a.show_type, b.show_type);
  swap(a.__isset, b.__isset);
}

const char* SingleGift::ascii_fingerprint = "6435B39C87AB0E30F30BEDEFD7328C0D";
const uint8_t SingleGift::binary_fingerprint[16] = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

uint32_t SingleGift::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gift_id);
          this->__isset.gift_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gift_quantity);
          this->__isset.gift_quantity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gift_sum_quantity);
          this->__isset.gift_sum_quantity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SingleGift::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SingleGift");

  xfer += oprot->writeFieldBegin("gift_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->gift_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gift_quantity", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->gift_quantity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gift_sum_quantity", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->gift_sum_quantity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SingleGift &a, SingleGift &b) {
  using ::std::swap;
  swap(a.gift_id, b.gift_id);
  swap(a.gift_quantity, b.gift_quantity);
  swap(a.gift_sum_quantity, b.gift_sum_quantity);
  swap(a.__isset, b.__isset);
}

const char* MultiGiftReq::ascii_fingerprint = "F62D1E6D51BC6979820135F1DBA48C30";
const uint8_t MultiGiftReq::binary_fingerprint[16] = {0xF6,0x2D,0x1E,0x6D,0x51,0xBC,0x69,0x79,0x82,0x01,0x35,0xF1,0xDB,0xA4,0x8C,0x30};

uint32_t MultiGiftReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->from_nick_name);
          this->__isset.from_nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_good_number);
          this->__isset.from_good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->to_nick_name);
          this->__isset.to_nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->to_good_number);
          this->__isset.to_good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->send_time);
          this->__isset.send_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gift_count);
          this->__isset.gift_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->gift_list.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _ktype25;
            ::apache::thrift::protocol::TType _vtype26;
            xfer += iprot->readMapBegin(_ktype25, _vtype26, _size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              int32_t _key29;
              xfer += iprot->readI32(_key29);
              SingleGift& _val30 = this->gift_list[_key29];
              xfer += _val30.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.gift_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->is_gift_broadcast);
          this->__isset.is_gift_broadcast = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->from_room_name);
          this->__isset.from_room_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->from_role_id);
          this->__isset.from_role_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_role_icon_id);
          this->__isset.from_role_icon_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->to_role_id);
          this->__isset.to_role_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->to_role_icon_id);
          this->__isset.to_role_icon_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MultiGiftReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MultiGiftReq");

  xfer += oprot->writeFieldBegin("from_nick_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->from_nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_good_number", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->from_good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_nick_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->to_nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_good_number", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->to_good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("send_time", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->send_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gift_count", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->gift_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gift_list", ::apache::thrift::protocol::T_MAP, 7);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->gift_list.size()));
    std::map<int32_t, SingleGift> ::const_iterator _iter31;
    for (_iter31 = this->gift_list.begin(); _iter31 != this->gift_list.end(); ++_iter31)
    {
      xfer += oprot->writeI32(_iter31->first);
      xfer += _iter31->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_gift_broadcast", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->is_gift_broadcast);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_room_name", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->from_room_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_role_id", ::apache::thrift::protocol::T_I16, 10);
  xfer += oprot->writeI16(this->from_role_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_role_icon_id", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->from_role_icon_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_role_id", ::apache::thrift::protocol::T_I16, 12);
  xfer += oprot->writeI16(this->to_role_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_role_icon_id", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->to_role_icon_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MultiGiftReq &a, MultiGiftReq &b) {
  using ::std::swap;
  swap(a.from_nick_name, b.from_nick_name);
  swap(a.from_good_number, b.from_good_number);
  swap(a.to_nick_name, b.to_nick_name);
  swap(a.to_good_number, b.to_good_number);
  swap(a.send_time, b.send_time);
  swap(a.gift_count, b.gift_count);
  swap(a.gift_list, b.gift_list);
  swap(a.is_gift_broadcast, b.is_gift_broadcast);
  swap(a.from_room_name, b.from_room_name);
  swap(a.from_role_id, b.from_role_id);
  swap(a.from_role_icon_id, b.from_role_icon_id);
  swap(a.to_role_id, b.to_role_id);
  swap(a.to_role_icon_id, b.to_role_icon_id);
  swap(a.__isset, b.__isset);
}

const char* SingleUser::ascii_fingerprint = "FD87E8E4417C7AEAAAA2D798DD99A020";
const uint8_t SingleUser::binary_fingerprint[16] = {0xFD,0x87,0xE8,0xE4,0x41,0x7C,0x7A,0xEA,0xAA,0xA2,0xD7,0x98,0xDD,0x99,0xA0,0x20};

uint32_t SingleUser::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nick_name);
          this->__isset.nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->good_number);
          this->__isset.good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gift_sum_quantity);
          this->__isset.gift_sum_quantity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->role_id);
          this->__isset.role_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->role_icon_id);
          this->__isset.role_icon_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SingleUser::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SingleUser");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nick_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("good_number", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gift_sum_quantity", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->gift_sum_quantity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("role_id", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->role_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("role_icon_id", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->role_icon_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SingleUser &a, SingleUser &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.nick_name, b.nick_name);
  swap(a.good_number, b.good_number);
  swap(a.gift_sum_quantity, b.gift_sum_quantity);
  swap(a.role_id, b.role_id);
  swap(a.role_icon_id, b.role_icon_id);
  swap(a.__isset, b.__isset);
}

const char* MultiToUserGiftReq::ascii_fingerprint = "90CD221F4B8A782C19B5C6E468E1A51A";
const uint8_t MultiToUserGiftReq::binary_fingerprint[16] = {0x90,0xCD,0x22,0x1F,0x4B,0x8A,0x78,0x2C,0x19,0xB5,0xC6,0xE4,0x68,0xE1,0xA5,0x1A};

uint32_t MultiToUserGiftReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->from_nick_name);
          this->__isset.from_nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_good_number);
          this->__isset.from_good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gift_id);
          this->__isset.gift_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gift_quantity);
          this->__isset.gift_quantity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->send_time);
          this->__isset.send_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_count);
          this->__isset.user_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->to_user_list.clear();
            uint32_t _size32;
            ::apache::thrift::protocol::TType _ktype33;
            ::apache::thrift::protocol::TType _vtype34;
            xfer += iprot->readMapBegin(_ktype33, _vtype34, _size32);
            uint32_t _i36;
            for (_i36 = 0; _i36 < _size32; ++_i36)
            {
              int32_t _key37;
              xfer += iprot->readI32(_key37);
              SingleUser& _val38 = this->to_user_list[_key37];
              xfer += _val38.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.to_user_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->is_gift_broadcast);
          this->__isset.is_gift_broadcast = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->from_room_name);
          this->__isset.from_room_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->from_role_id);
          this->__isset.from_role_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_role_icon_id);
          this->__isset.from_role_icon_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MultiToUserGiftReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MultiToUserGiftReq");

  xfer += oprot->writeFieldBegin("from_nick_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->from_nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_good_number", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->from_good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gift_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->gift_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gift_quantity", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->gift_quantity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("send_time", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->send_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_count", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->user_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_user_list", ::apache::thrift::protocol::T_MAP, 7);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->to_user_list.size()));
    std::map<int32_t, SingleUser> ::const_iterator _iter39;
    for (_iter39 = this->to_user_list.begin(); _iter39 != this->to_user_list.end(); ++_iter39)
    {
      xfer += oprot->writeI32(_iter39->first);
      xfer += _iter39->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_gift_broadcast", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->is_gift_broadcast);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_room_name", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->from_room_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_role_id", ::apache::thrift::protocol::T_I16, 10);
  xfer += oprot->writeI16(this->from_role_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_role_icon_id", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->from_role_icon_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MultiToUserGiftReq &a, MultiToUserGiftReq &b) {
  using ::std::swap;
  swap(a.from_nick_name, b.from_nick_name);
  swap(a.from_good_number, b.from_good_number);
  swap(a.gift_id, b.gift_id);
  swap(a.gift_quantity, b.gift_quantity);
  swap(a.send_time, b.send_time);
  swap(a.user_count, b.user_count);
  swap(a.to_user_list, b.to_user_list);
  swap(a.is_gift_broadcast, b.is_gift_broadcast);
  swap(a.from_room_name, b.from_room_name);
  swap(a.from_role_id, b.from_role_id);
  swap(a.from_role_icon_id, b.from_role_icon_id);
  swap(a.__isset, b.__isset);
}

const char* MediaReq::ascii_fingerprint = "57AF24210DE9FE7240052E491D76EDDC";
const uint8_t MediaReq::binary_fingerprint[16] = {0x57,0xAF,0x24,0x21,0x0D,0xE9,0xFE,0x72,0x40,0x05,0x2E,0x49,0x1D,0x76,0xED,0xDC};

uint32_t MediaReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->media_status);
          this->__isset.media_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->media_pos);
          this->__isset.media_pos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->media_device_info.read(iprot);
          this->__isset.media_device_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MediaReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MediaReq");

  xfer += oprot->writeFieldBegin("media_status", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->media_status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("media_pos", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->media_pos);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.media_device_info) {
    xfer += oprot->writeFieldBegin("media_device_info", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->media_device_info.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MediaReq &a, MediaReq &b) {
  using ::std::swap;
  swap(a.media_status, b.media_status);
  swap(a.media_pos, b.media_pos);
  swap(a.media_device_info, b.media_device_info);
  swap(a.__isset, b.__isset);
}

const char* MediaDeviceSettingReq::ascii_fingerprint = "D4BD6718C5B988CF0C1D2CC0843AAAD5";
const uint8_t MediaDeviceSettingReq::binary_fingerprint[16] = {0xD4,0xBD,0x67,0x18,0xC5,0xB9,0x88,0xCF,0x0C,0x1D,0x2C,0xC0,0x84,0x3A,0xAA,0xD5};

uint32_t MediaDeviceSettingReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->media_device_info.read(iprot);
          this->__isset.media_device_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MediaDeviceSettingReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MediaDeviceSettingReq");

  xfer += oprot->writeFieldBegin("media_device_info", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->media_device_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MediaDeviceSettingReq &a, MediaDeviceSettingReq &b) {
  using ::std::swap;
  swap(a.media_device_info, b.media_device_info);
  swap(a.__isset, b.__isset);
}

const char* SubscribeMediaRes::ascii_fingerprint = "AAF0BD3A9001C3F14BD04F5DC0FE04B4";
const uint8_t SubscribeMediaRes::binary_fingerprint[16] = {0xAA,0xF0,0xBD,0x3A,0x90,0x01,0xC3,0xF1,0x4B,0xD0,0x4F,0x5D,0xC0,0xFE,0x04,0xB4};

uint32_t SubscribeMediaRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_text);
          this->__isset.error_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->media_device_info.read(iprot);
          this->__isset.media_device_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SubscribeMediaRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SubscribeMediaRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->result);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.media_device_info) {
    xfer += oprot->writeFieldBegin("media_device_info", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->media_device_info.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SubscribeMediaRes &a, SubscribeMediaRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_text, b.error_text);
  swap(a.result, b.result);
  swap(a.media_device_info, b.media_device_info);
  swap(a.__isset, b.__isset);
}

const char* ScreenShotLogReq::ascii_fingerprint = "C54745CF5E2800BFF941910D5280EE48";
const uint8_t ScreenShotLogReq::binary_fingerprint[16] = {0xC5,0x47,0x45,0xCF,0x5E,0x28,0x00,0xBF,0xF9,0x41,0x91,0x0D,0x52,0x80,0xEE,0x48};

uint32_t ScreenShotLogReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nick_name);
          this->__isset.nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->good_number);
          this->__isset.good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->client_ip);
          this->__isset.client_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->client_mac);
          this->__isset.client_mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->file_name);
          this->__isset.file_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ScreenShotLogReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ScreenShotLogReq");

  xfer += oprot->writeFieldBegin("nick_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("good_number", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_ip", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->client_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_mac", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->client_mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->file_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ScreenShotLogReq &a, ScreenShotLogReq &b) {
  using ::std::swap;
  swap(a.nick_name, b.nick_name);
  swap(a.good_number, b.good_number);
  swap(a.client_ip, b.client_ip);
  swap(a.client_mac, b.client_mac);
  swap(a.file_name, b.file_name);
  swap(a.__isset, b.__isset);
}

const char* WorldBroadcastReq::ascii_fingerprint = "9625A0EE5BC36362B94A65EC1E1C7900";
const uint8_t WorldBroadcastReq::binary_fingerprint[16] = {0x96,0x25,0xA0,0xEE,0x5B,0xC3,0x63,0x62,0xB9,0x4A,0x65,0xEC,0x1E,0x1C,0x79,0x00};

uint32_t WorldBroadcastReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->from_site_id);
          this->__isset.from_site_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->from_site_name);
          this->__isset.from_site_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_room_id);
          this->__isset.from_room_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->from_room_name);
          this->__isset.from_room_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_user_id);
          this->__isset.from_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->from_nick_name);
          this->__isset.from_nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_good_number);
          this->__isset.from_good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_amount);
          this->__isset.from_amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_exp_value);
          this->__isset.from_exp_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->to_site_ids);
          this->__isset.to_site_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->to_room_id);
          this->__isset.to_room_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->to_room_name);
          this->__isset.to_room_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->to_user_id);
          this->__isset.to_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->to_nick_name);
          this->__isset.to_nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->to_good_number);
          this->__isset.to_good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->broadcast_type);
          this->__isset.broadcast_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->broadcast_text);
          this->__isset.broadcast_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->send_time);
          this->__isset.send_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_color);
          this->__isset.is_color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->font_info.read(iprot);
          this->__isset.font_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->from_role_id);
          this->__isset.from_role_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_role_icon_id);
          this->__isset.from_role_icon_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->to_role_id);
          this->__isset.to_role_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->to_role_icon_id);
          this->__isset.to_role_icon_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WorldBroadcastReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("WorldBroadcastReq");

  xfer += oprot->writeFieldBegin("from_site_id", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->from_site_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_site_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->from_site_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_room_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->from_room_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_room_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->from_room_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_user_id", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->from_user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_nick_name", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->from_nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_good_number", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->from_good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_amount", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->from_amount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_exp_value", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->from_exp_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_site_ids", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->to_site_ids);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_room_id", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->to_room_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_room_name", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->to_room_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_user_id", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->to_user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_nick_name", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->to_nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_good_number", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->to_good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("broadcast_type", ::apache::thrift::protocol::T_I16, 16);
  xfer += oprot->writeI16(this->broadcast_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("broadcast_text", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeString(this->broadcast_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("send_time", ::apache::thrift::protocol::T_I64, 18);
  xfer += oprot->writeI64(this->send_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_color", ::apache::thrift::protocol::T_BOOL, 19);
  xfer += oprot->writeBool(this->is_color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("font_info", ::apache::thrift::protocol::T_STRUCT, 20);
  xfer += this->font_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_role_id", ::apache::thrift::protocol::T_I16, 21);
  xfer += oprot->writeI16(this->from_role_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("from_role_icon_id", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->from_role_icon_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_role_id", ::apache::thrift::protocol::T_I16, 23);
  xfer += oprot->writeI16(this->to_role_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_role_icon_id", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32(this->to_role_icon_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WorldBroadcastReq &a, WorldBroadcastReq &b) {
  using ::std::swap;
  swap(a.from_site_id, b.from_site_id);
  swap(a.from_site_name, b.from_site_name);
  swap(a.from_room_id, b.from_room_id);
  swap(a.from_room_name, b.from_room_name);
  swap(a.from_user_id, b.from_user_id);
  swap(a.from_nick_name, b.from_nick_name);
  swap(a.from_good_number, b.from_good_number);
  swap(a.from_amount, b.from_amount);
  swap(a.from_exp_value, b.from_exp_value);
  swap(a.to_site_ids, b.to_site_ids);
  swap(a.to_room_id, b.to_room_id);
  swap(a.to_room_name, b.to_room_name);
  swap(a.to_user_id, b.to_user_id);
  swap(a.to_nick_name, b.to_nick_name);
  swap(a.to_good_number, b.to_good_number);
  swap(a.broadcast_type, b.broadcast_type);
  swap(a.broadcast_text, b.broadcast_text);
  swap(a.send_time, b.send_time);
  swap(a.is_color, b.is_color);
  swap(a.font_info, b.font_info);
  swap(a.from_role_id, b.from_role_id);
  swap(a.from_role_icon_id, b.from_role_icon_id);
  swap(a.to_role_id, b.to_role_id);
  swap(a.to_role_icon_id, b.to_role_icon_id);
  swap(a.__isset, b.__isset);
}

const char* SwitchUserRole::ascii_fingerprint = "EEBEE5F2DAE75B1AB615147C163DCA93";
const uint8_t SwitchUserRole::binary_fingerprint[16] = {0xEE,0xBE,0xE5,0xF2,0xDA,0xE7,0x5B,0x1A,0xB6,0x15,0x14,0x7C,0x16,0x3D,0xCA,0x93};

uint32_t SwitchUserRole::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->new_role_id);
          this->__isset.new_role_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->old_role_id);
          this->__isset.old_role_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->switch_type);
          this->__isset.switch_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SwitchUserRole::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SwitchUserRole");

  xfer += oprot->writeFieldBegin("new_role_id", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->new_role_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("old_role_id", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->old_role_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("switch_type", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->switch_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SwitchUserRole &a, SwitchUserRole &b) {
  using ::std::swap;
  swap(a.new_role_id, b.new_role_id);
  swap(a.old_role_id, b.old_role_id);
  swap(a.switch_type, b.switch_type);
  swap(a.__isset, b.__isset);
}

const char* TimeoutRoleNotify::ascii_fingerprint = "565787C31CF2D774B532CB755189BF39";
const uint8_t TimeoutRoleNotify::binary_fingerprint[16] = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

uint32_t TimeoutRoleNotify::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->role_id);
          this->__isset.role_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TimeoutRoleNotify::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TimeoutRoleNotify");

  xfer += oprot->writeFieldBegin("role_id", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->role_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TimeoutRoleNotify &a, TimeoutRoleNotify &b) {
  using ::std::swap;
  swap(a.role_id, b.role_id);
  swap(a.__isset, b.__isset);
}

const char* ExchangeToKmoneyReq::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t ExchangeToKmoneyReq::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t ExchangeToKmoneyReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_giftmoney_amount);
          this->__isset.from_giftmoney_amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->to_kmoney_amount);
          this->__isset.to_kmoney_amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExchangeToKmoneyReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ExchangeToKmoneyReq");

  xfer += oprot->writeFieldBegin("from_giftmoney_amount", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->from_giftmoney_amount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_kmoney_amount", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->to_kmoney_amount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExchangeToKmoneyReq &a, ExchangeToKmoneyReq &b) {
  using ::std::swap;
  swap(a.from_giftmoney_amount, b.from_giftmoney_amount);
  swap(a.to_kmoney_amount, b.to_kmoney_amount);
  swap(a.__isset, b.__isset);
}

const char* ExchangeToKmoneyRes::ascii_fingerprint = "8CA64CC7DB6121AACC0E8764505D5751";
const uint8_t ExchangeToKmoneyRes::binary_fingerprint[16] = {0x8C,0xA6,0x4C,0xC7,0xDB,0x61,0x21,0xAA,0xCC,0x0E,0x87,0x64,0x50,0x5D,0x57,0x51};

uint32_t ExchangeToKmoneyRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_text);
          this->__isset.error_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->kmoney_balance);
          this->__isset.kmoney_balance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->giftmoney_balance);
          this->__isset.giftmoney_balance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExchangeToKmoneyRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ExchangeToKmoneyRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kmoney_balance", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->kmoney_balance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("giftmoney_balance", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->giftmoney_balance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExchangeToKmoneyRes &a, ExchangeToKmoneyRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_text, b.error_text);
  swap(a.kmoney_balance, b.kmoney_balance);
  swap(a.giftmoney_balance, b.giftmoney_balance);
  swap(a.__isset, b.__isset);
}

const char* SetStampGiftNotify::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t SetStampGiftNotify::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t SetStampGiftNotify::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stamp_gift_id);
          this->__isset.stamp_gift_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SetStampGiftNotify::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SetStampGiftNotify");

  xfer += oprot->writeFieldBegin("stamp_gift_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->stamp_gift_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SetStampGiftNotify &a, SetStampGiftNotify &b) {
  using ::std::swap;
  swap(a.stamp_gift_id, b.stamp_gift_id);
  swap(a.__isset, b.__isset);
}

const char* UserinfoChangeNotify::ascii_fingerprint = "28C2ECC89260BADB9C70330FBF47BFA8";
const uint8_t UserinfoChangeNotify::binary_fingerprint[16] = {0x28,0xC2,0xEC,0xC8,0x92,0x60,0xBA,0xDB,0x9C,0x70,0x33,0x0F,0xBF,0x47,0xBF,0xA8};

uint32_t UserinfoChangeNotify::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nick_name);
          this->__isset.nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->good_number);
          this->__isset.good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->decolor);
          this->__isset.decolor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserinfoChangeNotify::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UserinfoChangeNotify");

  xfer += oprot->writeFieldBegin("nick_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("good_number", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("decolor", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->decolor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserinfoChangeNotify &a, UserinfoChangeNotify &b) {
  using ::std::swap;
  swap(a.nick_name, b.nick_name);
  swap(a.good_number, b.good_number);
  swap(a.decolor, b.decolor);
  swap(a.__isset, b.__isset);
}

const char* BoxNotify::ascii_fingerprint = "7797A5FA0A579D1F1B1159EC6209714A";
const uint8_t BoxNotify::binary_fingerprint[16] = {0x77,0x97,0xA5,0xFA,0x0A,0x57,0x9D,0x1F,0x1B,0x11,0x59,0xEC,0x62,0x09,0x71,0x4A};

uint32_t BoxNotify::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nick_name);
          this->__isset.nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->good_number);
          this->__isset.good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->box_type);
          this->__isset.box_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->box_id);
          this->__isset.box_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->box_time);
          this->__isset.box_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->today_send_amount);
          this->__isset.today_send_amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->today_recv_amount);
          this->__isset.today_recv_amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->role_id);
          this->__isset.role_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BoxNotify::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BoxNotify");

  xfer += oprot->writeFieldBegin("nick_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("good_number", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("box_type", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->box_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("box_id", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->box_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("box_time", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->box_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("today_send_amount", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->today_send_amount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("today_recv_amount", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->today_recv_amount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("role_id", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->role_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BoxNotify &a, BoxNotify &b) {
  using ::std::swap;
  swap(a.nick_name, b.nick_name);
  swap(a.good_number, b.good_number);
  swap(a.box_type, b.box_type);
  swap(a.box_id, b.box_id);
  swap(a.box_time, b.box_time);
  swap(a.today_send_amount, b.today_send_amount);
  swap(a.today_recv_amount, b.today_recv_amount);
  swap(a.role_id, b.role_id);
  swap(a.__isset, b.__isset);
}

const char* UpdateUserStatusReq::ascii_fingerprint = "15896F1A4438B1ECBB80CEA66AD0C4C5";
const uint8_t UpdateUserStatusReq::binary_fingerprint[16] = {0x15,0x89,0x6F,0x1A,0x44,0x38,0xB1,0xEC,0xBB,0x80,0xCE,0xA6,0x6A,0xD0,0xC4,0xC5};

uint32_t UpdateUserStatusReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->status_value);
          this->__isset.status_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status_text);
          this->__isset.status_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateUserStatusReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UpdateUserStatusReq");

  xfer += oprot->writeFieldBegin("status_value", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->status_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->status_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateUserStatusReq &a, UpdateUserStatusReq &b) {
  using ::std::swap;
  swap(a.status_value, b.status_value);
  swap(a.status_text, b.status_text);
  swap(a.__isset, b.__isset);
}

const char* AccountLockReq::ascii_fingerprint = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
const uint8_t AccountLockReq::binary_fingerprint[16] = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};

uint32_t AccountLockReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->to_good_number);
          this->__isset.to_good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->to_ip);
          this->__isset.to_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->to_mac);
          this->__isset.to_mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AccountLockReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AccountLockReq");

  xfer += oprot->writeFieldBegin("to_good_number", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->to_good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_ip", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->to_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_mac", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->to_mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AccountLockReq &a, AccountLockReq &b) {
  using ::std::swap;
  swap(a.to_good_number, b.to_good_number);
  swap(a.to_ip, b.to_ip);
  swap(a.to_mac, b.to_mac);
  swap(a.__isset, b.__isset);
}

const char* GiftPrizeNotify::ascii_fingerprint = "AA3B41FF66B6A4B1E93B48B4763B04D0";
const uint8_t GiftPrizeNotify::binary_fingerprint[16] = {0xAA,0x3B,0x41,0xFF,0x66,0xB6,0xA4,0xB1,0xE9,0x3B,0x48,0xB4,0x76,0x3B,0x04,0xD0};

uint32_t GiftPrizeNotify::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->good_number);
          this->__isset.good_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_nick_name);
          this->__isset.user_nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->multiple);
          this->__isset.multiple = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->prize_gift_id);
          this->__isset.prize_gift_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->prize_amount);
          this->__isset.prize_amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->prize_multiples.clear();
            uint32_t _size40;
            ::apache::thrift::protocol::TType _etype43;
            xfer += iprot->readListBegin(_etype43, _size40);
            this->prize_multiples.resize(_size40);
            uint32_t _i44;
            for (_i44 = 0; _i44 < _size40; ++_i44)
            {
              xfer += iprot->readI16(this->prize_multiples[_i44]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.prize_multiples = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_role_icon_id);
          this->__isset.user_role_icon_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GiftPrizeNotify::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GiftPrizeNotify");

  xfer += oprot->writeFieldBegin("good_number", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->good_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_nick_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->user_nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("multiple", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->multiple);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prize_gift_id", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->prize_gift_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prize_amount", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->prize_amount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prize_multiples", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->prize_multiples.size()));
    std::vector<int16_t> ::const_iterator _iter45;
    for (_iter45 = this->prize_multiples.begin(); _iter45 != this->prize_multiples.end(); ++_iter45)
    {
      xfer += oprot->writeI16((*_iter45));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_role_icon_id", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->user_role_icon_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GiftPrizeNotify &a, GiftPrizeNotify &b) {
  using ::std::swap;
  swap(a.good_number, b.good_number);
  swap(a.user_nick_name, b.user_nick_name);
  swap(a.multiple, b.multiple);
  swap(a.prize_gift_id, b.prize_gift_id);
  swap(a.prize_amount, b.prize_amount);
  swap(a.prize_multiples, b.prize_multiples);
  swap(a.user_role_icon_id, b.user_role_icon_id);
  swap(a.__isset, b.__isset);
}

}} // namespace
