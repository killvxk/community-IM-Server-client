/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef room_server_TYPES_H
#define room_server_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "common_types.h"


namespace community { namespace room_server {

struct MessageType {
  enum type {
    MT_CONNECT_REQ = 2000,
    MT_CONNECT_RES = 2001,
    MT_ENTER_ROOM_REQ = 2002,
    MT_ENTER_ROOM_RES = 2003,
    MT_ENTER_ROOM_NOTIFY = 2004,
    MT_LEAVE_ROOM_REQ = 2005,
    MT_LEAVE_ROOM_RES = 2006,
    MT_LEAVE_ROOM_NOTIFY = 2007,
    MT_GET_ROOMINFO_REQ = 2008,
    MT_GET_ROOMINFO_RES = 2009,
    MT_GET_SERVICE_IP_REQ = 2010,
    MT_GET_SERVICE_IP_RES = 2011,
    MT_UPDATE_SERVICE_IP_NOTIFY = 2012,
    MT_GET_USER_LIST_REQ = 2013,
    MT_GET_USER_LIST_RES = 2014,
    MT_GET_MIC_LIST_REQ = 2015,
    MT_GET_MIC_LIST_RES = 2016,
    MT_UPDATE_NETWORK_STATUS_REQ = 2017,
    MT_UPDATE_NETWORK_STATUS_RES = 2018,
    MT_UPDATE_NETWORK_STATUS_NOTIFY = 2019,
    MT_GET_SPECIAL_LIST_REQ = 2020,
    MT_GET_SPECIAL_LIST_RES = 2021,
    MT_ROOMBOARD_REQ = 2022,
    MT_ROOMBOARD_RES = 2023,
    MT_UPDATE_ROOMINFO_REQ = 2024,
    MT_UPDATE_ROOMINFO_RES = 2025,
    MT_UPDATE_ROOMINFO_NOTIFY = 2026,
    MT_MEDIA_DEVICE_SETTING_REQ = 2027,
    MT_MEDIA_DEVICE_SETTING_RES = 2028,
    MT_MEDIA_DEVICE_SETTING_NOTIFY = 2029,
    MT_MEDIA_UP_REQ = 2030,
    MT_MEDIA_UP_RES = 2031,
    MT_MEDIA_UP_NOTIFY = 2032,
    MT_MEDIA_DOWN_REQ = 2033,
    MT_MEDIA_DOWN_RES = 2034,
    MT_MEDIA_DOWN_NOTIFY = 2035,
    MT_CHAT_REQ = 2036,
    MT_CHAT_RES = 2037,
    MT_CHAT_NOTIFY = 2038,
    MT_BROADCAST_REQ = 2039,
    MT_BROADCAST_RES = 2040,
    MT_BROADCAST_NOTIFY = 2041,
    MT_GIFT_REQ = 2042,
    MT_GIFT_RES = 2043,
    MT_GIFT_NOTIFY = 2044,
    MT_MULTITOUSER_GIFT_REQ = 2045,
    MT_MULTITOUSER_GIFT_RES = 2046,
    MT_MULTITOUSER_GIFT_NOTIFY = 2047,
    MT_KICKUSER_REQ = 2048,
    MT_KICKUSER_RES = 2049,
    MT_NOKICK_REQ = 2050,
    MT_NOKICK_RES = 2051,
    MT_NOKICK_NOTIFY = 2052,
    MT_ADD_BLACK_LIST_REQ = 2053,
    MT_ADD_BLACK_LIST_RES = 2054,
    MT_ADD_BLACK_LIST_NOTIFY = 2055,
    MT_REMOVE_BLACK_LIST_REQ = 2056,
    MT_REMOVE_BLACK_LIST_RES = 2057,
    MT_REMOVE_BLACK_LIST_NOTIFY = 2058,
    MT_ADD_FORBID_CHAT_LIST_REQ = 2059,
    MT_ADD_FORBID_CHAT_LIST_RES = 2060,
    MT_ADD_FORBID_CHAT_LIST_NOTIFY = 2061,
    MT_REMOVE_FORBID_CHAT_LIST_REQ = 2062,
    MT_REMOVE_FORBID_CHAT_LIST_RES = 2063,
    MT_REMVOE_FORBID_CHAT_LIST_NOTIFY = 2064,
    MT_ADD_ROOM_MANAGER_LIST_REQ = 2065,
    MT_ADD_ROOM_MANAGER_LIST_RES = 2066,
    MT_ADD_ROOM_MANAGER_LIST_NOTIFY = 2067,
    MT_REMOVE_ROOM_MANAGER_LIST_REQ = 2068,
    MT_REMOVE_ROOM_MANAGER_LIST_RES = 2069,
    MT_REMOVE_ROOM_MANAGER_LIST_NOTIFY = 2070,
    MT_VOTE_REQ = 2071,
    MT_VOTE_RES = 2072,
    MT_VOTE_NOTIFY = 2073,
    MT_ADD_FAVORITE_REQ = 2074,
    MT_ADD_FAVORITE_RES = 2075,
    MT_REMOVE_FAVORITE_REQ = 2076,
    MT_REMOVE_FAVORITE_RES = 2077,
    MT_QUERY_FAVORITE_REQ = 2078,
    MT_QUERY_FAVORITE_RES = 2079,
    MT_SWITCH_USERROLE_REQ = 2080,
    MT_SWITCH_USERROLE_RES = 2081,
    MT_SWITCH_USERROLE_NOTIFY = 2082,
    MT_SCREENSHOT_LOG_REQ = 2083,
    MT_SCREENSHOT_LOG_RES = 2084,
    MT_RESOURCE_CHANGE_NOTIFY = 2085,
    MT_BOX_REQ = 2086,
    MT_BOX_RES = 2087,
    MT_BOX_NOTIFY = 2088,
    MT_PRIZE_NOTIFY = 2089,
    MT_SYSMSG_NOTIFY = 2090,
    MT_WORLD_BROADCAST_REQ = 2091,
    MT_WORLD_BROADCAST_RES = 2092,
    MT_WORLD_BROADCAST_NOTIFY = 2093,
    MT_WORLD_GIFT_REQ = 2094,
    MT_WORLD_GIFT_RES = 2095,
    MT_WORLD_GIFT_NOTIFY = 2096,
    MT_TIMEOUT_VIDEOGIFT_NOTIFY = 2097,
    MT_SET_STAMPGIFT_NOTIFTY = 2098,
    MT_TIMEOUT_STAMPGIFT_NOTIFY = 2099,
    MT_SET_BIRTHDAY_NOTIFY = 2100,
    MT_TIMEOUT_BIRTHDAY_NOTIFY = 2101,
    MT_TIMEOUT_ROLE_NOTIFY = 2102,
    MT_USERINFO_CHANGE_NOTIFY = 2103,
    MT_SITE_PRIVATE_MESSAGE_REQ = 2104,
    MT_SITE_PRIVATE_MESSAGE_RES = 2105,
    MT_SITE_PRIVATE_MESSAGE_NOTIFY = 2106,
    MT_UPDATE_USER_STATUS_REQ = 2107,
    MT_UPDATE_USER_STATUS_RES = 2108,
    MT_UPDATE_USER_STATUS_NOTIFY = 2109
  };
};

extern const std::map<int, const char*> _MessageType_VALUES_TO_NAMES;

struct RoomInfoStatus {
  enum type {
    PENDING = 1,
    PASS = 2
  };
};

extern const std::map<int, const char*> _RoomInfoStatus_VALUES_TO_NAMES;

struct GiftShowType {
  enum type {
    SINGLE = 1,
    ROOM = 2,
    SITE = 3
  };
};

extern const std::map<int, const char*> _GiftShowType_VALUES_TO_NAMES;

struct NetworkLine {
  enum type {
    CHINA_TELECOM = 1,
    CHINA_UNICOM = 2,
    CHINA_MODILE = 3,
    EDUCATION_NETWORK = 4,
    MULTI_NETWORK = 10
  };
};

extern const std::map<int, const char*> _NetworkLine_VALUES_TO_NAMES;

struct RoomStatus {
  enum type {
    INITIAL = 0,
    NORMAL = 1,
    LOCK = 2,
    CLOSE = 3
  };
};

extern const std::map<int, const char*> _RoomStatus_VALUES_TO_NAMES;

struct RoomFlag {
  enum type {
    PROHIBIT_PRIVATE_CHAT = 1,
    PROHIBIT_PUBLIC_CHAT = 2,
    PROHIBIT_TEMPUSER_PUBLIC_CHAT = 4,
    PROHIBIT_DJ_MEDIA_UP = 8,
    PROHIBIT_ROOM_BROADCAST = 16
  };
};

extern const std::map<int, const char*> _RoomFlag_VALUES_TO_NAMES;

struct BroadcastType {
  enum type {
    NO_BROADCAST = 0,
    ONLY_SELF = 1,
    PRIVATE_MESSAGE = 2,
    ROOM_BROADCAST = 3,
    SITE_BROADCAST = 4,
    WORLD_BROADCAST = 5
  };
};

extern const std::map<int, const char*> _BroadcastType_VALUES_TO_NAMES;

struct MediaStatus {
  enum type {
    NONE = 0,
    READY = 1,
    PUBLIC_MIC = 2,
    PRIVATE_MIC = 3,
    FRIEND_MIC = 4
  };
};

extern const std::map<int, const char*> _MediaStatus_VALUES_TO_NAMES;

struct MediaAction {
  enum type {
    MEDIA_ACTION_UP = 1,
    MEDIA_ACTION_DOWN = 2
  };
};

extern const std::map<int, const char*> _MediaAction_VALUES_TO_NAMES;

struct UserStatus {
  enum type {
    OFFLINE = 0,
    ONLINE = 1,
    AWAY = 2,
    HIDE = 4
  };
};

extern const std::map<int, const char*> _UserStatus_VALUES_TO_NAMES;

struct PermissionItemType {
  enum type {
    ID0 = 0,
    ID1 = 1,
    ID2 = 2,
    ID3 = 3
  };
};

extern const std::map<int, const char*> _PermissionItemType_VALUES_TO_NAMES;

struct PermissionItemValue {
  enum type {
    NOALLOW = 0,
    ALLOW = 1,
    NEEDREPLY = 2
  };
};

extern const std::map<int, const char*> _PermissionItemValue_VALUES_TO_NAMES;

struct PermissionItem {
  enum type {
    SinglePublicChat = 1,
    PublicChat = 2,
    PrivateChat = 3,
    Dice = 4,
    SetFont = 5,
    AutoResponder = 6,
    SendEmotion = 7,
    SendMood = 8,
    SendPokeUser = 9,
    ShakeWindowTimes_Day = 10,
    PublicMIC = 11,
    PrivateMIC = 12,
    EnterFullRoom = 13,
    HideEnterRoom = 14,
    SeeHide = 15,
    WaitTimeKMoney = 16,
    SeeUserIP = 17,
    ShowIdiograph = 18,
    ShowUserIcon = 19,
    FreeDecoColor = 20,
    TipOfEnterRoom = 21,
    SendSystemBroadcast = 22,
    SendFreeSystemBroadcast = 23,
    SendRoomBroadcast = 24,
    SendFreeRoomBroadcast = 25,
    ToBeSiege = 26,
    EnterLockedRoom = 27,
    ShowBirthday = 28,
    RoomManage = 29,
    RoomManage_PublicNotice = 30,
    RoomManage_Setting = 31,
    RoomManage_QuickReply = 32,
    KickUser = 33,
    NoKickUser = 34,
    ForbidChat = 35,
    NoForbidChat = 36,
    AddRoomOwner = 37,
    DelRoomOwner = 38,
    AddViceRoomOwner = 39,
    DelViceRoomOwner = 40,
    AddRoomManager = 41,
    DelRoomManager = 42,
    AddBlacklist = 43,
    DelBlacklist = 44,
    Vote = 45,
    ForcePublicMic = 46,
    KickPublicMic = 47,
    KickPrivateMic = 48,
    KickFriendMic = 49,
    SeePublicMic = 50,
    SeePrivateMic = 51,
    SeeFriendMic = 52,
    ShieldUser = 53,
    ShieldTempUserChat = 54,
    Room_NoForbid_PrivateChat = 55,
    Room_NoForbid_PublicChat = 56,
    Room_NoForbid_MIC = 57,
    NoForbid_SendRoomBroadcast = 58,
    HideExitRoom = 59,
    RecordVideo = 60,
    ExchangeCash = 61,
    ExchangeInfraredCamera = 62,
    ShowEnterRoomTip = 63,
    ShowLevelSmallIcon_Chat = 64,
    InRoomManageList = 65,
    Room_NoForbid_TempUser_PublicChat = 66,
    VideoStreamNumber = 67,
    SeeFriendMic_Check = 68,
    FriendMIC = 69,
    SendChatInterval = 70,
    SendPokeInterval = 71,
    UserinfoSetting = 72,
    RecvGift = 73,
    SendProp = 74,
    ShowChatTime = 75,
    KickUserSoftware = 76,
    Auto_ProhibitUserIN = 79,
    Auto_OpenPriceMic = 80
  };
};

extern const std::map<int, const char*> _PermissionItem_VALUES_TO_NAMES;

struct ConsumerChannel {
  enum type {
    NORMAL_CONSUMER = 1,
    GIFTCAR = 2,
    FLIGHT_GIFT = 3,
    MULTI_TOUSER_GIFT = 4,
    WORLD_GIFT = 5,
    SLOT_MACHINE = 6,
    SEND_BOARDCAST = 7
  };
};

extern const std::map<int, const char*> _ConsumerChannel_VALUES_TO_NAMES;

struct BoxSourceType {
  enum type {
    DAY_CONSUME_PRIZE = 1,
    ACHIEVEMENT_PRIZE = 2,
    OTHER = 3
  };
};

extern const std::map<int, const char*> _BoxSourceType_VALUES_TO_NAMES;

struct PrizeType {
  enum type {
    EXP_VALUE = 1,
    KMONEY = 2,
    USER_ROLE = 3,
    DECOLOR = 4,
    BOX = 5
  };
};

extern const std::map<int, const char*> _PrizeType_VALUES_TO_NAMES;

struct BlacklistType {
  enum type {
    UNKNOW = 0,
    BREAK_LAW = 1
  };
};

extern const std::map<int, const char*> _BlacklistType_VALUES_TO_NAMES;

struct BlacklistDisposeType {
  enum type {
    KICKOUT_SITE = 1
  };
};

extern const std::map<int, const char*> _BlacklistDisposeType_VALUES_TO_NAMES;

struct RoleType {
  enum type {
    REGISTER_USER = 10,
    RECHARGE_USER = 11,
    NORMAL_MEMBER = 20,
    SENIOR_MEMBER = 21,
    DISC_JOCKEY = 30,
    NORMAL_AGENT = 40,
    GENERAL_AGENT = 50,
    SITE_MANAGER = 60,
    ROOM_ROLE = 70,
    PRIZE_ROLE = 80
  };
};

extern const std::map<int, const char*> _RoleType_VALUES_TO_NAMES;

struct GiftType {
  enum type {
    TYPE_100 = 100,
    TYPE_200 = 200,
    TYPE_210 = 210,
    TYPE_300 = 300,
    TYPE_400 = 400,
    TYPE_1100 = 1100,
    TYPE_1101 = 1101,
    TYPE_1200 = 1200,
    TYPE_1201 = 1201,
    TYPE_1300 = 1300,
    TYPE_1400 = 1400,
    TYPE_1401 = 1401,
    TYPE_1500 = 1500,
    TYPE_1510 = 1510
  };
};

extern const std::map<int, const char*> _GiftType_VALUES_TO_NAMES;

struct ChatType {
  enum type {
    PRIVATE_CHAT = 0,
    PUBLIC_CHAT = 1,
    AUTO_REPLY = 2,
    USER_MOOD = 4,
    POKE = 8,
    SHAKE_WINDOW = 16
  };
};

extern const std::map<int, const char*> _ChatType_VALUES_TO_NAMES;

struct SpecialListType {
  enum type {
    BLACK_LIST = 1,
    FORBID_CHAT_LIST = 2,
    KICK_LIST = 3,
    ROOM_OWNER_LIST = 25000,
    VICE_ROOM_OWNER_LIST = 24000,
    ROOM_MANAGER_LIST = 16000
  };
};

extern const std::map<int, const char*> _SpecialListType_VALUES_TO_NAMES;

struct VideoSizeType {
  enum type {
    SIZE_160_120 = 0,
    SIZE_176_144 = 1,
    SIZE_320_240 = 2,
    SIZE_240_176 = 3,
    SIZE_352_288 = 4,
    SIZE_640_480 = 5,
    SIZE_704_576 = 6,
    SIZE_800_600 = 7,
    SIZE_1024_768 = 8,
    SIZE_1280_720 = 9,
    SIZE_1920_1080 = 10
  };
};

extern const std::map<int, const char*> _VideoSizeType_VALUES_TO_NAMES;

struct BoxType {
  enum type {
    GOLD_BOX = 1,
    SILVER_BOX = 2
  };
};

extern const std::map<int, const char*> _BoxType_VALUES_TO_NAMES;

struct SubscribeMediaResult {
  enum type {
    NOMEDIA = 0,
    REFUSE = 1,
    ACCEPT = 2
  };
};

extern const std::map<int, const char*> _SubscribeMediaResult_VALUES_TO_NAMES;

typedef struct _RoomConnectReq__isset {
  _RoomConnectReq__isset() : room_gate_id(false), room_gate_name(false) {}
  bool room_gate_id;
  bool room_gate_name;
} _RoomConnectReq__isset;

class RoomConnectReq {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  RoomConnectReq() : room_gate_id(0), room_gate_name() {
  }

  virtual ~RoomConnectReq() throw() {}

  int32_t room_gate_id;
  std::string room_gate_name;

  _RoomConnectReq__isset __isset;

  void __set_room_gate_id(const int32_t val) {
    room_gate_id = val;
  }

  void __set_room_gate_name(const std::string& val) {
    room_gate_name = val;
  }

  bool operator == (const RoomConnectReq & rhs) const
  {
    if (!(room_gate_id == rhs.room_gate_id))
      return false;
    if (!(room_gate_name == rhs.room_gate_name))
      return false;
    return true;
  }
  bool operator != (const RoomConnectReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RoomConnectReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RoomConnectReq &a, RoomConnectReq &b);

typedef struct _MediaDeviceInfo__isset {
  _MediaDeviceInfo__isset() : video_size_type(false), video_height(false), video_width(false), video_frame_rate(false), audio_sample_rate(false) {}
  bool video_size_type;
  bool video_height;
  bool video_width;
  bool video_frame_rate;
  bool audio_sample_rate;
} _MediaDeviceInfo__isset;

class MediaDeviceInfo {
 public:

  static const char* ascii_fingerprint; // = "B9231DEF5E3DE68E553573D4630F2F5B";
  static const uint8_t binary_fingerprint[16]; // = {0xB9,0x23,0x1D,0xEF,0x5E,0x3D,0xE6,0x8E,0x55,0x35,0x73,0xD4,0x63,0x0F,0x2F,0x5B};

  MediaDeviceInfo() : video_size_type(0), video_height(0), video_width(0), video_frame_rate(0), audio_sample_rate(0) {
  }

  virtual ~MediaDeviceInfo() throw() {}

  int16_t video_size_type;
  int32_t video_height;
  int32_t video_width;
  int16_t video_frame_rate;
  int32_t audio_sample_rate;

  _MediaDeviceInfo__isset __isset;

  void __set_video_size_type(const int16_t val) {
    video_size_type = val;
  }

  void __set_video_height(const int32_t val) {
    video_height = val;
  }

  void __set_video_width(const int32_t val) {
    video_width = val;
  }

  void __set_video_frame_rate(const int16_t val) {
    video_frame_rate = val;
  }

  void __set_audio_sample_rate(const int32_t val) {
    audio_sample_rate = val;
  }

  bool operator == (const MediaDeviceInfo & rhs) const
  {
    if (!(video_size_type == rhs.video_size_type))
      return false;
    if (!(video_height == rhs.video_height))
      return false;
    if (!(video_width == rhs.video_width))
      return false;
    if (!(video_frame_rate == rhs.video_frame_rate))
      return false;
    if (!(audio_sample_rate == rhs.audio_sample_rate))
      return false;
    return true;
  }
  bool operator != (const MediaDeviceInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MediaDeviceInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MediaDeviceInfo &a, MediaDeviceInfo &b);

typedef struct _UserRole__isset {
  _UserRole__isset() : role_id(false), role_id_endtime(false) {}
  bool role_id;
  bool role_id_endtime;
} _UserRole__isset;

class UserRole {
 public:

  static const char* ascii_fingerprint; // = "C25B226C0437EA93A910AE3DEFEFCBF8";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0x5B,0x22,0x6C,0x04,0x37,0xEA,0x93,0xA9,0x10,0xAE,0x3D,0xEF,0xEF,0xCB,0xF8};

  UserRole() : role_id(0), role_id_endtime(0) {
  }

  virtual ~UserRole() throw() {}

  int16_t role_id;
  int64_t role_id_endtime;

  _UserRole__isset __isset;

  void __set_role_id(const int16_t val) {
    role_id = val;
  }

  void __set_role_id_endtime(const int64_t val) {
    role_id_endtime = val;
  }

  bool operator == (const UserRole & rhs) const
  {
    if (!(role_id == rhs.role_id))
      return false;
    if (!(role_id_endtime == rhs.role_id_endtime))
      return false;
    return true;
  }
  bool operator != (const UserRole &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserRole & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UserRole &a, UserRole &b);

typedef struct _MicInfo__isset {
  _MicInfo__isset() : user_id(false), media_pos(false), media_time(false), media_device_info(false) {}
  bool user_id;
  bool media_pos;
  bool media_time;
  bool media_device_info;
} _MicInfo__isset;

class MicInfo {
 public:

  static const char* ascii_fingerprint; // = "73A3DB25660BF8948BDA13F27E2CC9B4";
  static const uint8_t binary_fingerprint[16]; // = {0x73,0xA3,0xDB,0x25,0x66,0x0B,0xF8,0x94,0x8B,0xDA,0x13,0xF2,0x7E,0x2C,0xC9,0xB4};

  MicInfo() : user_id(0), media_pos(0), media_time(0) {
  }

  virtual ~MicInfo() throw() {}

  int32_t user_id;
  int16_t media_pos;
  int64_t media_time;
  MediaDeviceInfo media_device_info;

  _MicInfo__isset __isset;

  void __set_user_id(const int32_t val) {
    user_id = val;
  }

  void __set_media_pos(const int16_t val) {
    media_pos = val;
  }

  void __set_media_time(const int64_t val) {
    media_time = val;
  }

  void __set_media_device_info(const MediaDeviceInfo& val) {
    media_device_info = val;
    __isset.media_device_info = true;
  }

  bool operator == (const MicInfo & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(media_pos == rhs.media_pos))
      return false;
    if (!(media_time == rhs.media_time))
      return false;
    if (__isset.media_device_info != rhs.__isset.media_device_info)
      return false;
    else if (__isset.media_device_info && !(media_device_info == rhs.media_device_info))
      return false;
    return true;
  }
  bool operator != (const MicInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MicInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MicInfo &a, MicInfo &b);

typedef struct _RoomInfo__isset {
  _RoomInfo__isset() : room_id(false), room_name(false), room_flags(false), room_theme(false), room_broadinfo(false), recharge_broadinfo(false), welcome_phrase(false), is_change_password(false), password(false), is_change_image(false), room_image_url(false), room_status(false), room_desc(false), owner_user_id(false), owner_good_number(false), max_count(false), room_broadinfo_status(false), recharge_broadinfo_status(false), welcome_phrase_status(false), room_broadinfo_minutes(false), recharge_broadinfo_minutes(false), welcome_phrase_minutes(false) {}
  bool room_id;
  bool room_name;
  bool room_flags;
  bool room_theme;
  bool room_broadinfo;
  bool recharge_broadinfo;
  bool welcome_phrase;
  bool is_change_password;
  bool password;
  bool is_change_image;
  bool room_image_url;
  bool room_status;
  bool room_desc;
  bool owner_user_id;
  bool owner_good_number;
  bool max_count;
  bool room_broadinfo_status;
  bool recharge_broadinfo_status;
  bool welcome_phrase_status;
  bool room_broadinfo_minutes;
  bool recharge_broadinfo_minutes;
  bool welcome_phrase_minutes;
} _RoomInfo__isset;

class RoomInfo {
 public:

  static const char* ascii_fingerprint; // = "9C671EF6AC644763AE87969698683E14";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x67,0x1E,0xF6,0xAC,0x64,0x47,0x63,0xAE,0x87,0x96,0x96,0x98,0x68,0x3E,0x14};

  RoomInfo() : room_id(0), room_name(), room_flags(0), room_theme(), room_broadinfo(), recharge_broadinfo(), welcome_phrase(), is_change_password(0), password(), is_change_image(0), room_image_url(), room_status(0), room_desc(), owner_user_id(0), owner_good_number(0), max_count(0), room_broadinfo_status(0), recharge_broadinfo_status(0), welcome_phrase_status(0), room_broadinfo_minutes(0), recharge_broadinfo_minutes(0), welcome_phrase_minutes(0) {
  }

  virtual ~RoomInfo() throw() {}

  int32_t room_id;
  std::string room_name;
  int32_t room_flags;
  std::string room_theme;
  std::string room_broadinfo;
  std::string recharge_broadinfo;
  std::string welcome_phrase;
  bool is_change_password;
  std::string password;
  bool is_change_image;
  std::string room_image_url;
  int16_t room_status;
  std::string room_desc;
  int32_t owner_user_id;
  int32_t owner_good_number;
  int32_t max_count;
  int16_t room_broadinfo_status;
  int16_t recharge_broadinfo_status;
  int16_t welcome_phrase_status;
  int16_t room_broadinfo_minutes;
  int16_t recharge_broadinfo_minutes;
  int16_t welcome_phrase_minutes;

  _RoomInfo__isset __isset;

  void __set_room_id(const int32_t val) {
    room_id = val;
  }

  void __set_room_name(const std::string& val) {
    room_name = val;
  }

  void __set_room_flags(const int32_t val) {
    room_flags = val;
  }

  void __set_room_theme(const std::string& val) {
    room_theme = val;
  }

  void __set_room_broadinfo(const std::string& val) {
    room_broadinfo = val;
  }

  void __set_recharge_broadinfo(const std::string& val) {
    recharge_broadinfo = val;
  }

  void __set_welcome_phrase(const std::string& val) {
    welcome_phrase = val;
  }

  void __set_is_change_password(const bool val) {
    is_change_password = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  void __set_is_change_image(const bool val) {
    is_change_image = val;
  }

  void __set_room_image_url(const std::string& val) {
    room_image_url = val;
  }

  void __set_room_status(const int16_t val) {
    room_status = val;
  }

  void __set_room_desc(const std::string& val) {
    room_desc = val;
  }

  void __set_owner_user_id(const int32_t val) {
    owner_user_id = val;
  }

  void __set_owner_good_number(const int32_t val) {
    owner_good_number = val;
  }

  void __set_max_count(const int32_t val) {
    max_count = val;
  }

  void __set_room_broadinfo_status(const int16_t val) {
    room_broadinfo_status = val;
  }

  void __set_recharge_broadinfo_status(const int16_t val) {
    recharge_broadinfo_status = val;
  }

  void __set_welcome_phrase_status(const int16_t val) {
    welcome_phrase_status = val;
  }

  void __set_room_broadinfo_minutes(const int16_t val) {
    room_broadinfo_minutes = val;
  }

  void __set_recharge_broadinfo_minutes(const int16_t val) {
    recharge_broadinfo_minutes = val;
  }

  void __set_welcome_phrase_minutes(const int16_t val) {
    welcome_phrase_minutes = val;
  }

  bool operator == (const RoomInfo & rhs) const
  {
    if (!(room_id == rhs.room_id))
      return false;
    if (!(room_name == rhs.room_name))
      return false;
    if (!(room_flags == rhs.room_flags))
      return false;
    if (!(room_theme == rhs.room_theme))
      return false;
    if (!(room_broadinfo == rhs.room_broadinfo))
      return false;
    if (!(recharge_broadinfo == rhs.recharge_broadinfo))
      return false;
    if (!(welcome_phrase == rhs.welcome_phrase))
      return false;
    if (!(is_change_password == rhs.is_change_password))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(is_change_image == rhs.is_change_image))
      return false;
    if (!(room_image_url == rhs.room_image_url))
      return false;
    if (!(room_status == rhs.room_status))
      return false;
    if (!(room_desc == rhs.room_desc))
      return false;
    if (!(owner_user_id == rhs.owner_user_id))
      return false;
    if (!(owner_good_number == rhs.owner_good_number))
      return false;
    if (!(max_count == rhs.max_count))
      return false;
    if (!(room_broadinfo_status == rhs.room_broadinfo_status))
      return false;
    if (!(recharge_broadinfo_status == rhs.recharge_broadinfo_status))
      return false;
    if (!(welcome_phrase_status == rhs.welcome_phrase_status))
      return false;
    if (!(room_broadinfo_minutes == rhs.room_broadinfo_minutes))
      return false;
    if (!(recharge_broadinfo_minutes == rhs.recharge_broadinfo_minutes))
      return false;
    if (!(welcome_phrase_minutes == rhs.welcome_phrase_minutes))
      return false;
    return true;
  }
  bool operator != (const RoomInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RoomInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RoomInfo &a, RoomInfo &b);

typedef struct _ServiceIPInfo__isset {
  _ServiceIPInfo__isset() : video_service_ip1(false), video_service_port1(false), video_service_ip2(false), video_service_port2(false), video_service_ip3(false), video_service_port3(false), audio_service_ip(false), audio_service_port(false), audio_service_ip2(false), audio_service_port2(false), audio_service_ip3(false), audio_service_port3(false), image_service_ip(false), image_service_port(false), screenshot_service_ip(false), screenshot_service_port(false) {}
  bool video_service_ip1;
  bool video_service_port1;
  bool video_service_ip2;
  bool video_service_port2;
  bool video_service_ip3;
  bool video_service_port3;
  bool audio_service_ip;
  bool audio_service_port;
  bool audio_service_ip2;
  bool audio_service_port2;
  bool audio_service_ip3;
  bool audio_service_port3;
  bool image_service_ip;
  bool image_service_port;
  bool screenshot_service_ip;
  bool screenshot_service_port;
} _ServiceIPInfo__isset;

class ServiceIPInfo {
 public:

  static const char* ascii_fingerprint; // = "D65EA1FAB5289383C2B96CE867AB43C0";
  static const uint8_t binary_fingerprint[16]; // = {0xD6,0x5E,0xA1,0xFA,0xB5,0x28,0x93,0x83,0xC2,0xB9,0x6C,0xE8,0x67,0xAB,0x43,0xC0};

  ServiceIPInfo() : video_service_ip1(), video_service_port1(0), video_service_ip2(), video_service_port2(0), video_service_ip3(), video_service_port3(0), audio_service_ip(), audio_service_port(0), audio_service_ip2(), audio_service_port2(0), audio_service_ip3(), audio_service_port3(0), image_service_ip(), image_service_port(0), screenshot_service_ip(), screenshot_service_port(0) {
  }

  virtual ~ServiceIPInfo() throw() {}

  std::string video_service_ip1;
  int16_t video_service_port1;
  std::string video_service_ip2;
  int16_t video_service_port2;
  std::string video_service_ip3;
  int16_t video_service_port3;
  std::string audio_service_ip;
  int16_t audio_service_port;
  std::string audio_service_ip2;
  int16_t audio_service_port2;
  std::string audio_service_ip3;
  int16_t audio_service_port3;
  std::string image_service_ip;
  int16_t image_service_port;
  std::string screenshot_service_ip;
  int16_t screenshot_service_port;

  _ServiceIPInfo__isset __isset;

  void __set_video_service_ip1(const std::string& val) {
    video_service_ip1 = val;
  }

  void __set_video_service_port1(const int16_t val) {
    video_service_port1 = val;
  }

  void __set_video_service_ip2(const std::string& val) {
    video_service_ip2 = val;
  }

  void __set_video_service_port2(const int16_t val) {
    video_service_port2 = val;
  }

  void __set_video_service_ip3(const std::string& val) {
    video_service_ip3 = val;
  }

  void __set_video_service_port3(const int16_t val) {
    video_service_port3 = val;
  }

  void __set_audio_service_ip(const std::string& val) {
    audio_service_ip = val;
  }

  void __set_audio_service_port(const int16_t val) {
    audio_service_port = val;
  }

  void __set_audio_service_ip2(const std::string& val) {
    audio_service_ip2 = val;
  }

  void __set_audio_service_port2(const int16_t val) {
    audio_service_port2 = val;
  }

  void __set_audio_service_ip3(const std::string& val) {
    audio_service_ip3 = val;
  }

  void __set_audio_service_port3(const int16_t val) {
    audio_service_port3 = val;
  }

  void __set_image_service_ip(const std::string& val) {
    image_service_ip = val;
  }

  void __set_image_service_port(const int16_t val) {
    image_service_port = val;
  }

  void __set_screenshot_service_ip(const std::string& val) {
    screenshot_service_ip = val;
  }

  void __set_screenshot_service_port(const int16_t val) {
    screenshot_service_port = val;
  }

  bool operator == (const ServiceIPInfo & rhs) const
  {
    if (!(video_service_ip1 == rhs.video_service_ip1))
      return false;
    if (!(video_service_port1 == rhs.video_service_port1))
      return false;
    if (!(video_service_ip2 == rhs.video_service_ip2))
      return false;
    if (!(video_service_port2 == rhs.video_service_port2))
      return false;
    if (!(video_service_ip3 == rhs.video_service_ip3))
      return false;
    if (!(video_service_port3 == rhs.video_service_port3))
      return false;
    if (!(audio_service_ip == rhs.audio_service_ip))
      return false;
    if (!(audio_service_port == rhs.audio_service_port))
      return false;
    if (!(audio_service_ip2 == rhs.audio_service_ip2))
      return false;
    if (!(audio_service_port2 == rhs.audio_service_port2))
      return false;
    if (!(audio_service_ip3 == rhs.audio_service_ip3))
      return false;
    if (!(audio_service_port3 == rhs.audio_service_port3))
      return false;
    if (!(image_service_ip == rhs.image_service_ip))
      return false;
    if (!(image_service_port == rhs.image_service_port))
      return false;
    if (!(screenshot_service_ip == rhs.screenshot_service_ip))
      return false;
    if (!(screenshot_service_port == rhs.screenshot_service_port))
      return false;
    return true;
  }
  bool operator != (const ServiceIPInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceIPInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ServiceIPInfo &a, ServiceIPInfo &b);

typedef struct _EnterRoomReq__isset {
  _EnterRoomReq__isset() : room_password(false), is_robot(false), user_status(false), media_status(false), network_line_id(false), session_ticket(false) {}
  bool room_password;
  bool is_robot;
  bool user_status;
  bool media_status;
  bool network_line_id;
  bool session_ticket;
} _EnterRoomReq__isset;

class EnterRoomReq {
 public:

  static const char* ascii_fingerprint; // = "CA183997EDF29A0984A331F9BB24B5A9";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0x18,0x39,0x97,0xED,0xF2,0x9A,0x09,0x84,0xA3,0x31,0xF9,0xBB,0x24,0xB5,0xA9};

  EnterRoomReq() : room_password(), is_robot(0), user_status(0), media_status(0), network_line_id(0) {
  }

  virtual ~EnterRoomReq() throw() {}

  std::string room_password;
  bool is_robot;
  int16_t user_status;
  int16_t media_status;
  int16_t network_line_id;
   ::community::common::SessionTicket session_ticket;

  _EnterRoomReq__isset __isset;

  void __set_room_password(const std::string& val) {
    room_password = val;
  }

  void __set_is_robot(const bool val) {
    is_robot = val;
  }

  void __set_user_status(const int16_t val) {
    user_status = val;
  }

  void __set_media_status(const int16_t val) {
    media_status = val;
  }

  void __set_network_line_id(const int16_t val) {
    network_line_id = val;
  }

  void __set_session_ticket(const  ::community::common::SessionTicket& val) {
    session_ticket = val;
  }

  bool operator == (const EnterRoomReq & rhs) const
  {
    if (!(room_password == rhs.room_password))
      return false;
    if (!(is_robot == rhs.is_robot))
      return false;
    if (!(user_status == rhs.user_status))
      return false;
    if (!(media_status == rhs.media_status))
      return false;
    if (!(network_line_id == rhs.network_line_id))
      return false;
    if (!(session_ticket == rhs.session_ticket))
      return false;
    return true;
  }
  bool operator != (const EnterRoomReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EnterRoomReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EnterRoomReq &a, EnterRoomReq &b);

typedef struct _EnterRoomRes__isset {
  _EnterRoomRes__isset() : error_code(false), error_text(false), room_info(false) {}
  bool error_code;
  bool error_text;
  bool room_info;
} _EnterRoomRes__isset;

class EnterRoomRes {
 public:

  static const char* ascii_fingerprint; // = "3768E6F870C347A1A6C9FA335601848E";
  static const uint8_t binary_fingerprint[16]; // = {0x37,0x68,0xE6,0xF8,0x70,0xC3,0x47,0xA1,0xA6,0xC9,0xFA,0x33,0x56,0x01,0x84,0x8E};

  EnterRoomRes() : error_code(0), error_text() {
  }

  virtual ~EnterRoomRes() throw() {}

  int16_t error_code;
  std::string error_text;
  RoomInfo room_info;

  _EnterRoomRes__isset __isset;

  void __set_error_code(const int16_t val) {
    error_code = val;
  }

  void __set_error_text(const std::string& val) {
    error_text = val;
  }

  void __set_room_info(const RoomInfo& val) {
    room_info = val;
  }

  bool operator == (const EnterRoomRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    if (!(room_info == rhs.room_info))
      return false;
    return true;
  }
  bool operator != (const EnterRoomRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EnterRoomRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EnterRoomRes &a, EnterRoomRes &b);

typedef struct _CheckPasswordReq__isset {
  _CheckPasswordReq__isset() : password(false) {}
  bool password;
} _CheckPasswordReq__isset;

class CheckPasswordReq {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  CheckPasswordReq() : password() {
  }

  virtual ~CheckPasswordReq() throw() {}

  std::string password;

  _CheckPasswordReq__isset __isset;

  void __set_password(const std::string& val) {
    password = val;
  }

  bool operator == (const CheckPasswordReq & rhs) const
  {
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const CheckPasswordReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CheckPasswordReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CheckPasswordReq &a, CheckPasswordReq &b);

typedef struct _GetRoomInfoRes__isset {
  _GetRoomInfoRes__isset() : error_code(false), error_text(false), room_info(false) {}
  bool error_code;
  bool error_text;
  bool room_info;
} _GetRoomInfoRes__isset;

class GetRoomInfoRes {
 public:

  static const char* ascii_fingerprint; // = "3768E6F870C347A1A6C9FA335601848E";
  static const uint8_t binary_fingerprint[16]; // = {0x37,0x68,0xE6,0xF8,0x70,0xC3,0x47,0xA1,0xA6,0xC9,0xFA,0x33,0x56,0x01,0x84,0x8E};

  GetRoomInfoRes() : error_code(0), error_text() {
  }

  virtual ~GetRoomInfoRes() throw() {}

  int16_t error_code;
  std::string error_text;
  RoomInfo room_info;

  _GetRoomInfoRes__isset __isset;

  void __set_error_code(const int16_t val) {
    error_code = val;
  }

  void __set_error_text(const std::string& val) {
    error_text = val;
  }

  void __set_room_info(const RoomInfo& val) {
    room_info = val;
  }

  bool operator == (const GetRoomInfoRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    if (!(room_info == rhs.room_info))
      return false;
    return true;
  }
  bool operator != (const GetRoomInfoRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetRoomInfoRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetRoomInfoRes &a, GetRoomInfoRes &b);

typedef struct _GetServiceIPRes__isset {
  _GetServiceIPRes__isset() : error_code(false), error_text(false), service_ip_info(false) {}
  bool error_code;
  bool error_text;
  bool service_ip_info;
} _GetServiceIPRes__isset;

class GetServiceIPRes {
 public:

  static const char* ascii_fingerprint; // = "6FB7EA8EFD7E7604085BBAE9F5F598D8";
  static const uint8_t binary_fingerprint[16]; // = {0x6F,0xB7,0xEA,0x8E,0xFD,0x7E,0x76,0x04,0x08,0x5B,0xBA,0xE9,0xF5,0xF5,0x98,0xD8};

  GetServiceIPRes() : error_code(0), error_text() {
  }

  virtual ~GetServiceIPRes() throw() {}

  int16_t error_code;
  std::string error_text;
  ServiceIPInfo service_ip_info;

  _GetServiceIPRes__isset __isset;

  void __set_error_code(const int16_t val) {
    error_code = val;
  }

  void __set_error_text(const std::string& val) {
    error_text = val;
  }

  void __set_service_ip_info(const ServiceIPInfo& val) {
    service_ip_info = val;
  }

  bool operator == (const GetServiceIPRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    if (!(service_ip_info == rhs.service_ip_info))
      return false;
    return true;
  }
  bool operator != (const GetServiceIPRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetServiceIPRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetServiceIPRes &a, GetServiceIPRes &b);

typedef struct _GetUserListRes__isset {
  _GetUserListRes__isset() : error_code(false), error_text(false), user_count(false), user_list(false) {}
  bool error_code;
  bool error_text;
  bool user_count;
  bool user_list;
} _GetUserListRes__isset;

class GetUserListRes {
 public:

  static const char* ascii_fingerprint; // = "FEF7A5F2FB96490153E9C068494411FD";
  static const uint8_t binary_fingerprint[16]; // = {0xFE,0xF7,0xA5,0xF2,0xFB,0x96,0x49,0x01,0x53,0xE9,0xC0,0x68,0x49,0x44,0x11,0xFD};

  GetUserListRes() : error_code(0), error_text(), user_count(0) {
  }

  virtual ~GetUserListRes() throw() {}

  int16_t error_code;
  std::string error_text;
  int32_t user_count;
  std::vector< ::community::common::UserInfo>  user_list;

  _GetUserListRes__isset __isset;

  void __set_error_code(const int16_t val) {
    error_code = val;
  }

  void __set_error_text(const std::string& val) {
    error_text = val;
  }

  void __set_user_count(const int32_t val) {
    user_count = val;
  }

  void __set_user_list(const std::vector< ::community::common::UserInfo> & val) {
    user_list = val;
  }

  bool operator == (const GetUserListRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    if (!(user_count == rhs.user_count))
      return false;
    if (!(user_list == rhs.user_list))
      return false;
    return true;
  }
  bool operator != (const GetUserListRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetUserListRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetUserListRes &a, GetUserListRes &b);

typedef struct _GetMicUserListRes__isset {
  _GetMicUserListRes__isset() : error_code(false), error_text(false), mic_list(false) {}
  bool error_code;
  bool error_text;
  bool mic_list;
} _GetMicUserListRes__isset;

class GetMicUserListRes {
 public:

  static const char* ascii_fingerprint; // = "12A48BCCDC716CBBD1C50EDA6F5DF63B";
  static const uint8_t binary_fingerprint[16]; // = {0x12,0xA4,0x8B,0xCC,0xDC,0x71,0x6C,0xBB,0xD1,0xC5,0x0E,0xDA,0x6F,0x5D,0xF6,0x3B};

  GetMicUserListRes() : error_code(0), error_text() {
  }

  virtual ~GetMicUserListRes() throw() {}

  int16_t error_code;
  std::string error_text;
  std::vector<MicInfo>  mic_list;

  _GetMicUserListRes__isset __isset;

  void __set_error_code(const int16_t val) {
    error_code = val;
  }

  void __set_error_text(const std::string& val) {
    error_text = val;
  }

  void __set_mic_list(const std::vector<MicInfo> & val) {
    mic_list = val;
  }

  bool operator == (const GetMicUserListRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    if (!(mic_list == rhs.mic_list))
      return false;
    return true;
  }
  bool operator != (const GetMicUserListRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetMicUserListRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetMicUserListRes &a, GetMicUserListRes &b);

typedef struct _UpdateNetworkStatusReq__isset {
  _UpdateNetworkStatusReq__isset() : network_status_level(false), update_time(false) {}
  bool network_status_level;
  bool update_time;
} _UpdateNetworkStatusReq__isset;

class UpdateNetworkStatusReq {
 public:

  static const char* ascii_fingerprint; // = "C25B226C0437EA93A910AE3DEFEFCBF8";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0x5B,0x22,0x6C,0x04,0x37,0xEA,0x93,0xA9,0x10,0xAE,0x3D,0xEF,0xEF,0xCB,0xF8};

  UpdateNetworkStatusReq() : network_status_level(0), update_time(0) {
  }

  virtual ~UpdateNetworkStatusReq() throw() {}

  int16_t network_status_level;
  int64_t update_time;

  _UpdateNetworkStatusReq__isset __isset;

  void __set_network_status_level(const int16_t val) {
    network_status_level = val;
  }

  void __set_update_time(const int64_t val) {
    update_time = val;
  }

  bool operator == (const UpdateNetworkStatusReq & rhs) const
  {
    if (!(network_status_level == rhs.network_status_level))
      return false;
    if (!(update_time == rhs.update_time))
      return false;
    return true;
  }
  bool operator != (const UpdateNetworkStatusReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateNetworkStatusReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UpdateNetworkStatusReq &a, UpdateNetworkStatusReq &b);

typedef struct _SpecialUserinfo__isset {
  _SpecialUserinfo__isset() : user_id(false), nick_name(false), good_number(false), special_list_type(false) {}
  bool user_id;
  bool nick_name;
  bool good_number;
  bool special_list_type;
} _SpecialUserinfo__isset;

class SpecialUserinfo {
 public:

  static const char* ascii_fingerprint; // = "DA87EE38A905F5EAF4EE544697108D5F";
  static const uint8_t binary_fingerprint[16]; // = {0xDA,0x87,0xEE,0x38,0xA9,0x05,0xF5,0xEA,0xF4,0xEE,0x54,0x46,0x97,0x10,0x8D,0x5F};

  SpecialUserinfo() : user_id(0), nick_name(), good_number(0), special_list_type(0) {
  }

  virtual ~SpecialUserinfo() throw() {}

  int32_t user_id;
  std::string nick_name;
  int32_t good_number;
  int16_t special_list_type;

  _SpecialUserinfo__isset __isset;

  void __set_user_id(const int32_t val) {
    user_id = val;
  }

  void __set_nick_name(const std::string& val) {
    nick_name = val;
  }

  void __set_good_number(const int32_t val) {
    good_number = val;
  }

  void __set_special_list_type(const int16_t val) {
    special_list_type = val;
  }

  bool operator == (const SpecialUserinfo & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(nick_name == rhs.nick_name))
      return false;
    if (!(good_number == rhs.good_number))
      return false;
    if (!(special_list_type == rhs.special_list_type))
      return false;
    return true;
  }
  bool operator != (const SpecialUserinfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SpecialUserinfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SpecialUserinfo &a, SpecialUserinfo &b);

typedef struct _GetSpecialListRes__isset {
  _GetSpecialListRes__isset() : error_code(false), error_text(false), special_user_count(false), special_user_list(false) {}
  bool error_code;
  bool error_text;
  bool special_user_count;
  bool special_user_list;
} _GetSpecialListRes__isset;

class GetSpecialListRes {
 public:

  static const char* ascii_fingerprint; // = "A5D6A3281440D079B9176E80CBF86CE2";
  static const uint8_t binary_fingerprint[16]; // = {0xA5,0xD6,0xA3,0x28,0x14,0x40,0xD0,0x79,0xB9,0x17,0x6E,0x80,0xCB,0xF8,0x6C,0xE2};

  GetSpecialListRes() : error_code(0), error_text(), special_user_count(0) {
  }

  virtual ~GetSpecialListRes() throw() {}

  int16_t error_code;
  std::string error_text;
  int32_t special_user_count;
  std::vector<SpecialUserinfo>  special_user_list;

  _GetSpecialListRes__isset __isset;

  void __set_error_code(const int16_t val) {
    error_code = val;
  }

  void __set_error_text(const std::string& val) {
    error_text = val;
  }

  void __set_special_user_count(const int32_t val) {
    special_user_count = val;
  }

  void __set_special_user_list(const std::vector<SpecialUserinfo> & val) {
    special_user_list = val;
  }

  bool operator == (const GetSpecialListRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    if (!(special_user_count == rhs.special_user_count))
      return false;
    if (!(special_user_list == rhs.special_user_list))
      return false;
    return true;
  }
  bool operator != (const GetSpecialListRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSpecialListRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetSpecialListRes &a, GetSpecialListRes &b);

typedef struct _Biggift__isset {
  _Biggift__isset() : gift_id(false), gift_type_id(false), gift_quantity(false), is_biggift(false), room_id(false), room_name(false), from_user_id(false), from_good_number(false), from_username(false), from_amount(false), to_user_id(false), to_good_number(false), to_username(false), to_amount(false), trade_id(false), create_timestamp(false) {}
  bool gift_id;
  bool gift_type_id;
  bool gift_quantity;
  bool is_biggift;
  bool room_id;
  bool room_name;
  bool from_user_id;
  bool from_good_number;
  bool from_username;
  bool from_amount;
  bool to_user_id;
  bool to_good_number;
  bool to_username;
  bool to_amount;
  bool trade_id;
  bool create_timestamp;
} _Biggift__isset;

class Biggift {
 public:

  static const char* ascii_fingerprint; // = "8AA16F84632CF88CD428F1E0130F7738";
  static const uint8_t binary_fingerprint[16]; // = {0x8A,0xA1,0x6F,0x84,0x63,0x2C,0xF8,0x8C,0xD4,0x28,0xF1,0xE0,0x13,0x0F,0x77,0x38};

  Biggift() : gift_id(0), gift_type_id(0), gift_quantity(0), is_biggift(0), room_id(0), room_name(), from_user_id(0), from_good_number(0), from_username(), from_amount(0), to_user_id(0), to_good_number(0), to_username(), to_amount(0), trade_id(0), create_timestamp(0) {
  }

  virtual ~Biggift() throw() {}

  int32_t gift_id;
  int16_t gift_type_id;
  int32_t gift_quantity;
  int16_t is_biggift;
  int32_t room_id;
  std::string room_name;
  int32_t from_user_id;
  int32_t from_good_number;
  std::string from_username;
  int32_t from_amount;
  int32_t to_user_id;
  int32_t to_good_number;
  std::string to_username;
  int32_t to_amount;
  int32_t trade_id;
  int64_t create_timestamp;

  _Biggift__isset __isset;

  void __set_gift_id(const int32_t val) {
    gift_id = val;
  }

  void __set_gift_type_id(const int16_t val) {
    gift_type_id = val;
  }

  void __set_gift_quantity(const int32_t val) {
    gift_quantity = val;
  }

  void __set_is_biggift(const int16_t val) {
    is_biggift = val;
  }

  void __set_room_id(const int32_t val) {
    room_id = val;
  }

  void __set_room_name(const std::string& val) {
    room_name = val;
  }

  void __set_from_user_id(const int32_t val) {
    from_user_id = val;
  }

  void __set_from_good_number(const int32_t val) {
    from_good_number = val;
  }

  void __set_from_username(const std::string& val) {
    from_username = val;
  }

  void __set_from_amount(const int32_t val) {
    from_amount = val;
  }

  void __set_to_user_id(const int32_t val) {
    to_user_id = val;
  }

  void __set_to_good_number(const int32_t val) {
    to_good_number = val;
  }

  void __set_to_username(const std::string& val) {
    to_username = val;
  }

  void __set_to_amount(const int32_t val) {
    to_amount = val;
  }

  void __set_trade_id(const int32_t val) {
    trade_id = val;
  }

  void __set_create_timestamp(const int64_t val) {
    create_timestamp = val;
  }

  bool operator == (const Biggift & rhs) const
  {
    if (!(gift_id == rhs.gift_id))
      return false;
    if (!(gift_type_id == rhs.gift_type_id))
      return false;
    if (!(gift_quantity == rhs.gift_quantity))
      return false;
    if (!(is_biggift == rhs.is_biggift))
      return false;
    if (!(room_id == rhs.room_id))
      return false;
    if (!(room_name == rhs.room_name))
      return false;
    if (!(from_user_id == rhs.from_user_id))
      return false;
    if (!(from_good_number == rhs.from_good_number))
      return false;
    if (!(from_username == rhs.from_username))
      return false;
    if (!(from_amount == rhs.from_amount))
      return false;
    if (!(to_user_id == rhs.to_user_id))
      return false;
    if (!(to_good_number == rhs.to_good_number))
      return false;
    if (!(to_username == rhs.to_username))
      return false;
    if (!(to_amount == rhs.to_amount))
      return false;
    if (!(trade_id == rhs.trade_id))
      return false;
    if (!(create_timestamp == rhs.create_timestamp))
      return false;
    return true;
  }
  bool operator != (const Biggift &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Biggift & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Biggift &a, Biggift &b);

typedef struct _GetBiggiftRes__isset {
  _GetBiggiftRes__isset() : error_code(false), error_text(false), biggift_count(false), biggift_list(false) {}
  bool error_code;
  bool error_text;
  bool biggift_count;
  bool biggift_list;
} _GetBiggiftRes__isset;

class GetBiggiftRes {
 public:

  static const char* ascii_fingerprint; // = "85AA2BAAF10746EC0D00A530827D4482";
  static const uint8_t binary_fingerprint[16]; // = {0x85,0xAA,0x2B,0xAA,0xF1,0x07,0x46,0xEC,0x0D,0x00,0xA5,0x30,0x82,0x7D,0x44,0x82};

  GetBiggiftRes() : error_code(0), error_text(), biggift_count(0) {
  }

  virtual ~GetBiggiftRes() throw() {}

  int16_t error_code;
  std::string error_text;
  int32_t biggift_count;
  std::vector<Biggift>  biggift_list;

  _GetBiggiftRes__isset __isset;

  void __set_error_code(const int16_t val) {
    error_code = val;
  }

  void __set_error_text(const std::string& val) {
    error_text = val;
  }

  void __set_biggift_count(const int32_t val) {
    biggift_count = val;
  }

  void __set_biggift_list(const std::vector<Biggift> & val) {
    biggift_list = val;
  }

  bool operator == (const GetBiggiftRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    if (!(biggift_count == rhs.biggift_count))
      return false;
    if (!(biggift_list == rhs.biggift_list))
      return false;
    return true;
  }
  bool operator != (const GetBiggiftRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetBiggiftRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetBiggiftRes &a, GetBiggiftRes &b);

typedef struct _GetSiegeRes__isset {
  _GetSiegeRes__isset() : error_code(false), error_text(false), trade_id(false), room_id(false), room_name(false), from_user_id(false), from_good_number(false), from_username(false), from_amount(false), to_user_id(false), to_good_number(false), to_username(false), to_amount(false), gift_id(false), gift_type_id(false), gift_quantity(false), create_timestamp(false) {}
  bool error_code;
  bool error_text;
  bool trade_id;
  bool room_id;
  bool room_name;
  bool from_user_id;
  bool from_good_number;
  bool from_username;
  bool from_amount;
  bool to_user_id;
  bool to_good_number;
  bool to_username;
  bool to_amount;
  bool gift_id;
  bool gift_type_id;
  bool gift_quantity;
  bool create_timestamp;
} _GetSiegeRes__isset;

class GetSiegeRes {
 public:

  static const char* ascii_fingerprint; // = "A8E28A553FC18E1E17B97599066E99E2";
  static const uint8_t binary_fingerprint[16]; // = {0xA8,0xE2,0x8A,0x55,0x3F,0xC1,0x8E,0x1E,0x17,0xB9,0x75,0x99,0x06,0x6E,0x99,0xE2};

  GetSiegeRes() : error_code(0), error_text(), trade_id(0), room_id(0), room_name(), from_user_id(0), from_good_number(0), from_username(), from_amount(0), to_user_id(0), to_good_number(0), to_username(), to_amount(0), gift_id(0), gift_type_id(0), gift_quantity(0), create_timestamp(0) {
  }

  virtual ~GetSiegeRes() throw() {}

  int16_t error_code;
  std::string error_text;
  int32_t trade_id;
  int32_t room_id;
  std::string room_name;
  int32_t from_user_id;
  int32_t from_good_number;
  std::string from_username;
  int32_t from_amount;
  int32_t to_user_id;
  int32_t to_good_number;
  std::string to_username;
  int32_t to_amount;
  int32_t gift_id;
  int16_t gift_type_id;
  int32_t gift_quantity;
  int64_t create_timestamp;

  _GetSiegeRes__isset __isset;

  void __set_error_code(const int16_t val) {
    error_code = val;
  }

  void __set_error_text(const std::string& val) {
    error_text = val;
  }

  void __set_trade_id(const int32_t val) {
    trade_id = val;
  }

  void __set_room_id(const int32_t val) {
    room_id = val;
  }

  void __set_room_name(const std::string& val) {
    room_name = val;
  }

  void __set_from_user_id(const int32_t val) {
    from_user_id = val;
  }

  void __set_from_good_number(const int32_t val) {
    from_good_number = val;
  }

  void __set_from_username(const std::string& val) {
    from_username = val;
  }

  void __set_from_amount(const int32_t val) {
    from_amount = val;
  }

  void __set_to_user_id(const int32_t val) {
    to_user_id = val;
  }

  void __set_to_good_number(const int32_t val) {
    to_good_number = val;
  }

  void __set_to_username(const std::string& val) {
    to_username = val;
  }

  void __set_to_amount(const int32_t val) {
    to_amount = val;
  }

  void __set_gift_id(const int32_t val) {
    gift_id = val;
  }

  void __set_gift_type_id(const int16_t val) {
    gift_type_id = val;
  }

  void __set_gift_quantity(const int32_t val) {
    gift_quantity = val;
  }

  void __set_create_timestamp(const int64_t val) {
    create_timestamp = val;
  }

  bool operator == (const GetSiegeRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    if (!(trade_id == rhs.trade_id))
      return false;
    if (!(room_id == rhs.room_id))
      return false;
    if (!(room_name == rhs.room_name))
      return false;
    if (!(from_user_id == rhs.from_user_id))
      return false;
    if (!(from_good_number == rhs.from_good_number))
      return false;
    if (!(from_username == rhs.from_username))
      return false;
    if (!(from_amount == rhs.from_amount))
      return false;
    if (!(to_user_id == rhs.to_user_id))
      return false;
    if (!(to_good_number == rhs.to_good_number))
      return false;
    if (!(to_username == rhs.to_username))
      return false;
    if (!(to_amount == rhs.to_amount))
      return false;
    if (!(gift_id == rhs.gift_id))
      return false;
    if (!(gift_type_id == rhs.gift_type_id))
      return false;
    if (!(gift_quantity == rhs.gift_quantity))
      return false;
    if (!(create_timestamp == rhs.create_timestamp))
      return false;
    return true;
  }
  bool operator != (const GetSiegeRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetSiegeRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetSiegeRes &a, GetSiegeRes &b);

typedef struct _FontInfo__isset {
  _FontInfo__isset() : name(false), size(false), bold(false), italic(false), underline(false), strikeout(false), color(false) {}
  bool name;
  bool size;
  bool bold;
  bool italic;
  bool underline;
  bool strikeout;
  bool color;
} _FontInfo__isset;

class FontInfo {
 public:

  static const char* ascii_fingerprint; // = "EC03ABF65CC475A366BEDD70D8B1D656";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x03,0xAB,0xF6,0x5C,0xC4,0x75,0xA3,0x66,0xBE,0xDD,0x70,0xD8,0xB1,0xD6,0x56};

  FontInfo() : name(), size(0), bold(0), italic(0), underline(0), strikeout(0), color(0) {
  }

  virtual ~FontInfo() throw() {}

  std::string name;
  int16_t size;
  bool bold;
  bool italic;
  bool underline;
  bool strikeout;
  int32_t color;

  _FontInfo__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_size(const int16_t val) {
    size = val;
  }

  void __set_bold(const bool val) {
    bold = val;
  }

  void __set_italic(const bool val) {
    italic = val;
  }

  void __set_underline(const bool val) {
    underline = val;
  }

  void __set_strikeout(const bool val) {
    strikeout = val;
  }

  void __set_color(const int32_t val) {
    color = val;
  }

  bool operator == (const FontInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(bold == rhs.bold))
      return false;
    if (!(italic == rhs.italic))
      return false;
    if (!(underline == rhs.underline))
      return false;
    if (!(strikeout == rhs.strikeout))
      return false;
    if (!(color == rhs.color))
      return false;
    return true;
  }
  bool operator != (const FontInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FontInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FontInfo &a, FontInfo &b);

typedef struct _ChatReq__isset {
  _ChatReq__isset() : from_nick_name(false), from_good_number(false), to_nick_name(false), to_good_number(false), chat_type(false), chat_text(false), chat_time(false), font_info(false), from_role_id(false), from_role_icon_id(false), to_role_id(false), to_role_icon_id(false) {}
  bool from_nick_name;
  bool from_good_number;
  bool to_nick_name;
  bool to_good_number;
  bool chat_type;
  bool chat_text;
  bool chat_time;
  bool font_info;
  bool from_role_id;
  bool from_role_icon_id;
  bool to_role_id;
  bool to_role_icon_id;
} _ChatReq__isset;

class ChatReq {
 public:

  static const char* ascii_fingerprint; // = "DA66CF2BF8B1CB3B9CD580B3789A6324";
  static const uint8_t binary_fingerprint[16]; // = {0xDA,0x66,0xCF,0x2B,0xF8,0xB1,0xCB,0x3B,0x9C,0xD5,0x80,0xB3,0x78,0x9A,0x63,0x24};

  ChatReq() : from_nick_name(), from_good_number(0), to_nick_name(), to_good_number(0), chat_type(0), chat_text(), chat_time(0), from_role_id(0), from_role_icon_id(0), to_role_id(0), to_role_icon_id(0) {
  }

  virtual ~ChatReq() throw() {}

  std::string from_nick_name;
  int32_t from_good_number;
  std::string to_nick_name;
  int32_t to_good_number;
  int32_t chat_type;
  std::string chat_text;
  int64_t chat_time;
  FontInfo font_info;
  int16_t from_role_id;
  int32_t from_role_icon_id;
  int16_t to_role_id;
  int32_t to_role_icon_id;

  _ChatReq__isset __isset;

  void __set_from_nick_name(const std::string& val) {
    from_nick_name = val;
  }

  void __set_from_good_number(const int32_t val) {
    from_good_number = val;
  }

  void __set_to_nick_name(const std::string& val) {
    to_nick_name = val;
  }

  void __set_to_good_number(const int32_t val) {
    to_good_number = val;
  }

  void __set_chat_type(const int32_t val) {
    chat_type = val;
  }

  void __set_chat_text(const std::string& val) {
    chat_text = val;
  }

  void __set_chat_time(const int64_t val) {
    chat_time = val;
  }

  void __set_font_info(const FontInfo& val) {
    font_info = val;
  }

  void __set_from_role_id(const int16_t val) {
    from_role_id = val;
  }

  void __set_from_role_icon_id(const int32_t val) {
    from_role_icon_id = val;
  }

  void __set_to_role_id(const int16_t val) {
    to_role_id = val;
  }

  void __set_to_role_icon_id(const int32_t val) {
    to_role_icon_id = val;
  }

  bool operator == (const ChatReq & rhs) const
  {
    if (!(from_nick_name == rhs.from_nick_name))
      return false;
    if (!(from_good_number == rhs.from_good_number))
      return false;
    if (!(to_nick_name == rhs.to_nick_name))
      return false;
    if (!(to_good_number == rhs.to_good_number))
      return false;
    if (!(chat_type == rhs.chat_type))
      return false;
    if (!(chat_text == rhs.chat_text))
      return false;
    if (!(chat_time == rhs.chat_time))
      return false;
    if (!(font_info == rhs.font_info))
      return false;
    if (!(from_role_id == rhs.from_role_id))
      return false;
    if (!(from_role_icon_id == rhs.from_role_icon_id))
      return false;
    if (!(to_role_id == rhs.to_role_id))
      return false;
    if (!(to_role_icon_id == rhs.to_role_icon_id))
      return false;
    return true;
  }
  bool operator != (const ChatReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ChatReq &a, ChatReq &b);

typedef struct _BroadcastReq__isset {
  _BroadcastReq__isset() : from_room_name(false), from_nick_name(false), from_good_number(false), to_room_id(false), to_room_name(false), to_nick_name(false), to_good_number(false), broadcast_type(false), broadcast_text(false), send_time(false), is_color(false), font_info(false), from_role_id(false), from_role_icon_id(false), to_role_id(false), to_role_icon_id(false), gift_id(false), gift_count(false) {}
  bool from_room_name;
  bool from_nick_name;
  bool from_good_number;
  bool to_room_id;
  bool to_room_name;
  bool to_nick_name;
  bool to_good_number;
  bool broadcast_type;
  bool broadcast_text;
  bool send_time;
  bool is_color;
  bool font_info;
  bool from_role_id;
  bool from_role_icon_id;
  bool to_role_id;
  bool to_role_icon_id;
  bool gift_id;
  bool gift_count;
} _BroadcastReq__isset;

class BroadcastReq {
 public:

  static const char* ascii_fingerprint; // = "3BFF913456DA452BA45B01FADC1E81A7";
  static const uint8_t binary_fingerprint[16]; // = {0x3B,0xFF,0x91,0x34,0x56,0xDA,0x45,0x2B,0xA4,0x5B,0x01,0xFA,0xDC,0x1E,0x81,0xA7};

  BroadcastReq() : from_room_name(), from_nick_name(), from_good_number(0), to_room_id(0), to_room_name(), to_nick_name(), to_good_number(0), broadcast_type(0), broadcast_text(), send_time(0), is_color(0), from_role_id(0), from_role_icon_id(0), to_role_id(0), to_role_icon_id(0), gift_id(0), gift_count(0) {
  }

  virtual ~BroadcastReq() throw() {}

  std::string from_room_name;
  std::string from_nick_name;
  int32_t from_good_number;
  int32_t to_room_id;
  std::string to_room_name;
  std::string to_nick_name;
  int32_t to_good_number;
  int16_t broadcast_type;
  std::string broadcast_text;
  int64_t send_time;
  bool is_color;
  FontInfo font_info;
  int16_t from_role_id;
  int32_t from_role_icon_id;
  int16_t to_role_id;
  int32_t to_role_icon_id;
  int32_t gift_id;
  int32_t gift_count;

  _BroadcastReq__isset __isset;

  void __set_from_room_name(const std::string& val) {
    from_room_name = val;
  }

  void __set_from_nick_name(const std::string& val) {
    from_nick_name = val;
  }

  void __set_from_good_number(const int32_t val) {
    from_good_number = val;
  }

  void __set_to_room_id(const int32_t val) {
    to_room_id = val;
  }

  void __set_to_room_name(const std::string& val) {
    to_room_name = val;
  }

  void __set_to_nick_name(const std::string& val) {
    to_nick_name = val;
  }

  void __set_to_good_number(const int32_t val) {
    to_good_number = val;
  }

  void __set_broadcast_type(const int16_t val) {
    broadcast_type = val;
  }

  void __set_broadcast_text(const std::string& val) {
    broadcast_text = val;
  }

  void __set_send_time(const int64_t val) {
    send_time = val;
  }

  void __set_is_color(const bool val) {
    is_color = val;
  }

  void __set_font_info(const FontInfo& val) {
    font_info = val;
  }

  void __set_from_role_id(const int16_t val) {
    from_role_id = val;
  }

  void __set_from_role_icon_id(const int32_t val) {
    from_role_icon_id = val;
  }

  void __set_to_role_id(const int16_t val) {
    to_role_id = val;
  }

  void __set_to_role_icon_id(const int32_t val) {
    to_role_icon_id = val;
  }

  void __set_gift_id(const int32_t val) {
    gift_id = val;
  }

  void __set_gift_count(const int32_t val) {
    gift_count = val;
  }

  bool operator == (const BroadcastReq & rhs) const
  {
    if (!(from_room_name == rhs.from_room_name))
      return false;
    if (!(from_nick_name == rhs.from_nick_name))
      return false;
    if (!(from_good_number == rhs.from_good_number))
      return false;
    if (!(to_room_id == rhs.to_room_id))
      return false;
    if (!(to_room_name == rhs.to_room_name))
      return false;
    if (!(to_nick_name == rhs.to_nick_name))
      return false;
    if (!(to_good_number == rhs.to_good_number))
      return false;
    if (!(broadcast_type == rhs.broadcast_type))
      return false;
    if (!(broadcast_text == rhs.broadcast_text))
      return false;
    if (!(send_time == rhs.send_time))
      return false;
    if (!(is_color == rhs.is_color))
      return false;
    if (!(font_info == rhs.font_info))
      return false;
    if (!(from_role_id == rhs.from_role_id))
      return false;
    if (!(from_role_icon_id == rhs.from_role_icon_id))
      return false;
    if (!(to_role_id == rhs.to_role_id))
      return false;
    if (!(to_role_icon_id == rhs.to_role_icon_id))
      return false;
    if (!(gift_id == rhs.gift_id))
      return false;
    if (!(gift_count == rhs.gift_count))
      return false;
    return true;
  }
  bool operator != (const BroadcastReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BroadcastReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BroadcastReq &a, BroadcastReq &b);

typedef struct _GiftReq__isset {
  _GiftReq__isset() : from_nick_name(false), from_good_number(false), to_nick_name(false), to_good_number(false), gift_id(false), gift_quantity(false), gift_sum_quantity(false), send_time(false), is_gift_broadcast(false), from_room_name(false), from_role_id(false), from_role_icon_id(false), to_role_id(false), to_role_icon_id(false), congratulations_text(false), show_type(false) {}
  bool from_nick_name;
  bool from_good_number;
  bool to_nick_name;
  bool to_good_number;
  bool gift_id;
  bool gift_quantity;
  bool gift_sum_quantity;
  bool send_time;
  bool is_gift_broadcast;
  bool from_room_name;
  bool from_role_id;
  bool from_role_icon_id;
  bool to_role_id;
  bool to_role_icon_id;
  bool congratulations_text;
  bool show_type;
} _GiftReq__isset;

class GiftReq {
 public:

  static const char* ascii_fingerprint; // = "7098BDA1326BFA8F2A6DC40E506DA779";
  static const uint8_t binary_fingerprint[16]; // = {0x70,0x98,0xBD,0xA1,0x32,0x6B,0xFA,0x8F,0x2A,0x6D,0xC4,0x0E,0x50,0x6D,0xA7,0x79};

  GiftReq() : from_nick_name(), from_good_number(0), to_nick_name(), to_good_number(0), gift_id(0), gift_quantity(0), gift_sum_quantity(0), send_time(0), is_gift_broadcast(0), from_room_name(), from_role_id(0), from_role_icon_id(0), to_role_id(0), to_role_icon_id(0), congratulations_text(), show_type(0) {
  }

  virtual ~GiftReq() throw() {}

  std::string from_nick_name;
  int32_t from_good_number;
  std::string to_nick_name;
  int32_t to_good_number;
  int32_t gift_id;
  int32_t gift_quantity;
  int32_t gift_sum_quantity;
  int64_t send_time;
  int16_t is_gift_broadcast;
  std::string from_room_name;
  int16_t from_role_id;
  int32_t from_role_icon_id;
  int16_t to_role_id;
  int32_t to_role_icon_id;
  std::string congratulations_text;
  int16_t show_type;

  _GiftReq__isset __isset;

  void __set_from_nick_name(const std::string& val) {
    from_nick_name = val;
  }

  void __set_from_good_number(const int32_t val) {
    from_good_number = val;
  }

  void __set_to_nick_name(const std::string& val) {
    to_nick_name = val;
  }

  void __set_to_good_number(const int32_t val) {
    to_good_number = val;
  }

  void __set_gift_id(const int32_t val) {
    gift_id = val;
  }

  void __set_gift_quantity(const int32_t val) {
    gift_quantity = val;
  }

  void __set_gift_sum_quantity(const int32_t val) {
    gift_sum_quantity = val;
  }

  void __set_send_time(const int64_t val) {
    send_time = val;
  }

  void __set_is_gift_broadcast(const int16_t val) {
    is_gift_broadcast = val;
  }

  void __set_from_room_name(const std::string& val) {
    from_room_name = val;
  }

  void __set_from_role_id(const int16_t val) {
    from_role_id = val;
  }

  void __set_from_role_icon_id(const int32_t val) {
    from_role_icon_id = val;
  }

  void __set_to_role_id(const int16_t val) {
    to_role_id = val;
  }

  void __set_to_role_icon_id(const int32_t val) {
    to_role_icon_id = val;
  }

  void __set_congratulations_text(const std::string& val) {
    congratulations_text = val;
  }

  void __set_show_type(const int16_t val) {
    show_type = val;
  }

  bool operator == (const GiftReq & rhs) const
  {
    if (!(from_nick_name == rhs.from_nick_name))
      return false;
    if (!(from_good_number == rhs.from_good_number))
      return false;
    if (!(to_nick_name == rhs.to_nick_name))
      return false;
    if (!(to_good_number == rhs.to_good_number))
      return false;
    if (!(gift_id == rhs.gift_id))
      return false;
    if (!(gift_quantity == rhs.gift_quantity))
      return false;
    if (!(gift_sum_quantity == rhs.gift_sum_quantity))
      return false;
    if (!(send_time == rhs.send_time))
      return false;
    if (!(is_gift_broadcast == rhs.is_gift_broadcast))
      return false;
    if (!(from_room_name == rhs.from_room_name))
      return false;
    if (!(from_role_id == rhs.from_role_id))
      return false;
    if (!(from_role_icon_id == rhs.from_role_icon_id))
      return false;
    if (!(to_role_id == rhs.to_role_id))
      return false;
    if (!(to_role_icon_id == rhs.to_role_icon_id))
      return false;
    if (!(congratulations_text == rhs.congratulations_text))
      return false;
    if (!(show_type == rhs.show_type))
      return false;
    return true;
  }
  bool operator != (const GiftReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GiftReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GiftReq &a, GiftReq &b);

typedef struct _SingleGift__isset {
  _SingleGift__isset() : gift_id(false), gift_quantity(false), gift_sum_quantity(false) {}
  bool gift_id;
  bool gift_quantity;
  bool gift_sum_quantity;
} _SingleGift__isset;

class SingleGift {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  SingleGift() : gift_id(0), gift_quantity(0), gift_sum_quantity(0) {
  }

  virtual ~SingleGift() throw() {}

  int32_t gift_id;
  int32_t gift_quantity;
  int32_t gift_sum_quantity;

  _SingleGift__isset __isset;

  void __set_gift_id(const int32_t val) {
    gift_id = val;
  }

  void __set_gift_quantity(const int32_t val) {
    gift_quantity = val;
  }

  void __set_gift_sum_quantity(const int32_t val) {
    gift_sum_quantity = val;
  }

  bool operator == (const SingleGift & rhs) const
  {
    if (!(gift_id == rhs.gift_id))
      return false;
    if (!(gift_quantity == rhs.gift_quantity))
      return false;
    if (!(gift_sum_quantity == rhs.gift_sum_quantity))
      return false;
    return true;
  }
  bool operator != (const SingleGift &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SingleGift & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SingleGift &a, SingleGift &b);

typedef struct _MultiGiftReq__isset {
  _MultiGiftReq__isset() : from_nick_name(false), from_good_number(false), to_nick_name(false), to_good_number(false), send_time(false), gift_count(false), gift_list(false), is_gift_broadcast(false), from_room_name(false), from_role_id(false), from_role_icon_id(false), to_role_id(false), to_role_icon_id(false) {}
  bool from_nick_name;
  bool from_good_number;
  bool to_nick_name;
  bool to_good_number;
  bool send_time;
  bool gift_count;
  bool gift_list;
  bool is_gift_broadcast;
  bool from_room_name;
  bool from_role_id;
  bool from_role_icon_id;
  bool to_role_id;
  bool to_role_icon_id;
} _MultiGiftReq__isset;

class MultiGiftReq {
 public:

  static const char* ascii_fingerprint; // = "F62D1E6D51BC6979820135F1DBA48C30";
  static const uint8_t binary_fingerprint[16]; // = {0xF6,0x2D,0x1E,0x6D,0x51,0xBC,0x69,0x79,0x82,0x01,0x35,0xF1,0xDB,0xA4,0x8C,0x30};

  MultiGiftReq() : from_nick_name(), from_good_number(0), to_nick_name(), to_good_number(0), send_time(0), gift_count(0), is_gift_broadcast(0), from_room_name(), from_role_id(0), from_role_icon_id(0), to_role_id(0), to_role_icon_id(0) {
  }

  virtual ~MultiGiftReq() throw() {}

  std::string from_nick_name;
  int32_t from_good_number;
  std::string to_nick_name;
  int32_t to_good_number;
  int64_t send_time;
  int32_t gift_count;
  std::map<int32_t, SingleGift>  gift_list;
  int16_t is_gift_broadcast;
  std::string from_room_name;
  int16_t from_role_id;
  int32_t from_role_icon_id;
  int16_t to_role_id;
  int32_t to_role_icon_id;

  _MultiGiftReq__isset __isset;

  void __set_from_nick_name(const std::string& val) {
    from_nick_name = val;
  }

  void __set_from_good_number(const int32_t val) {
    from_good_number = val;
  }

  void __set_to_nick_name(const std::string& val) {
    to_nick_name = val;
  }

  void __set_to_good_number(const int32_t val) {
    to_good_number = val;
  }

  void __set_send_time(const int64_t val) {
    send_time = val;
  }

  void __set_gift_count(const int32_t val) {
    gift_count = val;
  }

  void __set_gift_list(const std::map<int32_t, SingleGift> & val) {
    gift_list = val;
  }

  void __set_is_gift_broadcast(const int16_t val) {
    is_gift_broadcast = val;
  }

  void __set_from_room_name(const std::string& val) {
    from_room_name = val;
  }

  void __set_from_role_id(const int16_t val) {
    from_role_id = val;
  }

  void __set_from_role_icon_id(const int32_t val) {
    from_role_icon_id = val;
  }

  void __set_to_role_id(const int16_t val) {
    to_role_id = val;
  }

  void __set_to_role_icon_id(const int32_t val) {
    to_role_icon_id = val;
  }

  bool operator == (const MultiGiftReq & rhs) const
  {
    if (!(from_nick_name == rhs.from_nick_name))
      return false;
    if (!(from_good_number == rhs.from_good_number))
      return false;
    if (!(to_nick_name == rhs.to_nick_name))
      return false;
    if (!(to_good_number == rhs.to_good_number))
      return false;
    if (!(send_time == rhs.send_time))
      return false;
    if (!(gift_count == rhs.gift_count))
      return false;
    if (!(gift_list == rhs.gift_list))
      return false;
    if (!(is_gift_broadcast == rhs.is_gift_broadcast))
      return false;
    if (!(from_room_name == rhs.from_room_name))
      return false;
    if (!(from_role_id == rhs.from_role_id))
      return false;
    if (!(from_role_icon_id == rhs.from_role_icon_id))
      return false;
    if (!(to_role_id == rhs.to_role_id))
      return false;
    if (!(to_role_icon_id == rhs.to_role_icon_id))
      return false;
    return true;
  }
  bool operator != (const MultiGiftReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MultiGiftReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MultiGiftReq &a, MultiGiftReq &b);

typedef struct _SingleUser__isset {
  _SingleUser__isset() : user_id(false), nick_name(false), good_number(false), gift_sum_quantity(false), role_id(false), role_icon_id(false) {}
  bool user_id;
  bool nick_name;
  bool good_number;
  bool gift_sum_quantity;
  bool role_id;
  bool role_icon_id;
} _SingleUser__isset;

class SingleUser {
 public:

  static const char* ascii_fingerprint; // = "FD87E8E4417C7AEAAAA2D798DD99A020";
  static const uint8_t binary_fingerprint[16]; // = {0xFD,0x87,0xE8,0xE4,0x41,0x7C,0x7A,0xEA,0xAA,0xA2,0xD7,0x98,0xDD,0x99,0xA0,0x20};

  SingleUser() : user_id(0), nick_name(), good_number(0), gift_sum_quantity(0), role_id(0), role_icon_id(0) {
  }

  virtual ~SingleUser() throw() {}

  int32_t user_id;
  std::string nick_name;
  int32_t good_number;
  int32_t gift_sum_quantity;
  int16_t role_id;
  int32_t role_icon_id;

  _SingleUser__isset __isset;

  void __set_user_id(const int32_t val) {
    user_id = val;
  }

  void __set_nick_name(const std::string& val) {
    nick_name = val;
  }

  void __set_good_number(const int32_t val) {
    good_number = val;
  }

  void __set_gift_sum_quantity(const int32_t val) {
    gift_sum_quantity = val;
  }

  void __set_role_id(const int16_t val) {
    role_id = val;
  }

  void __set_role_icon_id(const int32_t val) {
    role_icon_id = val;
  }

  bool operator == (const SingleUser & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(nick_name == rhs.nick_name))
      return false;
    if (!(good_number == rhs.good_number))
      return false;
    if (!(gift_sum_quantity == rhs.gift_sum_quantity))
      return false;
    if (!(role_id == rhs.role_id))
      return false;
    if (!(role_icon_id == rhs.role_icon_id))
      return false;
    return true;
  }
  bool operator != (const SingleUser &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SingleUser & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SingleUser &a, SingleUser &b);

typedef struct _MultiToUserGiftReq__isset {
  _MultiToUserGiftReq__isset() : from_nick_name(false), from_good_number(false), gift_id(false), gift_quantity(false), send_time(false), user_count(false), to_user_list(false), is_gift_broadcast(false), from_room_name(false), from_role_id(false), from_role_icon_id(false) {}
  bool from_nick_name;
  bool from_good_number;
  bool gift_id;
  bool gift_quantity;
  bool send_time;
  bool user_count;
  bool to_user_list;
  bool is_gift_broadcast;
  bool from_room_name;
  bool from_role_id;
  bool from_role_icon_id;
} _MultiToUserGiftReq__isset;

class MultiToUserGiftReq {
 public:

  static const char* ascii_fingerprint; // = "90CD221F4B8A782C19B5C6E468E1A51A";
  static const uint8_t binary_fingerprint[16]; // = {0x90,0xCD,0x22,0x1F,0x4B,0x8A,0x78,0x2C,0x19,0xB5,0xC6,0xE4,0x68,0xE1,0xA5,0x1A};

  MultiToUserGiftReq() : from_nick_name(), from_good_number(0), gift_id(0), gift_quantity(0), send_time(0), user_count(0), is_gift_broadcast(0), from_room_name(), from_role_id(0), from_role_icon_id(0) {
  }

  virtual ~MultiToUserGiftReq() throw() {}

  std::string from_nick_name;
  int32_t from_good_number;
  int32_t gift_id;
  int32_t gift_quantity;
  int64_t send_time;
  int32_t user_count;
  std::map<int32_t, SingleUser>  to_user_list;
  int16_t is_gift_broadcast;
  std::string from_room_name;
  int16_t from_role_id;
  int32_t from_role_icon_id;

  _MultiToUserGiftReq__isset __isset;

  void __set_from_nick_name(const std::string& val) {
    from_nick_name = val;
  }

  void __set_from_good_number(const int32_t val) {
    from_good_number = val;
  }

  void __set_gift_id(const int32_t val) {
    gift_id = val;
  }

  void __set_gift_quantity(const int32_t val) {
    gift_quantity = val;
  }

  void __set_send_time(const int64_t val) {
    send_time = val;
  }

  void __set_user_count(const int32_t val) {
    user_count = val;
  }

  void __set_to_user_list(const std::map<int32_t, SingleUser> & val) {
    to_user_list = val;
  }

  void __set_is_gift_broadcast(const int16_t val) {
    is_gift_broadcast = val;
  }

  void __set_from_room_name(const std::string& val) {
    from_room_name = val;
  }

  void __set_from_role_id(const int16_t val) {
    from_role_id = val;
  }

  void __set_from_role_icon_id(const int32_t val) {
    from_role_icon_id = val;
  }

  bool operator == (const MultiToUserGiftReq & rhs) const
  {
    if (!(from_nick_name == rhs.from_nick_name))
      return false;
    if (!(from_good_number == rhs.from_good_number))
      return false;
    if (!(gift_id == rhs.gift_id))
      return false;
    if (!(gift_quantity == rhs.gift_quantity))
      return false;
    if (!(send_time == rhs.send_time))
      return false;
    if (!(user_count == rhs.user_count))
      return false;
    if (!(to_user_list == rhs.to_user_list))
      return false;
    if (!(is_gift_broadcast == rhs.is_gift_broadcast))
      return false;
    if (!(from_room_name == rhs.from_room_name))
      return false;
    if (!(from_role_id == rhs.from_role_id))
      return false;
    if (!(from_role_icon_id == rhs.from_role_icon_id))
      return false;
    return true;
  }
  bool operator != (const MultiToUserGiftReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MultiToUserGiftReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MultiToUserGiftReq &a, MultiToUserGiftReq &b);

typedef struct _MediaReq__isset {
  _MediaReq__isset() : media_status(false), media_pos(false), media_device_info(false) {}
  bool media_status;
  bool media_pos;
  bool media_device_info;
} _MediaReq__isset;

class MediaReq {
 public:

  static const char* ascii_fingerprint; // = "57AF24210DE9FE7240052E491D76EDDC";
  static const uint8_t binary_fingerprint[16]; // = {0x57,0xAF,0x24,0x21,0x0D,0xE9,0xFE,0x72,0x40,0x05,0x2E,0x49,0x1D,0x76,0xED,0xDC};

  MediaReq() : media_status(0), media_pos(0) {
  }

  virtual ~MediaReq() throw() {}

  int16_t media_status;
  int16_t media_pos;
  MediaDeviceInfo media_device_info;

  _MediaReq__isset __isset;

  void __set_media_status(const int16_t val) {
    media_status = val;
  }

  void __set_media_pos(const int16_t val) {
    media_pos = val;
  }

  void __set_media_device_info(const MediaDeviceInfo& val) {
    media_device_info = val;
    __isset.media_device_info = true;
  }

  bool operator == (const MediaReq & rhs) const
  {
    if (!(media_status == rhs.media_status))
      return false;
    if (!(media_pos == rhs.media_pos))
      return false;
    if (__isset.media_device_info != rhs.__isset.media_device_info)
      return false;
    else if (__isset.media_device_info && !(media_device_info == rhs.media_device_info))
      return false;
    return true;
  }
  bool operator != (const MediaReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MediaReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MediaReq &a, MediaReq &b);

typedef struct _MediaDeviceSettingReq__isset {
  _MediaDeviceSettingReq__isset() : media_device_info(false) {}
  bool media_device_info;
} _MediaDeviceSettingReq__isset;

class MediaDeviceSettingReq {
 public:

  static const char* ascii_fingerprint; // = "D4BD6718C5B988CF0C1D2CC0843AAAD5";
  static const uint8_t binary_fingerprint[16]; // = {0xD4,0xBD,0x67,0x18,0xC5,0xB9,0x88,0xCF,0x0C,0x1D,0x2C,0xC0,0x84,0x3A,0xAA,0xD5};

  MediaDeviceSettingReq() {
  }

  virtual ~MediaDeviceSettingReq() throw() {}

  MediaDeviceInfo media_device_info;

  _MediaDeviceSettingReq__isset __isset;

  void __set_media_device_info(const MediaDeviceInfo& val) {
    media_device_info = val;
  }

  bool operator == (const MediaDeviceSettingReq & rhs) const
  {
    if (!(media_device_info == rhs.media_device_info))
      return false;
    return true;
  }
  bool operator != (const MediaDeviceSettingReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MediaDeviceSettingReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MediaDeviceSettingReq &a, MediaDeviceSettingReq &b);

typedef struct _SubscribeMediaRes__isset {
  _SubscribeMediaRes__isset() : error_code(false), error_text(false), result(false), media_device_info(false) {}
  bool error_code;
  bool error_text;
  bool result;
  bool media_device_info;
} _SubscribeMediaRes__isset;

class SubscribeMediaRes {
 public:

  static const char* ascii_fingerprint; // = "AAF0BD3A9001C3F14BD04F5DC0FE04B4";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0xF0,0xBD,0x3A,0x90,0x01,0xC3,0xF1,0x4B,0xD0,0x4F,0x5D,0xC0,0xFE,0x04,0xB4};

  SubscribeMediaRes() : error_code(0), error_text(), result(0) {
  }

  virtual ~SubscribeMediaRes() throw() {}

  int16_t error_code;
  std::string error_text;
  int16_t result;
  MediaDeviceInfo media_device_info;

  _SubscribeMediaRes__isset __isset;

  void __set_error_code(const int16_t val) {
    error_code = val;
  }

  void __set_error_text(const std::string& val) {
    error_text = val;
  }

  void __set_result(const int16_t val) {
    result = val;
  }

  void __set_media_device_info(const MediaDeviceInfo& val) {
    media_device_info = val;
    __isset.media_device_info = true;
  }

  bool operator == (const SubscribeMediaRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    if (!(result == rhs.result))
      return false;
    if (__isset.media_device_info != rhs.__isset.media_device_info)
      return false;
    else if (__isset.media_device_info && !(media_device_info == rhs.media_device_info))
      return false;
    return true;
  }
  bool operator != (const SubscribeMediaRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SubscribeMediaRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SubscribeMediaRes &a, SubscribeMediaRes &b);

typedef struct _ScreenShotLogReq__isset {
  _ScreenShotLogReq__isset() : nick_name(false), good_number(false), client_ip(false), client_mac(false), file_name(false) {}
  bool nick_name;
  bool good_number;
  bool client_ip;
  bool client_mac;
  bool file_name;
} _ScreenShotLogReq__isset;

class ScreenShotLogReq {
 public:

  static const char* ascii_fingerprint; // = "C54745CF5E2800BFF941910D5280EE48";
  static const uint8_t binary_fingerprint[16]; // = {0xC5,0x47,0x45,0xCF,0x5E,0x28,0x00,0xBF,0xF9,0x41,0x91,0x0D,0x52,0x80,0xEE,0x48};

  ScreenShotLogReq() : nick_name(), good_number(0), client_ip(), client_mac(), file_name() {
  }

  virtual ~ScreenShotLogReq() throw() {}

  std::string nick_name;
  int32_t good_number;
  std::string client_ip;
  std::string client_mac;
  std::string file_name;

  _ScreenShotLogReq__isset __isset;

  void __set_nick_name(const std::string& val) {
    nick_name = val;
  }

  void __set_good_number(const int32_t val) {
    good_number = val;
  }

  void __set_client_ip(const std::string& val) {
    client_ip = val;
  }

  void __set_client_mac(const std::string& val) {
    client_mac = val;
  }

  void __set_file_name(const std::string& val) {
    file_name = val;
  }

  bool operator == (const ScreenShotLogReq & rhs) const
  {
    if (!(nick_name == rhs.nick_name))
      return false;
    if (!(good_number == rhs.good_number))
      return false;
    if (!(client_ip == rhs.client_ip))
      return false;
    if (!(client_mac == rhs.client_mac))
      return false;
    if (!(file_name == rhs.file_name))
      return false;
    return true;
  }
  bool operator != (const ScreenShotLogReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScreenShotLogReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ScreenShotLogReq &a, ScreenShotLogReq &b);

typedef struct _WorldBroadcastReq__isset {
  _WorldBroadcastReq__isset() : from_site_id(false), from_site_name(false), from_room_id(false), from_room_name(false), from_user_id(false), from_nick_name(false), from_good_number(false), from_amount(false), from_exp_value(false), to_site_ids(false), to_room_id(false), to_room_name(false), to_user_id(false), to_nick_name(false), to_good_number(false), broadcast_type(false), broadcast_text(false), send_time(false), is_color(false), font_info(false), from_role_id(false), from_role_icon_id(false), to_role_id(false), to_role_icon_id(false) {}
  bool from_site_id;
  bool from_site_name;
  bool from_room_id;
  bool from_room_name;
  bool from_user_id;
  bool from_nick_name;
  bool from_good_number;
  bool from_amount;
  bool from_exp_value;
  bool to_site_ids;
  bool to_room_id;
  bool to_room_name;
  bool to_user_id;
  bool to_nick_name;
  bool to_good_number;
  bool broadcast_type;
  bool broadcast_text;
  bool send_time;
  bool is_color;
  bool font_info;
  bool from_role_id;
  bool from_role_icon_id;
  bool to_role_id;
  bool to_role_icon_id;
} _WorldBroadcastReq__isset;

class WorldBroadcastReq {
 public:

  static const char* ascii_fingerprint; // = "9625A0EE5BC36362B94A65EC1E1C7900";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x25,0xA0,0xEE,0x5B,0xC3,0x63,0x62,0xB9,0x4A,0x65,0xEC,0x1E,0x1C,0x79,0x00};

  WorldBroadcastReq() : from_site_id(0), from_site_name(), from_room_id(0), from_room_name(), from_user_id(0), from_nick_name(), from_good_number(0), from_amount(0), from_exp_value(0), to_site_ids(), to_room_id(0), to_room_name(), to_user_id(0), to_nick_name(), to_good_number(0), broadcast_type(0), broadcast_text(), send_time(0), is_color(0), from_role_id(0), from_role_icon_id(0), to_role_id(0), to_role_icon_id(0) {
  }

  virtual ~WorldBroadcastReq() throw() {}

  int16_t from_site_id;
  std::string from_site_name;
  int32_t from_room_id;
  std::string from_room_name;
  int32_t from_user_id;
  std::string from_nick_name;
  int32_t from_good_number;
  int32_t from_amount;
  int32_t from_exp_value;
  std::string to_site_ids;
  int32_t to_room_id;
  std::string to_room_name;
  int32_t to_user_id;
  std::string to_nick_name;
  int32_t to_good_number;
  int16_t broadcast_type;
  std::string broadcast_text;
  int64_t send_time;
  bool is_color;
  FontInfo font_info;
  int16_t from_role_id;
  int32_t from_role_icon_id;
  int16_t to_role_id;
  int32_t to_role_icon_id;

  _WorldBroadcastReq__isset __isset;

  void __set_from_site_id(const int16_t val) {
    from_site_id = val;
  }

  void __set_from_site_name(const std::string& val) {
    from_site_name = val;
  }

  void __set_from_room_id(const int32_t val) {
    from_room_id = val;
  }

  void __set_from_room_name(const std::string& val) {
    from_room_name = val;
  }

  void __set_from_user_id(const int32_t val) {
    from_user_id = val;
  }

  void __set_from_nick_name(const std::string& val) {
    from_nick_name = val;
  }

  void __set_from_good_number(const int32_t val) {
    from_good_number = val;
  }

  void __set_from_amount(const int32_t val) {
    from_amount = val;
  }

  void __set_from_exp_value(const int32_t val) {
    from_exp_value = val;
  }

  void __set_to_site_ids(const std::string& val) {
    to_site_ids = val;
  }

  void __set_to_room_id(const int32_t val) {
    to_room_id = val;
  }

  void __set_to_room_name(const std::string& val) {
    to_room_name = val;
  }

  void __set_to_user_id(const int32_t val) {
    to_user_id = val;
  }

  void __set_to_nick_name(const std::string& val) {
    to_nick_name = val;
  }

  void __set_to_good_number(const int32_t val) {
    to_good_number = val;
  }

  void __set_broadcast_type(const int16_t val) {
    broadcast_type = val;
  }

  void __set_broadcast_text(const std::string& val) {
    broadcast_text = val;
  }

  void __set_send_time(const int64_t val) {
    send_time = val;
  }

  void __set_is_color(const bool val) {
    is_color = val;
  }

  void __set_font_info(const FontInfo& val) {
    font_info = val;
  }

  void __set_from_role_id(const int16_t val) {
    from_role_id = val;
  }

  void __set_from_role_icon_id(const int32_t val) {
    from_role_icon_id = val;
  }

  void __set_to_role_id(const int16_t val) {
    to_role_id = val;
  }

  void __set_to_role_icon_id(const int32_t val) {
    to_role_icon_id = val;
  }

  bool operator == (const WorldBroadcastReq & rhs) const
  {
    if (!(from_site_id == rhs.from_site_id))
      return false;
    if (!(from_site_name == rhs.from_site_name))
      return false;
    if (!(from_room_id == rhs.from_room_id))
      return false;
    if (!(from_room_name == rhs.from_room_name))
      return false;
    if (!(from_user_id == rhs.from_user_id))
      return false;
    if (!(from_nick_name == rhs.from_nick_name))
      return false;
    if (!(from_good_number == rhs.from_good_number))
      return false;
    if (!(from_amount == rhs.from_amount))
      return false;
    if (!(from_exp_value == rhs.from_exp_value))
      return false;
    if (!(to_site_ids == rhs.to_site_ids))
      return false;
    if (!(to_room_id == rhs.to_room_id))
      return false;
    if (!(to_room_name == rhs.to_room_name))
      return false;
    if (!(to_user_id == rhs.to_user_id))
      return false;
    if (!(to_nick_name == rhs.to_nick_name))
      return false;
    if (!(to_good_number == rhs.to_good_number))
      return false;
    if (!(broadcast_type == rhs.broadcast_type))
      return false;
    if (!(broadcast_text == rhs.broadcast_text))
      return false;
    if (!(send_time == rhs.send_time))
      return false;
    if (!(is_color == rhs.is_color))
      return false;
    if (!(font_info == rhs.font_info))
      return false;
    if (!(from_role_id == rhs.from_role_id))
      return false;
    if (!(from_role_icon_id == rhs.from_role_icon_id))
      return false;
    if (!(to_role_id == rhs.to_role_id))
      return false;
    if (!(to_role_icon_id == rhs.to_role_icon_id))
      return false;
    return true;
  }
  bool operator != (const WorldBroadcastReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorldBroadcastReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(WorldBroadcastReq &a, WorldBroadcastReq &b);

typedef struct _SwitchUserRole__isset {
  _SwitchUserRole__isset() : new_role_id(false), old_role_id(false), switch_type(false) {}
  bool new_role_id;
  bool old_role_id;
  bool switch_type;
} _SwitchUserRole__isset;

class SwitchUserRole {
 public:

  static const char* ascii_fingerprint; // = "EEBEE5F2DAE75B1AB615147C163DCA93";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBE,0xE5,0xF2,0xDA,0xE7,0x5B,0x1A,0xB6,0x15,0x14,0x7C,0x16,0x3D,0xCA,0x93};

  SwitchUserRole() : new_role_id(0), old_role_id(0), switch_type(0) {
  }

  virtual ~SwitchUserRole() throw() {}

  int16_t new_role_id;
  int16_t old_role_id;
  int16_t switch_type;

  _SwitchUserRole__isset __isset;

  void __set_new_role_id(const int16_t val) {
    new_role_id = val;
  }

  void __set_old_role_id(const int16_t val) {
    old_role_id = val;
  }

  void __set_switch_type(const int16_t val) {
    switch_type = val;
  }

  bool operator == (const SwitchUserRole & rhs) const
  {
    if (!(new_role_id == rhs.new_role_id))
      return false;
    if (!(old_role_id == rhs.old_role_id))
      return false;
    if (!(switch_type == rhs.switch_type))
      return false;
    return true;
  }
  bool operator != (const SwitchUserRole &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SwitchUserRole & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SwitchUserRole &a, SwitchUserRole &b);

typedef struct _TimeoutRoleNotify__isset {
  _TimeoutRoleNotify__isset() : role_id(false) {}
  bool role_id;
} _TimeoutRoleNotify__isset;

class TimeoutRoleNotify {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  TimeoutRoleNotify() : role_id(0) {
  }

  virtual ~TimeoutRoleNotify() throw() {}

  int16_t role_id;

  _TimeoutRoleNotify__isset __isset;

  void __set_role_id(const int16_t val) {
    role_id = val;
  }

  bool operator == (const TimeoutRoleNotify & rhs) const
  {
    if (!(role_id == rhs.role_id))
      return false;
    return true;
  }
  bool operator != (const TimeoutRoleNotify &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimeoutRoleNotify & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TimeoutRoleNotify &a, TimeoutRoleNotify &b);

typedef struct _ExchangeToKmoneyReq__isset {
  _ExchangeToKmoneyReq__isset() : from_giftmoney_amount(false), to_kmoney_amount(false) {}
  bool from_giftmoney_amount;
  bool to_kmoney_amount;
} _ExchangeToKmoneyReq__isset;

class ExchangeToKmoneyReq {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  ExchangeToKmoneyReq() : from_giftmoney_amount(0), to_kmoney_amount(0) {
  }

  virtual ~ExchangeToKmoneyReq() throw() {}

  int32_t from_giftmoney_amount;
  int32_t to_kmoney_amount;

  _ExchangeToKmoneyReq__isset __isset;

  void __set_from_giftmoney_amount(const int32_t val) {
    from_giftmoney_amount = val;
  }

  void __set_to_kmoney_amount(const int32_t val) {
    to_kmoney_amount = val;
  }

  bool operator == (const ExchangeToKmoneyReq & rhs) const
  {
    if (!(from_giftmoney_amount == rhs.from_giftmoney_amount))
      return false;
    if (!(to_kmoney_amount == rhs.to_kmoney_amount))
      return false;
    return true;
  }
  bool operator != (const ExchangeToKmoneyReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExchangeToKmoneyReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ExchangeToKmoneyReq &a, ExchangeToKmoneyReq &b);

typedef struct _ExchangeToKmoneyRes__isset {
  _ExchangeToKmoneyRes__isset() : error_code(false), error_text(false), kmoney_balance(false), giftmoney_balance(false) {}
  bool error_code;
  bool error_text;
  bool kmoney_balance;
  bool giftmoney_balance;
} _ExchangeToKmoneyRes__isset;

class ExchangeToKmoneyRes {
 public:

  static const char* ascii_fingerprint; // = "8CA64CC7DB6121AACC0E8764505D5751";
  static const uint8_t binary_fingerprint[16]; // = {0x8C,0xA6,0x4C,0xC7,0xDB,0x61,0x21,0xAA,0xCC,0x0E,0x87,0x64,0x50,0x5D,0x57,0x51};

  ExchangeToKmoneyRes() : error_code(0), error_text(), kmoney_balance(0), giftmoney_balance(0) {
  }

  virtual ~ExchangeToKmoneyRes() throw() {}

  int16_t error_code;
  std::string error_text;
  int64_t kmoney_balance;
  int64_t giftmoney_balance;

  _ExchangeToKmoneyRes__isset __isset;

  void __set_error_code(const int16_t val) {
    error_code = val;
  }

  void __set_error_text(const std::string& val) {
    error_text = val;
  }

  void __set_kmoney_balance(const int64_t val) {
    kmoney_balance = val;
  }

  void __set_giftmoney_balance(const int64_t val) {
    giftmoney_balance = val;
  }

  bool operator == (const ExchangeToKmoneyRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    if (!(kmoney_balance == rhs.kmoney_balance))
      return false;
    if (!(giftmoney_balance == rhs.giftmoney_balance))
      return false;
    return true;
  }
  bool operator != (const ExchangeToKmoneyRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExchangeToKmoneyRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ExchangeToKmoneyRes &a, ExchangeToKmoneyRes &b);

typedef struct _SetStampGiftNotify__isset {
  _SetStampGiftNotify__isset() : stamp_gift_id(false) {}
  bool stamp_gift_id;
} _SetStampGiftNotify__isset;

class SetStampGiftNotify {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  SetStampGiftNotify() : stamp_gift_id(0) {
  }

  virtual ~SetStampGiftNotify() throw() {}

  int32_t stamp_gift_id;

  _SetStampGiftNotify__isset __isset;

  void __set_stamp_gift_id(const int32_t val) {
    stamp_gift_id = val;
  }

  bool operator == (const SetStampGiftNotify & rhs) const
  {
    if (!(stamp_gift_id == rhs.stamp_gift_id))
      return false;
    return true;
  }
  bool operator != (const SetStampGiftNotify &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetStampGiftNotify & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetStampGiftNotify &a, SetStampGiftNotify &b);

typedef struct _UserinfoChangeNotify__isset {
  _UserinfoChangeNotify__isset() : nick_name(false), good_number(false), decolor(false) {}
  bool nick_name;
  bool good_number;
  bool decolor;
} _UserinfoChangeNotify__isset;

class UserinfoChangeNotify {
 public:

  static const char* ascii_fingerprint; // = "28C2ECC89260BADB9C70330FBF47BFA8";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0xC2,0xEC,0xC8,0x92,0x60,0xBA,0xDB,0x9C,0x70,0x33,0x0F,0xBF,0x47,0xBF,0xA8};

  UserinfoChangeNotify() : nick_name(), good_number(0), decolor(0) {
  }

  virtual ~UserinfoChangeNotify() throw() {}

  std::string nick_name;
  int32_t good_number;
  int32_t decolor;

  _UserinfoChangeNotify__isset __isset;

  void __set_nick_name(const std::string& val) {
    nick_name = val;
  }

  void __set_good_number(const int32_t val) {
    good_number = val;
  }

  void __set_decolor(const int32_t val) {
    decolor = val;
  }

  bool operator == (const UserinfoChangeNotify & rhs) const
  {
    if (!(nick_name == rhs.nick_name))
      return false;
    if (!(good_number == rhs.good_number))
      return false;
    if (!(decolor == rhs.decolor))
      return false;
    return true;
  }
  bool operator != (const UserinfoChangeNotify &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserinfoChangeNotify & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UserinfoChangeNotify &a, UserinfoChangeNotify &b);

typedef struct _BoxNotify__isset {
  _BoxNotify__isset() : nick_name(false), good_number(false), box_type(false), box_id(false), box_time(false), today_send_amount(false), today_recv_amount(false), role_id(false) {}
  bool nick_name;
  bool good_number;
  bool box_type;
  bool box_id;
  bool box_time;
  bool today_send_amount;
  bool today_recv_amount;
  bool role_id;
} _BoxNotify__isset;

class BoxNotify {
 public:

  static const char* ascii_fingerprint; // = "7797A5FA0A579D1F1B1159EC6209714A";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x97,0xA5,0xFA,0x0A,0x57,0x9D,0x1F,0x1B,0x11,0x59,0xEC,0x62,0x09,0x71,0x4A};

  BoxNotify() : nick_name(), good_number(0), box_type(0), box_id(0), box_time(0), today_send_amount(0), today_recv_amount(0), role_id(0) {
  }

  virtual ~BoxNotify() throw() {}

  std::string nick_name;
  int32_t good_number;
  int16_t box_type;
  int32_t box_id;
  int64_t box_time;
  int32_t today_send_amount;
  int32_t today_recv_amount;
  int32_t role_id;

  _BoxNotify__isset __isset;

  void __set_nick_name(const std::string& val) {
    nick_name = val;
  }

  void __set_good_number(const int32_t val) {
    good_number = val;
  }

  void __set_box_type(const int16_t val) {
    box_type = val;
  }

  void __set_box_id(const int32_t val) {
    box_id = val;
  }

  void __set_box_time(const int64_t val) {
    box_time = val;
  }

  void __set_today_send_amount(const int32_t val) {
    today_send_amount = val;
  }

  void __set_today_recv_amount(const int32_t val) {
    today_recv_amount = val;
  }

  void __set_role_id(const int32_t val) {
    role_id = val;
  }

  bool operator == (const BoxNotify & rhs) const
  {
    if (!(nick_name == rhs.nick_name))
      return false;
    if (!(good_number == rhs.good_number))
      return false;
    if (!(box_type == rhs.box_type))
      return false;
    if (!(box_id == rhs.box_id))
      return false;
    if (!(box_time == rhs.box_time))
      return false;
    if (!(today_send_amount == rhs.today_send_amount))
      return false;
    if (!(today_recv_amount == rhs.today_recv_amount))
      return false;
    if (!(role_id == rhs.role_id))
      return false;
    return true;
  }
  bool operator != (const BoxNotify &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BoxNotify & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BoxNotify &a, BoxNotify &b);

typedef struct _UpdateUserStatusReq__isset {
  _UpdateUserStatusReq__isset() : status_value(false), status_text(false) {}
  bool status_value;
  bool status_text;
} _UpdateUserStatusReq__isset;

class UpdateUserStatusReq {
 public:

  static const char* ascii_fingerprint; // = "15896F1A4438B1ECBB80CEA66AD0C4C5";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x89,0x6F,0x1A,0x44,0x38,0xB1,0xEC,0xBB,0x80,0xCE,0xA6,0x6A,0xD0,0xC4,0xC5};

  UpdateUserStatusReq() : status_value(0), status_text() {
  }

  virtual ~UpdateUserStatusReq() throw() {}

  int16_t status_value;
  std::string status_text;

  _UpdateUserStatusReq__isset __isset;

  void __set_status_value(const int16_t val) {
    status_value = val;
  }

  void __set_status_text(const std::string& val) {
    status_text = val;
  }

  bool operator == (const UpdateUserStatusReq & rhs) const
  {
    if (!(status_value == rhs.status_value))
      return false;
    if (!(status_text == rhs.status_text))
      return false;
    return true;
  }
  bool operator != (const UpdateUserStatusReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateUserStatusReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UpdateUserStatusReq &a, UpdateUserStatusReq &b);

typedef struct _AccountLockReq__isset {
  _AccountLockReq__isset() : to_good_number(false), to_ip(false), to_mac(false) {}
  bool to_good_number;
  bool to_ip;
  bool to_mac;
} _AccountLockReq__isset;

class AccountLockReq {
 public:

  static const char* ascii_fingerprint; // = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};

  AccountLockReq() : to_good_number(0), to_ip(), to_mac() {
  }

  virtual ~AccountLockReq() throw() {}

  int32_t to_good_number;
  std::string to_ip;
  std::string to_mac;

  _AccountLockReq__isset __isset;

  void __set_to_good_number(const int32_t val) {
    to_good_number = val;
  }

  void __set_to_ip(const std::string& val) {
    to_ip = val;
  }

  void __set_to_mac(const std::string& val) {
    to_mac = val;
  }

  bool operator == (const AccountLockReq & rhs) const
  {
    if (!(to_good_number == rhs.to_good_number))
      return false;
    if (!(to_ip == rhs.to_ip))
      return false;
    if (!(to_mac == rhs.to_mac))
      return false;
    return true;
  }
  bool operator != (const AccountLockReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccountLockReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AccountLockReq &a, AccountLockReq &b);

typedef struct _GiftPrizeNotify__isset {
  _GiftPrizeNotify__isset() : good_number(false), user_nick_name(false), multiple(false), prize_gift_id(false), prize_amount(false), prize_multiples(false), user_role_icon_id(false) {}
  bool good_number;
  bool user_nick_name;
  bool multiple;
  bool prize_gift_id;
  bool prize_amount;
  bool prize_multiples;
  bool user_role_icon_id;
} _GiftPrizeNotify__isset;

class GiftPrizeNotify {
 public:

  static const char* ascii_fingerprint; // = "AA3B41FF66B6A4B1E93B48B4763B04D0";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0x3B,0x41,0xFF,0x66,0xB6,0xA4,0xB1,0xE9,0x3B,0x48,0xB4,0x76,0x3B,0x04,0xD0};

  GiftPrizeNotify() : good_number(0), user_nick_name(), multiple(0), prize_gift_id(0), prize_amount(0), user_role_icon_id(0) {
  }

  virtual ~GiftPrizeNotify() throw() {}

  int32_t good_number;
  std::string user_nick_name;
  int32_t multiple;
  int32_t prize_gift_id;
  int32_t prize_amount;
  std::vector<int16_t>  prize_multiples;
  int32_t user_role_icon_id;

  _GiftPrizeNotify__isset __isset;

  void __set_good_number(const int32_t val) {
    good_number = val;
  }

  void __set_user_nick_name(const std::string& val) {
    user_nick_name = val;
  }

  void __set_multiple(const int32_t val) {
    multiple = val;
  }

  void __set_prize_gift_id(const int32_t val) {
    prize_gift_id = val;
  }

  void __set_prize_amount(const int32_t val) {
    prize_amount = val;
  }

  void __set_prize_multiples(const std::vector<int16_t> & val) {
    prize_multiples = val;
  }

  void __set_user_role_icon_id(const int32_t val) {
    user_role_icon_id = val;
  }

  bool operator == (const GiftPrizeNotify & rhs) const
  {
    if (!(good_number == rhs.good_number))
      return false;
    if (!(user_nick_name == rhs.user_nick_name))
      return false;
    if (!(multiple == rhs.multiple))
      return false;
    if (!(prize_gift_id == rhs.prize_gift_id))
      return false;
    if (!(prize_amount == rhs.prize_amount))
      return false;
    if (!(prize_multiples == rhs.prize_multiples))
      return false;
    if (!(user_role_icon_id == rhs.user_role_icon_id))
      return false;
    return true;
  }
  bool operator != (const GiftPrizeNotify &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GiftPrizeNotify & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GiftPrizeNotify &a, GiftPrizeNotify &b);

}} // namespace

#endif
