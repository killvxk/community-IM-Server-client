/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef room_gate_TYPES_H
#define room_gate_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "common_types.h"


namespace community { namespace room_gate {

struct MessageType {
  enum type {
    MT_CONNECT_REQ = 600,
    MT_CONNECT_RES = 601,
    MT_GET_ROOMLIST_REQ = 602,
    MT_GET_ROOMLIST_RES = 603,
    MT_UPDATE_ROOMLIST_NOTIFY = 604,
    UPDATE_USERINFO_REQ = 605,
    UPDATE_USERINFO_RES = 606
  };
};

extern const std::map<int, const char*> _MessageType_VALUES_TO_NAMES;

typedef struct _ConnectReq__isset {
  _ConnectReq__isset() : sessoin_ticket(false), client_random(false), server_random(false), checksum(false) {}
  bool sessoin_ticket;
  bool client_random;
  bool server_random;
  bool checksum;
} _ConnectReq__isset;

class ConnectReq {
 public:

  static const char* ascii_fingerprint; // = "BBC7293064E33026818BA3BBF9CEDECD";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0xC7,0x29,0x30,0x64,0xE3,0x30,0x26,0x81,0x8B,0xA3,0xBB,0xF9,0xCE,0xDE,0xCD};

  ConnectReq() : sessoin_ticket(), client_random(0), server_random(0), checksum() {
  }

  virtual ~ConnectReq() throw() {}

  std::string sessoin_ticket;
  int64_t client_random;
  int64_t server_random;
  std::string checksum;

  _ConnectReq__isset __isset;

  void __set_sessoin_ticket(const std::string& val) {
    sessoin_ticket = val;
  }

  void __set_client_random(const int64_t val) {
    client_random = val;
  }

  void __set_server_random(const int64_t val) {
    server_random = val;
  }

  void __set_checksum(const std::string& val) {
    checksum = val;
  }

  bool operator == (const ConnectReq & rhs) const
  {
    if (!(sessoin_ticket == rhs.sessoin_ticket))
      return false;
    if (!(client_random == rhs.client_random))
      return false;
    if (!(server_random == rhs.server_random))
      return false;
    if (!(checksum == rhs.checksum))
      return false;
    return true;
  }
  bool operator != (const ConnectReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConnectReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ConnectReq &a, ConnectReq &b);

typedef struct _ConnectChecksum__isset {
  _ConnectChecksum__isset() : user_id(false), session_key(false), client_random(false), server_random(false) {}
  bool user_id;
  bool session_key;
  bool client_random;
  bool server_random;
} _ConnectChecksum__isset;

class ConnectChecksum {
 public:

  static const char* ascii_fingerprint; // = "402AD47659A8C66675C5D0A8EF2484F9";
  static const uint8_t binary_fingerprint[16]; // = {0x40,0x2A,0xD4,0x76,0x59,0xA8,0xC6,0x66,0x75,0xC5,0xD0,0xA8,0xEF,0x24,0x84,0xF9};

  ConnectChecksum() : user_id(0), session_key(), client_random(0), server_random(0) {
  }

  virtual ~ConnectChecksum() throw() {}

  int32_t user_id;
  std::string session_key;
  int64_t client_random;
  int64_t server_random;

  _ConnectChecksum__isset __isset;

  void __set_user_id(const int32_t val) {
    user_id = val;
  }

  void __set_session_key(const std::string& val) {
    session_key = val;
  }

  void __set_client_random(const int64_t val) {
    client_random = val;
  }

  void __set_server_random(const int64_t val) {
    server_random = val;
  }

  bool operator == (const ConnectChecksum & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(session_key == rhs.session_key))
      return false;
    if (!(client_random == rhs.client_random))
      return false;
    if (!(server_random == rhs.server_random))
      return false;
    return true;
  }
  bool operator != (const ConnectChecksum &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConnectChecksum & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ConnectChecksum &a, ConnectChecksum &b);

typedef struct _RoomInfo__isset {
  _RoomInfo__isset() : room_id(false), room_name(false), room_resource_url(false), room_category(false) {}
  bool room_id;
  bool room_name;
  bool room_resource_url;
  bool room_category;
} _RoomInfo__isset;

class RoomInfo {
 public:

  static const char* ascii_fingerprint; // = "E162B1F7953C55D6B978645D745A3B90";
  static const uint8_t binary_fingerprint[16]; // = {0xE1,0x62,0xB1,0xF7,0x95,0x3C,0x55,0xD6,0xB9,0x78,0x64,0x5D,0x74,0x5A,0x3B,0x90};

  RoomInfo() : room_id(0), room_name(), room_resource_url(), room_category(0) {
  }

  virtual ~RoomInfo() throw() {}

  int32_t room_id;
  std::string room_name;
  std::string room_resource_url;
  int32_t room_category;

  _RoomInfo__isset __isset;

  void __set_room_id(const int32_t val) {
    room_id = val;
  }

  void __set_room_name(const std::string& val) {
    room_name = val;
  }

  void __set_room_resource_url(const std::string& val) {
    room_resource_url = val;
  }

  void __set_room_category(const int32_t val) {
    room_category = val;
  }

  bool operator == (const RoomInfo & rhs) const
  {
    if (!(room_id == rhs.room_id))
      return false;
    if (!(room_name == rhs.room_name))
      return false;
    if (!(room_resource_url == rhs.room_resource_url))
      return false;
    if (!(room_category == rhs.room_category))
      return false;
    return true;
  }
  bool operator != (const RoomInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RoomInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RoomInfo &a, RoomInfo &b);

typedef struct _GetRoomlistRes__isset {
  _GetRoomlistRes__isset() : error_code(false), error_text(false), room_list(false) {}
  bool error_code;
  bool error_text;
  bool room_list;
} _GetRoomlistRes__isset;

class GetRoomlistRes {
 public:

  static const char* ascii_fingerprint; // = "8F845F1994330938F1C40229ABDA382A";
  static const uint8_t binary_fingerprint[16]; // = {0x8F,0x84,0x5F,0x19,0x94,0x33,0x09,0x38,0xF1,0xC4,0x02,0x29,0xAB,0xDA,0x38,0x2A};

  GetRoomlistRes() : error_code(0), error_text() {
  }

  virtual ~GetRoomlistRes() throw() {}

  int16_t error_code;
  std::string error_text;
  std::vector<RoomInfo>  room_list;

  _GetRoomlistRes__isset __isset;

  void __set_error_code(const int16_t val) {
    error_code = val;
  }

  void __set_error_text(const std::string& val) {
    error_text = val;
  }

  void __set_room_list(const std::vector<RoomInfo> & val) {
    room_list = val;
  }

  bool operator == (const GetRoomlistRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    if (!(room_list == rhs.room_list))
      return false;
    return true;
  }
  bool operator != (const GetRoomlistRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetRoomlistRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetRoomlistRes &a, GetRoomlistRes &b);

typedef struct _UpdateUserinfoReq__isset {
  _UpdateUserinfoReq__isset() : nick_name(false), avatar_url(false), sign_name(false), gender(false), birthdate(false), chinese_zodiac(false), zodiac(false), blood_type(false), interest(false), character(false), chest(false), waist(false), hip(false), address(false) {}
  bool nick_name;
  bool avatar_url;
  bool sign_name;
  bool gender;
  bool birthdate;
  bool chinese_zodiac;
  bool zodiac;
  bool blood_type;
  bool interest;
  bool character;
  bool chest;
  bool waist;
  bool hip;
  bool address;
} _UpdateUserinfoReq__isset;

class UpdateUserinfoReq {
 public:

  static const char* ascii_fingerprint; // = "1A5CC49B49E6173B0B260DC0AA563BC4";
  static const uint8_t binary_fingerprint[16]; // = {0x1A,0x5C,0xC4,0x9B,0x49,0xE6,0x17,0x3B,0x0B,0x26,0x0D,0xC0,0xAA,0x56,0x3B,0xC4};

  UpdateUserinfoReq() : nick_name(), avatar_url(), sign_name(), gender(0), birthdate(), chinese_zodiac(), zodiac(), blood_type(), interest(), character(), chest(0), waist(0), hip(0), address() {
  }

  virtual ~UpdateUserinfoReq() throw() {}

  std::string nick_name;
  std::string avatar_url;
  std::string sign_name;
  int8_t gender;
  std::string birthdate;
  std::string chinese_zodiac;
  std::string zodiac;
  std::string blood_type;
  std::string interest;
  std::string character;
  int16_t chest;
  int16_t waist;
  int16_t hip;
  std::string address;

  _UpdateUserinfoReq__isset __isset;

  void __set_nick_name(const std::string& val) {
    nick_name = val;
  }

  void __set_avatar_url(const std::string& val) {
    avatar_url = val;
  }

  void __set_sign_name(const std::string& val) {
    sign_name = val;
  }

  void __set_gender(const int8_t val) {
    gender = val;
  }

  void __set_birthdate(const std::string& val) {
    birthdate = val;
  }

  void __set_chinese_zodiac(const std::string& val) {
    chinese_zodiac = val;
  }

  void __set_zodiac(const std::string& val) {
    zodiac = val;
  }

  void __set_blood_type(const std::string& val) {
    blood_type = val;
  }

  void __set_interest(const std::string& val) {
    interest = val;
  }

  void __set_character(const std::string& val) {
    character = val;
  }

  void __set_chest(const int16_t val) {
    chest = val;
  }

  void __set_waist(const int16_t val) {
    waist = val;
  }

  void __set_hip(const int16_t val) {
    hip = val;
  }

  void __set_address(const std::string& val) {
    address = val;
  }

  bool operator == (const UpdateUserinfoReq & rhs) const
  {
    if (!(nick_name == rhs.nick_name))
      return false;
    if (!(avatar_url == rhs.avatar_url))
      return false;
    if (!(sign_name == rhs.sign_name))
      return false;
    if (!(gender == rhs.gender))
      return false;
    if (!(birthdate == rhs.birthdate))
      return false;
    if (!(chinese_zodiac == rhs.chinese_zodiac))
      return false;
    if (!(zodiac == rhs.zodiac))
      return false;
    if (!(blood_type == rhs.blood_type))
      return false;
    if (!(interest == rhs.interest))
      return false;
    if (!(character == rhs.character))
      return false;
    if (!(chest == rhs.chest))
      return false;
    if (!(waist == rhs.waist))
      return false;
    if (!(hip == rhs.hip))
      return false;
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const UpdateUserinfoReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateUserinfoReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UpdateUserinfoReq &a, UpdateUserinfoReq &b);

}} // namespace

#endif
