/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef common_TYPES_H
#define common_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace community { namespace common {

struct MessageType {
  enum type {
    MT_HELLO_REQ = 100,
    MT_HELLO_RES = 101,
    MT_HELLO_NOTIFY = 102,
    MT_KEEPALIVE_REQ = 103,
    MT_KEEPALIVE_RES = 104
  };
};

extern const std::map<int, const char*> _MessageType_VALUES_TO_NAMES;

struct ErrorCode {
  enum type {
    OK = 0,
    TICKET_INVALID = 100,
    LOGNAME_EXIST = 101,
    LOGNAME_NOT_EXIST = 102,
    PASSWORD_ERROR = 103,
    USERID_INVALID = 104,
    PASS_EXPIRYDATE = 105,
    ACCOUNT_LOCKED = 106,
    INVALID_ACCOUNT = 107,
    CLIENT_VERSION_INVALID = 108,
    ACCOUNT_ACCTIVED = 109,
    VERIFYCODE_VERIFIED = 110,
    USER_IN_BLACKLIST = 111,
    LOGIN_CONNECT_ERROR = 112,
    ROOMGATE_CONNECT_ERROR = 113,
    NICKNAME_DUPLICATE = 114,
    ROOM_UNKNOWN = 115,
    ROOM_STATUS_NO_STARTUP = 116,
    ROOM_STATUS_CLOSE = 117,
    ROOM_STATUS_LOCKED = 118,
    ROOM_USER_TICKET_INVALID = 119,
    ROOM_USER_ID_INVALID = 120,
    ROOM_USER_NO_AUTHORITY = 121,
    ROOM_USER_MONEY_LESS = 122,
    ROOM_USER_KICK_OUT = 123,
    ROOM_USER_OTHER_LOCAL_LOGIN = 124,
    ROOM_USER_COUNT_MAX = 125,
    ROOM_NEED_PASSWORD = 126,
    ROOM_PASSORD_ERROR = 127,
    ROOM_TO_USERID_INVALID = 128,
    REQUEST_ERROR = 129,
    REQUEST_TIMEOUT = 130,
    DB_CONNECT_ERROR = 131,
    DB_OPERATION_EXCEPTION = 132,
    SYSTEM_BUSY = 133,
    UNKOWN_ERROR = 134
  };
};

extern const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES;

typedef struct _ServiceAddr__isset {
  _ServiceAddr__isset() : ip(false), port(false) {}
  bool ip;
  bool port;
} _ServiceAddr__isset;

class ServiceAddr {
 public:

  static const char* ascii_fingerprint; // = "3628A1EB414F66736E1B2A082E79475F";
  static const uint8_t binary_fingerprint[16]; // = {0x36,0x28,0xA1,0xEB,0x41,0x4F,0x66,0x73,0x6E,0x1B,0x2A,0x08,0x2E,0x79,0x47,0x5F};

  ServiceAddr() : ip(), port(0) {
  }

  virtual ~ServiceAddr() throw() {}

  std::string ip;
  int16_t port;

  _ServiceAddr__isset __isset;

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_port(const int16_t val) {
    port = val;
  }

  bool operator == (const ServiceAddr & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const ServiceAddr &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceAddr & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ServiceAddr &a, ServiceAddr &b);

typedef struct _ServiceInfo__isset {
  _ServiceInfo__isset() : service_id(false), service_name(false), service_weight(false), service_addr(false) {}
  bool service_id;
  bool service_name;
  bool service_weight;
  bool service_addr;
} _ServiceInfo__isset;

class ServiceInfo {
 public:

  static const char* ascii_fingerprint; // = "94174AFF3CED2B50B7EBD6E1A547A9B4";
  static const uint8_t binary_fingerprint[16]; // = {0x94,0x17,0x4A,0xFF,0x3C,0xED,0x2B,0x50,0xB7,0xEB,0xD6,0xE1,0xA5,0x47,0xA9,0xB4};

  ServiceInfo() : service_id(0), service_name(), service_weight(0) {
  }

  virtual ~ServiceInfo() throw() {}

  int32_t service_id;
  std::string service_name;
  int16_t service_weight;
  ServiceAddr service_addr;

  _ServiceInfo__isset __isset;

  void __set_service_id(const int32_t val) {
    service_id = val;
  }

  void __set_service_name(const std::string& val) {
    service_name = val;
  }

  void __set_service_weight(const int16_t val) {
    service_weight = val;
  }

  void __set_service_addr(const ServiceAddr& val) {
    service_addr = val;
  }

  bool operator == (const ServiceInfo & rhs) const
  {
    if (!(service_id == rhs.service_id))
      return false;
    if (!(service_name == rhs.service_name))
      return false;
    if (!(service_weight == rhs.service_weight))
      return false;
    if (!(service_addr == rhs.service_addr))
      return false;
    return true;
  }
  bool operator != (const ServiceInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ServiceInfo &a, ServiceInfo &b);

typedef struct _HelloReq__isset {
  _HelloReq__isset() : service_info(false) {}
  bool service_info;
} _HelloReq__isset;

class HelloReq {
 public:

  static const char* ascii_fingerprint; // = "1F8AC3592E0D846CE58BAC5A6B688042";
  static const uint8_t binary_fingerprint[16]; // = {0x1F,0x8A,0xC3,0x59,0x2E,0x0D,0x84,0x6C,0xE5,0x8B,0xAC,0x5A,0x6B,0x68,0x80,0x42};

  HelloReq() {
  }

  virtual ~HelloReq() throw() {}

  ServiceInfo service_info;

  _HelloReq__isset __isset;

  void __set_service_info(const ServiceInfo& val) {
    service_info = val;
  }

  bool operator == (const HelloReq & rhs) const
  {
    if (!(service_info == rhs.service_info))
      return false;
    return true;
  }
  bool operator != (const HelloReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HelloReq &a, HelloReq &b);

typedef struct _HelloNotify__isset {
  _HelloNotify__isset() : error_code(false), error_text(false), service_name(false), service_id(false), server_random(false), server_time(false) {}
  bool error_code;
  bool error_text;
  bool service_name;
  bool service_id;
  bool server_random;
  bool server_time;
} _HelloNotify__isset;

class HelloNotify {
 public:

  static const char* ascii_fingerprint; // = "2876446EDD1CDFE933A3B52568B4C577";
  static const uint8_t binary_fingerprint[16]; // = {0x28,0x76,0x44,0x6E,0xDD,0x1C,0xDF,0xE9,0x33,0xA3,0xB5,0x25,0x68,0xB4,0xC5,0x77};

  HelloNotify() : error_code(0), error_text(), service_name(), service_id(0), server_random(0), server_time(0) {
  }

  virtual ~HelloNotify() throw() {}

  int16_t error_code;
  std::string error_text;
  std::string service_name;
  int32_t service_id;
  int64_t server_random;
  int64_t server_time;

  _HelloNotify__isset __isset;

  void __set_error_code(const int16_t val) {
    error_code = val;
  }

  void __set_error_text(const std::string& val) {
    error_text = val;
  }

  void __set_service_name(const std::string& val) {
    service_name = val;
  }

  void __set_service_id(const int32_t val) {
    service_id = val;
  }

  void __set_server_random(const int64_t val) {
    server_random = val;
  }

  void __set_server_time(const int64_t val) {
    server_time = val;
  }

  bool operator == (const HelloNotify & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    if (!(service_name == rhs.service_name))
      return false;
    if (!(service_id == rhs.service_id))
      return false;
    if (!(server_random == rhs.server_random))
      return false;
    if (!(server_time == rhs.server_time))
      return false;
    return true;
  }
  bool operator != (const HelloNotify &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloNotify & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HelloNotify &a, HelloNotify &b);

typedef struct _SessionTicket__isset {
  _SessionTicket__isset() : user_id(false), user_name(false), email(false), nick_name(false), client_ip(false), client_mac(false), client_version(false), app_id(false), session_id(false), session_key(false), create_time(false), end_time(false) {}
  bool user_id;
  bool user_name;
  bool email;
  bool nick_name;
  bool client_ip;
  bool client_mac;
  bool client_version;
  bool app_id;
  bool session_id;
  bool session_key;
  bool create_time;
  bool end_time;
} _SessionTicket__isset;

class SessionTicket {
 public:

  static const char* ascii_fingerprint; // = "4C747215BAE6A75D83DE6591082EBCCA";
  static const uint8_t binary_fingerprint[16]; // = {0x4C,0x74,0x72,0x15,0xBA,0xE6,0xA7,0x5D,0x83,0xDE,0x65,0x91,0x08,0x2E,0xBC,0xCA};

  SessionTicket() : user_id(0), user_name(), email(), nick_name(), client_ip(), client_mac(), client_version(), app_id(0), session_id(), session_key(), create_time(0), end_time(0) {
  }

  virtual ~SessionTicket() throw() {}

  int32_t user_id;
  std::string user_name;
  std::string email;
  std::string nick_name;
  std::string client_ip;
  std::string client_mac;
  std::string client_version;
  int32_t app_id;
  std::string session_id;
  std::string session_key;
  int64_t create_time;
  int64_t end_time;

  _SessionTicket__isset __isset;

  void __set_user_id(const int32_t val) {
    user_id = val;
  }

  void __set_user_name(const std::string& val) {
    user_name = val;
  }

  void __set_email(const std::string& val) {
    email = val;
  }

  void __set_nick_name(const std::string& val) {
    nick_name = val;
  }

  void __set_client_ip(const std::string& val) {
    client_ip = val;
  }

  void __set_client_mac(const std::string& val) {
    client_mac = val;
  }

  void __set_client_version(const std::string& val) {
    client_version = val;
  }

  void __set_app_id(const int32_t val) {
    app_id = val;
  }

  void __set_session_id(const std::string& val) {
    session_id = val;
  }

  void __set_session_key(const std::string& val) {
    session_key = val;
  }

  void __set_create_time(const int64_t val) {
    create_time = val;
  }

  void __set_end_time(const int64_t val) {
    end_time = val;
  }

  bool operator == (const SessionTicket & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(user_name == rhs.user_name))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(nick_name == rhs.nick_name))
      return false;
    if (!(client_ip == rhs.client_ip))
      return false;
    if (!(client_mac == rhs.client_mac))
      return false;
    if (!(client_version == rhs.client_version))
      return false;
    if (!(app_id == rhs.app_id))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    if (!(session_key == rhs.session_key))
      return false;
    if (!(create_time == rhs.create_time))
      return false;
    if (!(end_time == rhs.end_time))
      return false;
    return true;
  }
  bool operator != (const SessionTicket &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SessionTicket & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SessionTicket &a, SessionTicket &b);


class CommonNull {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  CommonNull() {
  }

  virtual ~CommonNull() throw() {}


  bool operator == (const CommonNull & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CommonNull &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonNull & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CommonNull &a, CommonNull &b);

typedef struct _CommonRes__isset {
  _CommonRes__isset() : error_code(false), error_text(false) {}
  bool error_code;
  bool error_text;
} _CommonRes__isset;

class CommonRes {
 public:

  static const char* ascii_fingerprint; // = "15896F1A4438B1ECBB80CEA66AD0C4C5";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x89,0x6F,0x1A,0x44,0x38,0xB1,0xEC,0xBB,0x80,0xCE,0xA6,0x6A,0xD0,0xC4,0xC5};

  CommonRes() : error_code(0), error_text() {
  }

  virtual ~CommonRes() throw() {}

  int16_t error_code;
  std::string error_text;

  _CommonRes__isset __isset;

  void __set_error_code(const int16_t val) {
    error_code = val;
  }

  void __set_error_text(const std::string& val) {
    error_text = val;
  }

  bool operator == (const CommonRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    return true;
  }
  bool operator != (const CommonRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CommonRes &a, CommonRes &b);

typedef struct _KeepAliveReq__isset {
  _KeepAliveReq__isset() : req_id(false), current_time_req(false), network_status_level(false) {}
  bool req_id;
  bool current_time_req;
  bool network_status_level;
} _KeepAliveReq__isset;

class KeepAliveReq {
 public:

  static const char* ascii_fingerprint; // = "E5DA6AD560D49372EB1054016CE7C84D";
  static const uint8_t binary_fingerprint[16]; // = {0xE5,0xDA,0x6A,0xD5,0x60,0xD4,0x93,0x72,0xEB,0x10,0x54,0x01,0x6C,0xE7,0xC8,0x4D};

  KeepAliveReq() : req_id(0), current_time_req(0), network_status_level(0) {
  }

  virtual ~KeepAliveReq() throw() {}

  int32_t req_id;
  int64_t current_time_req;
  int16_t network_status_level;

  _KeepAliveReq__isset __isset;

  void __set_req_id(const int32_t val) {
    req_id = val;
  }

  void __set_current_time_req(const int64_t val) {
    current_time_req = val;
  }

  void __set_network_status_level(const int16_t val) {
    network_status_level = val;
  }

  bool operator == (const KeepAliveReq & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(current_time_req == rhs.current_time_req))
      return false;
    if (!(network_status_level == rhs.network_status_level))
      return false;
    return true;
  }
  bool operator != (const KeepAliveReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeepAliveReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(KeepAliveReq &a, KeepAliveReq &b);

typedef struct _KeepAliveRes__isset {
  _KeepAliveRes__isset() : error_code(false), error_text(false), req_id(false), current_time_req(false), current_time_res(false) {}
  bool error_code;
  bool error_text;
  bool req_id;
  bool current_time_req;
  bool current_time_res;
} _KeepAliveRes__isset;

class KeepAliveRes {
 public:

  static const char* ascii_fingerprint; // = "EA8B51362DF46E243B1C2354930D6C5C";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x8B,0x51,0x36,0x2D,0xF4,0x6E,0x24,0x3B,0x1C,0x23,0x54,0x93,0x0D,0x6C,0x5C};

  KeepAliveRes() : error_code(0), error_text(), req_id(0), current_time_req(0), current_time_res(0) {
  }

  virtual ~KeepAliveRes() throw() {}

  int16_t error_code;
  std::string error_text;
  int32_t req_id;
  int64_t current_time_req;
  int64_t current_time_res;

  _KeepAliveRes__isset __isset;

  void __set_error_code(const int16_t val) {
    error_code = val;
  }

  void __set_error_text(const std::string& val) {
    error_text = val;
  }

  void __set_req_id(const int32_t val) {
    req_id = val;
  }

  void __set_current_time_req(const int64_t val) {
    current_time_req = val;
  }

  void __set_current_time_res(const int64_t val) {
    current_time_res = val;
  }

  bool operator == (const KeepAliveRes & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_text == rhs.error_text))
      return false;
    if (!(req_id == rhs.req_id))
      return false;
    if (!(current_time_req == rhs.current_time_req))
      return false;
    if (!(current_time_res == rhs.current_time_res))
      return false;
    return true;
  }
  bool operator != (const KeepAliveRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeepAliveRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(KeepAliveRes &a, KeepAliveRes &b);

typedef struct _UserInfo__isset {
  _UserInfo__isset() : user_id(false), user_name(false), password(false), email(false), nick_name(false), avatar_url(false), birthdate(false), base_role_id(false), gender(false), chinese_zodiac(false), zodiac(false), blood_type(false), interest(false), character(false), sign_name(false), chest(false), waist(false), hip(false), address(false) {}
  bool user_id;
  bool user_name;
  bool password;
  bool email;
  bool nick_name;
  bool avatar_url;
  bool birthdate;
  bool base_role_id;
  bool gender;
  bool chinese_zodiac;
  bool zodiac;
  bool blood_type;
  bool interest;
  bool character;
  bool sign_name;
  bool chest;
  bool waist;
  bool hip;
  bool address;
} _UserInfo__isset;

class UserInfo {
 public:

  static const char* ascii_fingerprint; // = "BCCB316343B620361CE3EA74C448F376";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0xCB,0x31,0x63,0x43,0xB6,0x20,0x36,0x1C,0xE3,0xEA,0x74,0xC4,0x48,0xF3,0x76};

  UserInfo() : user_id(0), user_name(), password(), email(), nick_name(), avatar_url(), birthdate(), base_role_id(0), gender(0), chinese_zodiac(), zodiac(), blood_type(), interest(), character(), sign_name(), chest(0), waist(0), hip(0), address() {
  }

  virtual ~UserInfo() throw() {}

  int32_t user_id;
  std::string user_name;
  std::string password;
  std::string email;
  std::string nick_name;
  std::string avatar_url;
  std::string birthdate;
  int16_t base_role_id;
  int8_t gender;
  std::string chinese_zodiac;
  std::string zodiac;
  std::string blood_type;
  std::string interest;
  std::string character;
  std::string sign_name;
  int16_t chest;
  int16_t waist;
  int16_t hip;
  std::string address;

  _UserInfo__isset __isset;

  void __set_user_id(const int32_t val) {
    user_id = val;
  }

  void __set_user_name(const std::string& val) {
    user_name = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  void __set_email(const std::string& val) {
    email = val;
  }

  void __set_nick_name(const std::string& val) {
    nick_name = val;
  }

  void __set_avatar_url(const std::string& val) {
    avatar_url = val;
  }

  void __set_birthdate(const std::string& val) {
    birthdate = val;
  }

  void __set_base_role_id(const int16_t val) {
    base_role_id = val;
  }

  void __set_gender(const int8_t val) {
    gender = val;
  }

  void __set_chinese_zodiac(const std::string& val) {
    chinese_zodiac = val;
  }

  void __set_zodiac(const std::string& val) {
    zodiac = val;
  }

  void __set_blood_type(const std::string& val) {
    blood_type = val;
  }

  void __set_interest(const std::string& val) {
    interest = val;
  }

  void __set_character(const std::string& val) {
    character = val;
  }

  void __set_sign_name(const std::string& val) {
    sign_name = val;
  }

  void __set_chest(const int16_t val) {
    chest = val;
  }

  void __set_waist(const int16_t val) {
    waist = val;
  }

  void __set_hip(const int16_t val) {
    hip = val;
  }

  void __set_address(const std::string& val) {
    address = val;
  }

  bool operator == (const UserInfo & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(user_name == rhs.user_name))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(nick_name == rhs.nick_name))
      return false;
    if (!(avatar_url == rhs.avatar_url))
      return false;
    if (!(birthdate == rhs.birthdate))
      return false;
    if (!(base_role_id == rhs.base_role_id))
      return false;
    if (!(gender == rhs.gender))
      return false;
    if (!(chinese_zodiac == rhs.chinese_zodiac))
      return false;
    if (!(zodiac == rhs.zodiac))
      return false;
    if (!(blood_type == rhs.blood_type))
      return false;
    if (!(interest == rhs.interest))
      return false;
    if (!(character == rhs.character))
      return false;
    if (!(sign_name == rhs.sign_name))
      return false;
    if (!(chest == rhs.chest))
      return false;
    if (!(waist == rhs.waist))
      return false;
    if (!(hip == rhs.hip))
      return false;
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const UserInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UserInfo &a, UserInfo &b);

}} // namespace

#endif
