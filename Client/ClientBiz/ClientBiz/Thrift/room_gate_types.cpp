/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "room_gate_types.h"

#include <algorithm>

namespace community { namespace room_gate {

int _kMessageTypeValues[] = {
  MessageType::MT_CONNECT_REQ,
  MessageType::MT_CONNECT_RES,
  MessageType::MT_GET_ROOMLIST_REQ,
  MessageType::MT_GET_ROOMLIST_RES,
  MessageType::MT_UPDATE_ROOMLIST_NOTIFY,
  MessageType::UPDATE_USERINFO_REQ,
  MessageType::UPDATE_USERINFO_RES
};
const char* _kMessageTypeNames[] = {
  "MT_CONNECT_REQ",
  "MT_CONNECT_RES",
  "MT_GET_ROOMLIST_REQ",
  "MT_GET_ROOMLIST_RES",
  "MT_UPDATE_ROOMLIST_NOTIFY",
  "UPDATE_USERINFO_REQ",
  "UPDATE_USERINFO_RES"
};
const std::map<int, const char*> _MessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kMessageTypeValues, _kMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* ConnectReq::ascii_fingerprint = "BBC7293064E33026818BA3BBF9CEDECD";
const uint8_t ConnectReq::binary_fingerprint[16] = {0xBB,0xC7,0x29,0x30,0x64,0xE3,0x30,0x26,0x81,0x8B,0xA3,0xBB,0xF9,0xCE,0xDE,0xCD};

uint32_t ConnectReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sessoin_ticket);
          this->__isset.sessoin_ticket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->client_random);
          this->__isset.client_random = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->server_random);
          this->__isset.server_random = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->checksum);
          this->__isset.checksum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ConnectReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ConnectReq");

  xfer += oprot->writeFieldBegin("sessoin_ticket", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->sessoin_ticket);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_random", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->client_random);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("server_random", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->server_random);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("checksum", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->checksum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ConnectReq &a, ConnectReq &b) {
  using ::std::swap;
  swap(a.sessoin_ticket, b.sessoin_ticket);
  swap(a.client_random, b.client_random);
  swap(a.server_random, b.server_random);
  swap(a.checksum, b.checksum);
  swap(a.__isset, b.__isset);
}

const char* ConnectChecksum::ascii_fingerprint = "402AD47659A8C66675C5D0A8EF2484F9";
const uint8_t ConnectChecksum::binary_fingerprint[16] = {0x40,0x2A,0xD4,0x76,0x59,0xA8,0xC6,0x66,0x75,0xC5,0xD0,0xA8,0xEF,0x24,0x84,0xF9};

uint32_t ConnectChecksum::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->session_key);
          this->__isset.session_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->client_random);
          this->__isset.client_random = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->server_random);
          this->__isset.server_random = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ConnectChecksum::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ConnectChecksum");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_key", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->session_key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("client_random", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->client_random);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("server_random", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->server_random);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ConnectChecksum &a, ConnectChecksum &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.session_key, b.session_key);
  swap(a.client_random, b.client_random);
  swap(a.server_random, b.server_random);
  swap(a.__isset, b.__isset);
}

const char* RoomInfo::ascii_fingerprint = "E162B1F7953C55D6B978645D745A3B90";
const uint8_t RoomInfo::binary_fingerprint[16] = {0xE1,0x62,0xB1,0xF7,0x95,0x3C,0x55,0xD6,0xB9,0x78,0x64,0x5D,0x74,0x5A,0x3B,0x90};

uint32_t RoomInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->room_id);
          this->__isset.room_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->room_name);
          this->__isset.room_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->room_resource_url);
          this->__isset.room_resource_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->room_category);
          this->__isset.room_category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RoomInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RoomInfo");

  xfer += oprot->writeFieldBegin("room_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->room_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->room_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_resource_url", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->room_resource_url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_category", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->room_category);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RoomInfo &a, RoomInfo &b) {
  using ::std::swap;
  swap(a.room_id, b.room_id);
  swap(a.room_name, b.room_name);
  swap(a.room_resource_url, b.room_resource_url);
  swap(a.room_category, b.room_category);
  swap(a.__isset, b.__isset);
}

const char* GetRoomlistRes::ascii_fingerprint = "8F845F1994330938F1C40229ABDA382A";
const uint8_t GetRoomlistRes::binary_fingerprint[16] = {0x8F,0x84,0x5F,0x19,0x94,0x33,0x09,0x38,0xF1,0xC4,0x02,0x29,0xAB,0xDA,0x38,0x2A};

uint32_t GetRoomlistRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_text);
          this->__isset.error_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->room_list.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->room_list.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->room_list[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.room_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetRoomlistRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GetRoomlistRes");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room_list", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->room_list.size()));
    std::vector<RoomInfo> ::const_iterator _iter5;
    for (_iter5 = this->room_list.begin(); _iter5 != this->room_list.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetRoomlistRes &a, GetRoomlistRes &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_text, b.error_text);
  swap(a.room_list, b.room_list);
  swap(a.__isset, b.__isset);
}

const char* UpdateUserinfoReq::ascii_fingerprint = "1A5CC49B49E6173B0B260DC0AA563BC4";
const uint8_t UpdateUserinfoReq::binary_fingerprint[16] = {0x1A,0x5C,0xC4,0x9B,0x49,0xE6,0x17,0x3B,0x0B,0x26,0x0D,0xC0,0xAA,0x56,0x3B,0xC4};

uint32_t UpdateUserinfoReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nick_name);
          this->__isset.nick_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->avatar_url);
          this->__isset.avatar_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sign_name);
          this->__isset.sign_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->gender);
          this->__isset.gender = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->birthdate);
          this->__isset.birthdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chinese_zodiac);
          this->__isset.chinese_zodiac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->zodiac);
          this->__isset.zodiac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->blood_type);
          this->__isset.blood_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->interest);
          this->__isset.interest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->character);
          this->__isset.character = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->chest);
          this->__isset.chest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->waist);
          this->__isset.waist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->hip);
          this->__isset.hip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->address);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateUserinfoReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UpdateUserinfoReq");

  xfer += oprot->writeFieldBegin("nick_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->nick_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avatar_url", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->avatar_url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sign_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->sign_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gender", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->gender);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("birthdate", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->birthdate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chinese_zodiac", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->chinese_zodiac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zodiac", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->zodiac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("blood_type", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->blood_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("interest", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->interest);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("character", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->character);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chest", ::apache::thrift::protocol::T_I16, 11);
  xfer += oprot->writeI16(this->chest);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("waist", ::apache::thrift::protocol::T_I16, 12);
  xfer += oprot->writeI16(this->waist);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hip", ::apache::thrift::protocol::T_I16, 13);
  xfer += oprot->writeI16(this->hip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateUserinfoReq &a, UpdateUserinfoReq &b) {
  using ::std::swap;
  swap(a.nick_name, b.nick_name);
  swap(a.avatar_url, b.avatar_url);
  swap(a.sign_name, b.sign_name);
  swap(a.gender, b.gender);
  swap(a.birthdate, b.birthdate);
  swap(a.chinese_zodiac, b.chinese_zodiac);
  swap(a.zodiac, b.zodiac);
  swap(a.blood_type, b.blood_type);
  swap(a.interest, b.interest);
  swap(a.character, b.character);
  swap(a.chest, b.chest);
  swap(a.waist, b.waist);
  swap(a.hip, b.hip);
  swap(a.address, b.address);
  swap(a.__isset, b.__isset);
}

}} // namespace
